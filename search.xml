<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>part.3 Proxy Sidecar 代理服务</title>
      <link href="/2020/04/01/go-micro-part-3/"/>
      <url>/2020/04/01/go-micro-part-3/</url>
      
        <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>Micro proxy提供基于go-micro框架的代理服务。它把go-micro中的各种特性组成一个本地化的服务，并且支持把需要的特性转到其上，比如服务发现、负载均衡、容错、插件化、包装器等等。我们并不需要给把每个go-micro服务都升级以满足底层框架所要求的种种东西，只需要通过代理即可，而其它语言就只用实现很轻的客户端而不用实现所有特性就能调用服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">micro proxy 其实就是服务与服务之间如果不方便直接调用时，就可能通过proxy服务来调用另一方的接口。</span><br></pre></td></tr></table></figure><p>示意图如下：</p><img src="/2020/04/01/go-micro-part-3/proxy.svg" title="图片"><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>Micro代理默认是运行在8081端口下。</p><p>启动代理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">micro proxy</span><br><span class="line"></span><br><span class="line">NAME:</span><br><span class="line">   micro proxy - Run the service proxy</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   micro proxy [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --router value          Set the router to use e.g default, go.micro.router [$MICRO_ROUTER]</span><br><span class="line">   --router_address value  Set the router address [$MICRO_ROUTER_ADDRESS]</span><br><span class="line">   --address value         Set the proxy http address e.g 0.0.0.0:8081 [$MICRO_PROXY_ADDRESS]</span><br><span class="line">   --protocol value        Set the protocol used for proxying e.g mucp, grpc, http [$MICRO_PROXY_PROTOCOL]</span><br><span class="line">   --endpoint value        Set the endpoint to route to e.g greeter or localhost:9090 [$MICRO_PROXY_ENDPOINT]</span><br><span class="line">   --auth value            Set the proxy auth e.g jwt [$MICRO_PROXY_AUTH]</span><br><span class="line">   --help, -h              show help (default: false)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> go-micro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> go-micro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService Part.2, go-micro Function 函数式编程模型</title>
      <link href="/2020/04/01/go-micro-part-2/"/>
      <url>/2020/04/01/go-micro-part-2/</url>
      
        <content type="html"><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go </span><br><span class="line">└── proto</span><br><span class="line">    ├── user.pb.go</span><br><span class="line">    ├── user.pb.micro.go</span><br><span class="line">    └── user.proto</span><br><span class="line"></span><br><span class="line">1 directory, 6 files</span><br></pre></td></tr></table></figure></p><h1 id="定义proto"><a href="#定义proto" class="headerlink" title="定义proto"></a>定义proto</h1><p><code>user.proto</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 定义语法为 proto3</span><br><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">// 定义一个接口</span><br><span class="line">service User &#123;</span><br><span class="line">    rpc SayHello (SayRequest) returns (SayResp) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 定义消息</span><br><span class="line">message SayRequest &#123;</span><br><span class="line">    string yourName = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message SayResp &#123;</span><br><span class="line">    string data = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="生成proto"><a href="#生成proto" class="headerlink" title="生成proto"></a>生成proto</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path=. --micro_out=$&#123;MODIFY&#125;:. --go_out=$&#123;MODIFY&#125;:. user.proto</span><br></pre></td></tr></table></figure><h1 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;github.com/micro/go-micro/v2&quot;</span><br><span class="line">user &quot;go-shop/srv/functions/proto&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实现 UserHandler</span><br><span class="line">func (u *User) SayHello(ctx context.Context, req *user.SayRequest, resp *user.SayResp) error &#123;</span><br><span class="line">resp.Data = &quot;Hello ： &quot; + req.YourName</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">function := micro.NewFunction(</span><br><span class="line">micro.Name(&quot;user&quot;),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">function.Init()</span><br><span class="line">function.Handle(new(User))</span><br><span class="line">function.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调用服务"><a href="#调用服务" class="headerlink" title="调用服务"></a>调用服务</h1><h2 id="micro-web-调用"><a href="#micro-web-调用" class="headerlink" title="micro web 调用"></a>micro web 调用</h2><img src="/2020/04/01/go-micro-part-2/part2.调用.png" title="图片"><h2 id="micro-call"><a href="#micro-call" class="headerlink" title="micro call"></a>micro call</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  function git:(master) ✗ micro call user User.SayHello &apos;&#123;&quot;yourName&quot;: &quot;fei&quot;&#125;&apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;data&quot;: &quot;Hello ： fei&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> go-micro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> go-micro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go Protocol Buffers Google的数据交换格式</title>
      <link href="/2020/03/31/golang-golang-11/"/>
      <url>/2020/03/31/golang-golang-11/</url>
      
        <content type="html"><![CDATA[<p>TL;DR 一个压缩快速通讯的一种规范协商协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参考链接地址</span><br><span class="line"></span><br><span class="line">https://developers.google.com/protocol-buffers/docs/proto3</span><br><span class="line"></span><br><span class="line">https://developers.google.com/protocol-buffers/</span><br></pre></td></tr></table></figure></p><h1 id="什么是Protocol-Buffers"><a href="#什么是Protocol-Buffers" class="headerlink" title="什么是Protocol Buffers"></a>什么是Protocol Buffers</h1><p>Protocol Buffers 是Google 开发的一种与语言无关，平台无关的可扩展机制，用于对结构化数据进行序列化（例如XML），但更小，更快，更简单。您定义要一次构造数据的方式，然后可以使用生成的特殊源代码轻松地使用各种语言在各种数据流中写入和读取结构化数据。</p><p>现在有许多框架等在使用Protocol Buffers。流行的RPC框架gRPC也是基于Protocol Buffers。 Protocol Buffers 目前有2和3两个版本号。</p><h1 id="为什么要使用Protocol-Buffers？"><a href="#为什么要使用Protocol-Buffers？" class="headerlink" title="为什么要使用Protocol Buffers？"></a>为什么要使用Protocol Buffers？</h1><p>Protocol Buffers 是一种 灵活，高效，自动化的解决方案。使用协议缓冲区，您可以编写.proto要存储的数据结构的描述。由此，协议缓冲区编译器创建了一个类，该类以有效的二进制格式实现协议缓冲区数据的自动编码和解析。生成的类为构成协议缓冲区的字段提供获取器和设置器，并以协议为单位来详细阅读和写入协议缓冲区。重要的是，协议缓冲区格式支持随时间扩展格式的想法，以使代码仍可以读取以旧格式编码的数据。</p><h1 id="定义一个序列化的proto"><a href="#定义一个序列化的proto" class="headerlink" title="定义一个序列化的proto"></a>定义一个序列化的proto</h1><p>从官方示例的Person.proto文件开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// 传递的消息</span><br><span class="line">// 语法 proto3 不定义时为 proto2</span><br><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">// 定义包名，生成时会引用该命名空间 </span><br><span class="line">// 如下这个包名会在go-micro中生成 package go_micro_service_user</span><br><span class="line">// 在Go中，除非您在.proto文件中明确提供了go_package选项，否则该包将用作Go包名称。</span><br><span class="line">option gopackage=&quot;&quot;</span><br><span class="line">packge &quot;go.micro.service.user&quot;</span><br><span class="line">// 引入一个timestamp.proto </span><br><span class="line">// 来源 https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto</span><br><span class="line">import &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class="line"></span><br><span class="line">// 定义一个用户服务</span><br><span class="line">service User &#123;</span><br><span class="line">// 定义接口</span><br><span class="line">    rpc Get (Request) returns (Response) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">  // 定义一个属性传递，并给属性加上顺序</span><br><span class="line">  // 属性加上顺序的含义是 标记标识该字段在二进制编码中使用的唯一 标记</span><br><span class="line">  </span><br><span class="line">  string name = 1; // 姓名</span><br><span class="line">  int32 id = 2; // 唯一的用户ID</span><br><span class="line">  string email = 3; // 邮箱</span><br><span class="line">  // 定义枚举</span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0; // 手机 </span><br><span class="line">    HOME = 1; // 家庭座机</span><br><span class="line">    WORK = 2; // 工作手机</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 包含关联电话联系方式</span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    string number = 1; //电话号码 </span><br><span class="line">    PhoneType type = 2; // 关联枚举</span><br><span class="line">  &#125;</span><br><span class="line">  // 多个电话号码 slice</span><br><span class="line">  // 如果一个字段为repeated，则该字段可以重复任意次（包括零次）。重复值的顺序将保留在协议缓冲区中。将重复字段视为动态大小的数组。</span><br><span class="line">  repeated PhoneNumber phones = 4;</span><br><span class="line"></span><br><span class="line">  //使用引用包中的 Timestamp结构</span><br><span class="line">  google.protobuf.Timestamp last_updated = 5;</span><br><span class="line">&#125;</span><br><span class="line">// 定义电话簿</span><br><span class="line">message AddressBook&#123;</span><br><span class="line">// 多个人的slice</span><br><span class="line">repeated Person people = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="JSON对应表"><a href="#JSON对应表" class="headerlink" title="JSON对应表"></a>JSON对应表</h1><table><thead><tr><th>支持的属性</th><th>类型</th><th>JSON example</th><th>备注</th></tr></thead><tbody><tr><td>message</td><td>object</td><td><code>{&quot;fooBar&quot;: v, &quot;g&quot;: null, …}</code></td><td>生成JSON对象。 消息字段名称被映射到lowerCamelCase并成为JSON对象键。 如果指定了 <code>json_name</code> 段选项，则将使用指定的值作为键。 解析器同时接受lowerCamelCase名称（或由 <code>json_name</code>选项指定的名称）和原始原型字段名称。  null 是所有字段类型的可接受值，并被视为相应字段类型的默认值。</td></tr><tr><td>enum</td><td>string</td><td><code>&quot;FOO_BAR&quot;</code></td><td>使用proto中指定的枚举值的名称。 解析器接受枚举名称和整数值。</td></tr><tr><td>map</td><td>object</td><td><code>{&quot;k&quot;: v, …}</code></td><td>所有键都转换为字符串。</td></tr><tr><td>repeated V</td><td>array</td><td><code>[v, …]</code></td><td><code>null</code> 接受为空列表[].</td></tr><tr><td>bool</td><td>true, false</td><td><code>true, false</code></td><td></td></tr><tr><td>string</td><td>string</td><td><code>&quot;Hello World!&quot;</code></td><td></td></tr><tr><td>bytes</td><td>base64 string</td><td><code>&quot;YWJjMTIzIT8kKiYoKSctPUB+&quot;</code></td><td>JSON值将是使用带有填充的标准base64编码编码为字符串的数据。 接受带/不带填充的标准或URL安全base64编码。</td></tr><tr><td>int32, fixed32, uint32</td><td>number</td><td><code>1, -10, 0</code></td><td>JSON值为十进制数字。 可以接受数字或字符串。</td></tr><tr><td>int64, fixed64, uint64</td><td>string</td><td><code>&quot;1&quot;, &quot;-10&quot;</code></td><td>JSON值将是一个十进制字符串。 可以接受数字或字符串。</td></tr><tr><td>float, double</td><td>number</td><td><code>1.1, -10.0, 0, &quot;NaN&quot;, &quot;Infinity&quot;</code></td><td>JSON值将是数字或特殊字符串值“ NaN”，“ Infinity”和“ -Infinity”之一。 可以接受数字或字符串。 指数表示法也被接受。</td></tr><tr><td>Any</td><td><code>object</code></td><td><code>{&quot;@type&quot;: &quot;url&quot;, &quot;f&quot;: v, … }</code></td><td>如果Any包含具有特殊JSON映射的值，则将其转换如下：<code>{“ @type”：xxx，“ value”：yyy}</code>。 否则，该值将转换为JSON对象，并且将插入“ @type”字段以指示实际的数据类型。</td></tr><tr><td>Timestamp</td><td>string</td><td><code>&quot;1972-01-01T10:00:20.021Z&quot;</code></td><td>使用RFC 3339，其中生成的输出将始终进行Z归一化，并使用0、3、6或9个小数位。 也可以接受“ Z”以外的偏移。</td></tr><tr><td>Duration</td><td>string</td><td><code>&quot;1.000340012s&quot;, &quot;1s&quot;</code></td><td>生成的输出始终包含0、3、6或9个小数位数，具体取决于所需的精度，后跟后缀“ s”。 可接受的任何小数位数（也无），只要它们适合纳秒精度，并且后缀“ s”是必需的。</td></tr><tr><td>Struct</td><td><code>object</code></td><td><code>{ … }</code></td><td>任何JSON对象。 参见<code>struct.proto</code>。</td></tr><tr><td>Wrapper types</td><td>various types</td><td><code>2, &quot;2&quot;, &quot;foo&quot;, true, &quot;true&quot;, null, 0, …</code></td><td>包装器在JSON中使用与包装后的原始类型相同的表示形式，不同之处在于在数据转换和传输期间允许并保留`null’。</td></tr><tr><td>FieldMask</td><td>string</td><td><code>&quot;f.fooBar,h&quot;</code></td><td>参见<code>field_mask.proto</code>.</td></tr><tr><td>ListValue</td><td>array</td><td><code>[foo, bar, …]</code></td><td></td></tr><tr><td>Value</td><td>value</td><td></td><td>任何JSON值</td></tr><tr><td>NullValue</td><td>null</td><td></td><td>JSON null</td></tr><tr><td>Empty</td><td>object</td><td>{}</td><td>空的JSON对象</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> protobuf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService Part.1.1, 开启micro之路</title>
      <link href="/2020/03/28/go-micro-part-1-1/"/>
      <url>/2020/03/28/go-micro-part-1-1/</url>
      
        <content type="html"><![CDATA[<h1 id="获取Go-micro"><a href="#获取Go-micro" class="headerlink" title="获取Go micro"></a>获取Go micro</h1><p><code>go get -u github.com/micro/micro</code></p><h1 id="安装配置环境"><a href="#安装配置环境" class="headerlink" title="安装配置环境"></a>安装配置环境</h1><p>本文使用版本为micro v2<br>关于V1 to V2版本升级，请参考 <a href="https://mp.weixin.qq.com/s/XWf_my36Z7k3lfOySja3Sg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XWf_my36Z7k3lfOySja3Sg</a></p><h1 id="关于代理问题"><a href="#关于代理问题" class="headerlink" title="关于代理问题"></a>关于代理问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// proxychains4 socks5 代理</span><br><span class="line">proxychains4 go mod download</span><br><span class="line">proxychains4 go mod tidy</span><br><span class="line">proxychains4 go get -u</span><br><span class="line"></span><br><span class="line">// goproxy.io</span><br><span class="line">go env -w GOPROXY=&quot;https://goproxy.io,direct&quot;</span><br></pre></td></tr></table></figure><h2 id="服务注册中心-etcd-conusl"><a href="#服务注册中心-etcd-conusl" class="headerlink" title="服务注册中心 etcd || conusl"></a>服务注册中心 etcd || conusl</h2><p>windows 用户请参考 <a href="https://chocolatey.org/" title="Choco" target="_blank" rel="noopener">Windows包管理 下载地址</a><br><code>consul 安装</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># install</span><br><span class="line">brew install consul</span><br><span class="line"># run</span><br><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure></p><p><code>ETCD 安装</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># install</span><br><span class="line">brew install etcd</span><br><span class="line"># run</span><br><span class="line">etcd</span><br></pre></td></tr></table></figure></p><ul><li>ETCD 参考链接 <a href="https://doczhcn.gitbook.io/etcd/index" target="_blank" rel="noopener">https://doczhcn.gitbook.io/etcd/index</a></li><li>Consul 参考链接 <a href="https://kingfree.gitbook.io/consul/getting-started" target="_blank" rel="noopener">https://kingfree.gitbook.io/consul/getting-started</a><h2 id="micro-命令列表"><a href="#micro-命令列表" class="headerlink" title="micro 命令列表"></a>micro 命令列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">NAME:</span><br><span class="line">   micro - A microservice runtime</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   micro [global options] command [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   latest</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">     api         运行api网关</span><br><span class="line">     bot         运行chatops机器人</span><br><span class="line">     cli         运行交互式CLI</span><br><span class="line">     call        呼叫服务，使用样例: micro call greeter Say.Hello &apos;&#123;&quot;name&quot;: &quot;John&quot;&#125;</span><br><span class="line">     services    列出网络中的服务</span><br><span class="line">     stream      创建服务流</span><br><span class="line">     publish     将消息发布到Topic</span><br><span class="line">     stats       服务的统计信息</span><br><span class="line">     list        显示列表 </span><br><span class="line">     register    注册项目</span><br><span class="line">     deregister  注销项目</span><br><span class="line">     get         Get item from registry</span><br><span class="line">     broker      Run the message broker</span><br><span class="line">     health      健康检查</span><br><span class="line">     proxy       Run the service proxy</span><br><span class="line">     monitor     Run the monitoring service</span><br><span class="line">     router      Run the micro network router</span><br><span class="line">     tunnel      Run the micro network tunnel</span><br><span class="line">     network     Run the micro network node</span><br><span class="line">     registry    Run the service registry</span><br><span class="line">     runtime     微服务运行时管理系统</span><br><span class="line">     run         运行服务</span><br><span class="line">     kill        强制退出正在运行的服务</span><br><span class="line">     ps          查看正在运行的服务</span><br><span class="line">     server      Run the micro network server</span><br><span class="line">     service     运行微服务</span><br><span class="line">     store       Run the micro store service</span><br><span class="line">     token       API令牌</span><br><span class="line">     new         创建服务模板</span><br><span class="line">     plugin      插件命令</span><br><span class="line">     web         运行Web仪表板</span><br><span class="line">     debug       运行调试服务</span><br><span class="line">     logs        获取服务的日志</span><br><span class="line">     init        micro 初始化</span><br><span class="line">     help, h     帮助命令</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --client value                       Client for go-micro; rpc [$MICRO_CLIENT]</span><br><span class="line">   --client_request_timeout value       Sets the client request timeout. e.g 500ms, 5s, 1m. Default: 5s [$MICRO_CLIENT_REQUEST_TIMEOUT]</span><br><span class="line">   --client_retries value               Sets the client retries. Default: 1 (default: 1) [$MICRO_CLIENT_RETRIES]</span><br><span class="line">   --client_pool_size value             Sets the client connection pool size. Default: 1 (default: 0) [$MICRO_CLIENT_POOL_SIZE]</span><br><span class="line">   --client_pool_ttl value              Sets the client connection pool ttl. e.g 500ms, 5s, 1m. Default: 1m [$MICRO_CLIENT_POOL_TTL]</span><br><span class="line">   --register_ttl value                 Register TTL in seconds (default: 60) [$MICRO_REGISTER_TTL]</span><br><span class="line">   --register_interval value            Register interval in seconds (default: 30) [$MICRO_REGISTER_INTERVAL]</span><br><span class="line">   --server value                       Server for go-micro; rpc [$MICRO_SERVER]</span><br><span class="line">   --server_name value                  Name of the server. go.micro.srv.example [$MICRO_SERVER_NAME]</span><br><span class="line">   --server_version value               Version of the server. 1.1.0 [$MICRO_SERVER_VERSION]</span><br><span class="line">   --server_id value                    Id of the server. Auto-generated if not specified [$MICRO_SERVER_ID]</span><br><span class="line">   --server_address value               Bind address for the server. 127.0.0.1:8080 [$MICRO_SERVER_ADDRESS]</span><br><span class="line">   --server_advertise value             Used instead of the server_address when registering with discovery. 127.0.0.1:8080 [$MICRO_SERVER_ADVERTISE]</span><br><span class="line">   --server_metadata value              A list of key-value pairs defining metadata. version=1.0.0 [$MICRO_SERVER_METADATA]</span><br><span class="line">   --broker value                       Broker for pub/sub. http, nats, rabbitmq [$MICRO_BROKER]</span><br><span class="line">   --broker_address value               Comma-separated list of broker addresses [$MICRO_BROKER_ADDRESS]</span><br><span class="line">   --profile value                      Debug profiler for cpu and memory stats [$MICRO_DEBUG_PROFILE]</span><br><span class="line">   --registry value                     Registry for discovery. etcd, mdns [$MICRO_REGISTRY]</span><br><span class="line">   --registry_address value             Comma-separated list of registry addresses [$MICRO_REGISTRY_ADDRESS]</span><br><span class="line">   --runtime value                      Runtime for building and running services e.g local, kubernetes (default: &quot;local&quot;) [$MICRO_RUNTIME]</span><br><span class="line">   --runtime_source value               Runtime source for building and running services e.g github.com/micro/service (default: &quot;github.com/micro/services&quot;) [$MICRO_RUNTIME_SOURCE]</span><br><span class="line">   --selector value                     Selector used to pick nodes for querying [$MICRO_SELECTOR]</span><br><span class="line">   --store value                        Store used for key-value storage [$MICRO_STORE]</span><br><span class="line">   --store_address value                Comma-separated list of store addresses [$MICRO_STORE_ADDRESS]</span><br><span class="line">   --store_namespace value              Namespace for store data [$MICRO_STORE_NAMESPACE]</span><br><span class="line">   --transport value                    Transport mechanism used; http [$MICRO_TRANSPORT]</span><br><span class="line">   --transport_address value            Comma-separated list of transport addresses [$MICRO_TRANSPORT_ADDRESS]</span><br><span class="line">   --tracer value                       Tracer for distributed tracing, e.g. memory, jaeger [$MICRO_TRACER]</span><br><span class="line">   --tracer_address value               Comma-separated list of tracer addresses [$MICRO_TRACER_ADDRESS]</span><br><span class="line">   --auth value                         Auth for role based access control, e.g. service [$MICRO_AUTH]</span><br><span class="line">   --auth_token value                   Auth token used for client authentication [$MICRO_AUTH_TOKEN]</span><br><span class="line">   --auth_public_key value              Public key for JWT auth (base64 encoded PEM) [$MICRO_AUTH_PUBLIC_KEY]</span><br><span class="line">   --auth_private_key value             Private key for JWT auth (base64 encoded PEM) [$MICRO_AUTH_PRIVATE_KEY]</span><br><span class="line">   --auth_exclude value                 Comma-separated list of endpoints excluded from authentication, e.g. Users.ListUsers [$MICRO_AUTH_EXCLUDE]</span><br><span class="line">   --auth_provider value                Auth provider used to login user [$MICRO_AUTH_PROVIDER]</span><br><span class="line">   --auth_provider_client_id value      The client id to be used for oauth [$MICRO_AUTH_PROVIDER_CLIENT_ID]</span><br><span class="line">   --auth_provider_client_secret value  The client secret to be used for oauth [$MICRO_AUTH_PROVIDER_CLIENT_SECRET]</span><br><span class="line">   --auth_provider_endpoint value       The enpoint to be used for oauth [$MICRO_AUTH_PROVIDER_ENDPOINT]</span><br><span class="line">   --auth_provider_redirect value       The redirect to be used for oauth [$MICRO_AUTH_PROVIDER_REDIRECT]</span><br><span class="line">   --auth_provider_scope value          The scope to be used for oauth [$MICRO_AUTH_PROVIDER_SCOPE]</span><br><span class="line">   --config value                       The source of the config to be used to get configuration [$MICRO_CONFIG]</span><br><span class="line">   --local                              Enable local only development: Defaults to true. (default: false)</span><br><span class="line">   --peer                               Peer with the global network to share services (default: false)</span><br><span class="line">   --enable_acme                        Enables ACME support via Let&apos;s Encrypt. ACME hosts should also be specified. (default: false) [$MICRO_ENABLE_ACME]</span><br><span class="line">   --acme_hosts value                   Comma separated list of hostnames to manage ACME certs for [$MICRO_ACME_HOSTS]</span><br><span class="line">   --acme_provider value                The provider that will be used to communicate with Let&apos;s Encrypt. Valid options: autocert, certmagic [$MICRO_ACME_PROVIDER]</span><br><span class="line">   --enable_tls                         Enable TLS support. Expects cert and key file to be specified (default: false) [$MICRO_ENABLE_TLS]</span><br><span class="line">   --tls_cert_file value                Path to the TLS Certificate file [$MICRO_TLS_CERT_FILE]</span><br><span class="line">   --tls_key_file value                 Path to the TLS Key file [$MICRO_TLS_KEY_FILE]</span><br><span class="line">   --tls_client_ca_file value           Path to the TLS CA file to verify clients against [$MICRO_TLS_CLIENT_CA_FILE]</span><br><span class="line">   --api_address value                  Set the api address e.g 0.0.0.0:8080 [$MICRO_API_ADDRESS]</span><br><span class="line">   --proxy_address value                Proxy requests via the HTTP address specified [$MICRO_PROXY_ADDRESS]</span><br><span class="line">   --web_address value                  Set the web UI address e.g 0.0.0.0:8082 [$MICRO_WEB_ADDRESS]</span><br><span class="line">   --network value                      Set the micro network name: local, go.micro [$MICRO_NETWORK]</span><br><span class="line">   --network_address value              Set the micro network address e.g. :9093 [$MICRO_NETWORK_ADDRESS]</span><br><span class="line">   --router_address value               Set the micro router address e.g. :8084 [$MICRO_ROUTER_ADDRESS]</span><br><span class="line">   --gateway_address value              Set the micro default gateway address e.g. :9094 [$MICRO_GATEWAY_ADDRESS]</span><br><span class="line">   --tunnel_address value               Set the micro tunnel address e.g. :8083 [$MICRO_TUNNEL_ADDRESS]</span><br><span class="line">   --api_handler value                  Specify the request handler to be used for mapping HTTP requests to services; &#123;api, proxy, rpc&#125; [$MICRO_API_HANDLER]</span><br><span class="line">   --api_namespace value                Set the namespace used by the API e.g. com.example.api [$MICRO_API_NAMESPACE]</span><br><span class="line">   --web_namespace value                Set the namespace used by the Web proxy e.g. com.example.web [$MICRO_WEB_NAMESPACE]</span><br><span class="line">   --web_url value                      Set the host used for the web dashboard e.g web.example.com [$MICRO_WEB_HOST]</span><br><span class="line">   --enable_stats                       Enable stats (default: false) [$MICRO_ENABLE_STATS]</span><br><span class="line">   --auto_update                        Enable automatic updates (default: false) [$MICRO_AUTO_UPDATE]</span><br><span class="line">   --report_usage                       Report usage statistics (default: true) [$MICRO_REPORT_USAGE]</span><br><span class="line">   --namespace value                    Set the micro service namespace (default: &quot;go.micro&quot;) [$MICRO_NAMESPACE]</span><br><span class="line">   --plugin value                       Comma separated list of plugins e.g broker/rabbitmq, registry/etcd, micro/basic_auth, /path/to/plugin.so [$MICRO_PLUGIN]</span><br><span class="line">   --help, -h                           show help (default: false)</span><br><span class="line">   --version                            print the version (default: false)</span><br></pre></td></tr></table></figure></li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="利用micro-new-创建微服务"><a href="#利用micro-new-创建微服务" class="headerlink" title="利用micro new 创建微服务"></a>利用micro new 创建微服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NAME:</span><br><span class="line">   micro new - Create a service template</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   micro new [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --namespace value  命名空间 com.example (默认: &quot;go.micro&quot;)</span><br><span class="line">   --type value       服务类型 可选值为: api, fnc, srv, web (默认: &quot;srv&quot;)</span><br><span class="line">   --fqdn value       完全限定域名 e.g com.example.srv.service (defaults to namespace.type.alias)</span><br><span class="line">   --alias value      如果指定别名，别名是用作组合名称的一部分的简称</span><br><span class="line">   --plugin value     指定插件 e.g --plugin=registry=etcd:broker=nats or use flag multiple times</span><br><span class="line">   --gopath           在gopath中创建服务。 默认为true。</span><br></pre></td></tr></table></figure><h2 id="运行生产指令"><a href="#运行生产指令" class="headerlink" title="运行生产指令"></a>运行生产指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">micro new go-shop/user-srv  --namespace go.shop --type srv</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">➜  src micro new go-shop/user-srv  --namespace go.shop --type srv</span><br><span class="line">Creating service go.shop.srv.user in /Volumes/Data/gopath/src/go-shop/user-srv</span><br><span class="line"></span><br><span class="line">目录结构</span><br><span class="line">.</span><br><span class="line">├── main.go 主入口文件</span><br><span class="line">├── generate.go make proto合集 请自己定义</span><br><span class="line">├── plugin.go 插件指定</span><br><span class="line">├── handler 处理程序</span><br><span class="line">│   └── user.go</span><br><span class="line">├── subscriber 订阅</span><br><span class="line">│   └── user.go</span><br><span class="line">├── proto/user proto文件</span><br><span class="line">│   └── user.proto</span><br><span class="line">├── Dockerfile docker环境</span><br><span class="line">├── Makefile make 指令 提供了proto 生成以及 build test docker等命令</span><br><span class="line">├── README.md</span><br><span class="line">└── go.mod</span><br><span class="line"></span><br><span class="line">出现下文继续操作 </span><br><span class="line"></span><br><span class="line">download protobuf for micro:</span><br><span class="line">安装 protobuf</span><br><span class="line">brew install protobuf</span><br><span class="line">// 安装 proto,protoc-gen-go</span><br><span class="line">go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class="line">// 安装 protoc-gen-micro</span><br><span class="line">go get -u github.com/micro/protoc-gen-micro/v2</span><br><span class="line"></span><br><span class="line">compile the proto file user.proto:</span><br><span class="line">// 生成 protobuf</span><br><span class="line">cd go-shop/user-srv</span><br><span class="line">protoc --proto_path=.:$GOPATH/src --go_out=. --micro_out=. proto/user/user.proto</span><br></pre></td></tr></table></figure><p>此时user-srv 服务已经创建，输出的信息如上, 请按照提示和注释进行生产proto</p><ul><li><p>打开项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goland .</span><br></pre></td></tr></table></figure></li><li><p>下载依赖 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure></li></ul><h2 id="尝试运行"><a href="#尝试运行" class="headerlink" title="尝试运行"></a>尝试运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  user-srv go run main.go</span><br><span class="line">2020-03-29 15:27:32  level=info Starting [service] go.micro.service.user</span><br><span class="line">2020-03-29 15:27:32  level=info Server [grpc] Listening on [::]:51682</span><br><span class="line">2020-03-29 15:27:32  level=info Broker [eats] Connected to [::]:51684</span><br><span class="line">2020-03-29 15:27:32  level=info Registry [mdns] Registering node: go.micro.service.user-478c8fe4-82fb-4c33-ae0e-9fe6290adbda</span><br><span class="line">2020-03-29 15:27:32  level=info Subscribing to topic: go.micro.service.user</span><br></pre></td></tr></table></figure><p>可以看到 服务运行起来了，输出信息分别为</p><ul><li>第1行 服务名称  go.micro.service.user</li><li>第2行 运行服务类型 <code>grpc</code> 监听端口  <code>51682</code></li><li>第3行 运行 Broker 类型 <code>eats</code> 连接到 <code>51684</code> (<code>broker 用于异步消息</code>)<br>可降维理解为 <code>事件代理</code><br><code>例如，你想 N 个不同的服务针对使用 gRPC 创建新用户采取行动，可能需要在用户服务中实例化 N 个客户端。而借助事件发布订阅或事件驱动架构，你的服务就不需要关心这些。</code><br>参考连接： <a href="https://micro.mu/docs/cn/go-micro-internals.html#%E4%BB%A3%E7%90%86broker" target="_blank" rel="noopener">https://micro.mu/docs/cn/go-micro-internals.html#%E4%BB%A3%E7%90%86broker</a></li><li>第4行 注册到 <code>mdns</code> , 注册节点 <code>go.micro.service</code></li><li>第5行 订阅 Topic <code>go.micro.service.user</code></li></ul><p>服务运行起来后，因为其是一个<code>grpc</code>服务，我们可以使用如下的调用方式</p><h3 id="调用RPC-服务-micro-call"><a href="#调用RPC-服务-micro-call" class="headerlink" title="调用RPC 服务 micro call"></a>调用RPC 服务 micro call</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  user-srv micro call go.micro.service.user User.Call &apos;&#123;&quot;name&quot;: &quot;c&quot;&#125;&apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;msg&quot;: &quot;Hello fei&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看-micro-控制面板"><a href="#查看-micro-控制面板" class="headerlink" title="查看 micro 控制面板"></a>查看 micro 控制面板</h3><p>如果你没有办法了解其暴露的接口，可以使用此方法查看其可调用的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  user-srv micro web</span><br><span class="line">2020-03-29 15:47:36  level=info service=web HTTP API Listening on [::]:8082</span><br><span class="line">2020-03-29 15:47:36  level=info service=web Starting [service] go.micro.web</span><br><span class="line">2020-03-29 15:47:36  level=info service=web Server [grpc] Listening on [::]:52121</span><br><span class="line">2020-03-29 15:47:36  level=info service=web Registry [mdns] Registering node: go.micro.web-4327b842-196c-4187-b109-a2235fbfc9da</span><br></pre></td></tr></table></figure></p><p>打开 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a> 即可查看服务</p><h3 id="micro-网关"><a href="#micro-网关" class="headerlink" title="micro 网关"></a>micro 网关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  user-srv micro api --help</span><br><span class="line">NAME:</span><br><span class="line">   micro api - 启用API网关</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   micro api [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --address value    设置API网关监听地址 e.g 0.0.0.0:8080 [$MICRO_API_ADDRESS]</span><br><span class="line">   --handler value    指定用于将HTTP请求映射到服务的请求处理程序 ; &#123;api, event, http, rpc&#125; [$MICRO_API_HANDLER]</span><br><span class="line">   --namespace value  设置API使用的名称空间 e.g. com.example.api [$MICRO_API_NAMESPACE]</span><br><span class="line">   --resolver value   设置API使用的主机名解析器 &#123;host, path, grpc&#125; [$MICRO_API_RESOLVER]</span><br><span class="line">   --enable_rpc       启用直接通过/ rpc调用后端 (default: false) [$MICRO_API_ENABLE_RPC]</span><br><span class="line">   --enable_cors      启用CORS，从而允许前端应用程序调用该API (default: true) [$MICRO_API_ENABLE_CORS]</span><br><span class="line">   --help, -h         show help (default: false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请注意，该调用方式有一个前提，提供API网关相关代码 Or 指定命名空间</span><br></pre></td></tr></table></figure><h4 id="运行API-指定命名空间的方式"><a href="#运行API-指定命名空间的方式" class="headerlink" title="运行API 指定命名空间的方式"></a>运行API 指定命名空间的方式</h4><p><code>micro api --namespace=go.micro.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  user-srv micro api --namespace=go.micro.service</span><br><span class="line">2020-03-29 16:10:53  level=info service=api Registering API Default Handler at /</span><br><span class="line">2020-03-29 16:10:53  level=info service=api HTTP API Listening on [::]:8080</span><br><span class="line">2020-03-29 16:10:53  level=info service=api Starting [service] go.micro.api</span><br><span class="line">2020-03-29 16:10:53  level=info service=api Server [grpc] Listening on [::]:52404</span><br><span class="line">2020-03-29 16:10:53  level=info service=api Registry [mdns] Registering node: go.micro.api-69c94b39-0fa8-474c-9edd-c5e1db9157b0</span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:8080/user/user/call?name=fei" target="_blank" rel="noopener">http://localhost:8080/user/user/call?name=fei</a> 即可查看响应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;msg&quot;: &quot;Hello fei&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建立一个API的方式"><a href="#建立一个API的方式" class="headerlink" title="建立一个API的方式"></a>建立一个API的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line"></span><br><span class="line">api &quot;github.com/micro/go-micro/api/proto&quot;</span><br><span class="line">&quot;github.com/micro/go-micro/v2&quot;</span><br><span class="line">&quot;github.com/micro/go-micro/v2/errors&quot;</span><br><span class="line">user &quot;go-shop/user-srv/proto/user&quot;</span><br><span class="line"></span><br><span class="line">&quot;context&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">Client user.UserService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实现 UserHandler 的Call</span><br><span class="line">func (s *User) Call(ctx context.Context, req *api.Request, rsp *api.Response) error &#123;</span><br><span class="line">log.Print(&quot;开始接受请求&quot;)</span><br><span class="line"></span><br><span class="line">name, ok := req.Get[&quot;name&quot;]</span><br><span class="line">log.Print(name)</span><br><span class="line">if !ok || len(name.Values) == 0 &#123;</span><br><span class="line">return errors.BadRequest(&quot;go.micro.api.user&quot;, &quot;名称不能为空&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 调用RPC服务</span><br><span class="line">response, err := s.Client.Call(ctx, &amp;user.Request&#123;</span><br><span class="line">Name: strings.Join(name.Values, &quot; &quot;),</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">// 准备返回数据</span><br><span class="line">rsp.StatusCode = 200</span><br><span class="line">b, _ := json.Marshal(map[string]string&#123;</span><br><span class="line">&quot;message&quot;: response.Msg,</span><br><span class="line">&#125;)</span><br><span class="line">rsp.Body = string(b)</span><br><span class="line"></span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(&quot;go.micro.api.user&quot;),</span><br><span class="line">)</span><br><span class="line">log.Println(&quot;开始API服务&quot;)</span><br><span class="line">// parse command line flags</span><br><span class="line">service.Init()</span><br><span class="line">// 初始化服务调用</span><br><span class="line">service.Server().Handle(</span><br><span class="line">service.Server().NewHandler(</span><br><span class="line">&amp;User&#123;Client: user.NewUserService(&quot;go.micro.service.user&quot;, service.Client())&#125;,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if err := service.Run(); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码保存到 <code>api/api.go</code> 中</p><p>运行API<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  user-srv micro api --handler=api</span><br><span class="line">2020-03-29 17:11:09  level=info service=api Registering API Request Handler at /</span><br><span class="line">2020-03-29 17:11:09  level=info service=api HTTP API Listening on [::]:8080</span><br><span class="line">2020-03-29 17:11:09  level=info service=api Starting [service] go.micro.api</span><br><span class="line">2020-03-29 17:11:09  level=info service=api Server [grpc] Listening on [::]:53370</span><br><span class="line">2020-03-29 17:11:09  level=info service=api Registry [mdns] Registering node: go.micro.api-719da628-e5a1-4fe8-9dcf-da03c63dfe22</span><br><span class="line"></span><br><span class="line">➜  user-srv go run api/api.go</span><br><span class="line">2020-03-29 17:14:26.735917 I | 开始API服务</span><br><span class="line">2020-03-29 17:14:26  level=info Starting [service] go.micro.api.user</span><br><span class="line">2020-03-29 17:14:26  level=info Server [grpc] Listening on [::]:53441</span><br><span class="line">2020-03-29 17:14:26  level=info Registry [mdns] Registering node: go.micro.api.user-7eed385f-6471-4317-988a-d8fa380ff81a</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:8080/user/user/call?name=fei" target="_blank" rel="noopener">http://localhost:8080/user/user/call?name=fei</a> 时</p><p>返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;message&quot;: &quot;Hello fei&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">同时日志会打印 </span><br><span class="line">2020-03-29 17:17:19.429649 I | 开始接受请求</span><br><span class="line">2020-03-29 17:17:19.429712 I | key:&quot;name&quot; values:&quot;fei&quot;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>so,本次为你介绍了</p><ul><li>micro new<br> 使用官方new 指令初始化项目模板</li><li>micro web<br> 使用控制台查看服务，调用等</li><li>micro api<br> 网关的使用等</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://micro.mu/docs/cn/api.html" target="_blank" rel="noopener">https://micro.mu/docs/cn/api.html</a><br><a href="https://micro.mu/docs/cn/web.html" target="_blank" rel="noopener">https://micro.mu/docs/cn/web.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> go-micro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> go-micro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编指令整理</title>
      <link href="/2020/01/15/asm-%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/01/15/asm-%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="汇编寄存器整理"><a href="#汇编寄存器整理" class="headerlink" title="汇编寄存器整理"></a>汇编寄存器整理</h1><h2 id="1-通用数据传送指令"><a href="#1-通用数据传送指令" class="headerlink" title="1. 通用数据传送指令"></a>1. 通用数据传送指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MOV     传送字或字节.  </span><br><span class="line">MOVSX   先符号扩展,再传送.  </span><br><span class="line">MOVZX   先零扩展,再传送.  </span><br><span class="line">PUSH    把字压入堆栈.  </span><br><span class="line">POP     把字弹出堆栈.  </span><br><span class="line">PUSHA   把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.  </span><br><span class="line">POPA    把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.  </span><br><span class="line">PUSHAD  把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.  </span><br><span class="line">POPAD   把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈.  </span><br><span class="line">BSWAP   交换32位寄存器里字节的顺序  </span><br><span class="line">XCHG    交换字或字节.(至少有一个操作数为寄存器,段寄存器不可作为操作数)  </span><br><span class="line">CMPXCHG 比较并交换操作数.(第二个操作数必须为累加器AL/AX/EAX)  </span><br><span class="line">XADD    先交换再累加.(结果在第一个操作数里)  </span><br><span class="line">XLAT    字节查表转换.----BX指向一张256字节的表的起点,</span><br><span class="line">        AL为表的索引值(0-255,即0-FFH);</span><br><span class="line">        返回AL为查表结果.([BX+AL]-&gt;AL)</span><br></pre></td></tr></table></figure><h2 id="2-输入输出端口传送指令"><a href="#2-输入输出端口传送指令" class="headerlink" title="2. 输入输出端口传送指令:"></a>2. 输入输出端口传送指令:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IN      I/O端口输入. ( 语法: IN   累加器,    &#123;端口号│DX&#125; )  </span><br><span class="line">OUT     I/O端口输出. ( 语法: OUT &#123;端口号│DX&#125;,累加器 )</span><br><span class="line">                    输入输出端口由立即方式指定时,其范围是 0-255; </span><br><span class="line">                    由寄存器 DX 指定时,其范围是 0-65535.</span><br></pre></td></tr></table></figure><h2 id="3-目的地址传送指令"><a href="#3-目的地址传送指令" class="headerlink" title="3. 目的地址传送指令:"></a>3. 目的地址传送指令:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LEA     装入有效地址.例: LEA DX,string ;把偏移地址存到DX.  </span><br><span class="line">LDS     传送目标指针,把指针内容装入DS.例: LDS SI,string ;把段地址:偏移地址存到DS:SI.  </span><br><span class="line">LES     传送目标指针,把指针内容装入ES.例: LES DI,string ;把段地址:偏移地址存到ES:DI.  </span><br><span class="line">LFS     传送目标指针,把指针内容装入FS.例: LFS DI,string ;把段地址:偏移地址存到FS:DI.  </span><br><span class="line">LGS     传送目标指针,把指针内容装入GS.例: LGS DI,string ;把段地址:偏移地址存到GS:DI.  </span><br><span class="line">LSS     传送目标指针,把指针内容装入SS.例: LSS DI,string ;把段地址:偏移地址存到SS:DI.</span><br></pre></td></tr></table></figure><h2 id="4-标志传送指令"><a href="#4-标志传送指令" class="headerlink" title="4. 标志传送指令:"></a>4. 标志传送指令:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LAHF    标志寄存器传送,把标志装入AH.  </span><br><span class="line">SAHF    标志寄存器传送,把AH内容装入标志寄存器.  </span><br><span class="line">PUSHF   标志入栈.  </span><br><span class="line">POPF    标志出栈.  </span><br><span class="line">PUSHD   32位标志入栈.  </span><br><span class="line">POPD    32位标志出栈.</span><br></pre></td></tr></table></figure><h2 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ADD     加法.  </span><br><span class="line">ADC     带进位加法.  </span><br><span class="line">INC     加 1.  </span><br><span class="line">AAA     加法的ASCII码调整.  </span><br><span class="line">DAA     加法的十进制调整.  </span><br><span class="line">SUB     减法.  </span><br><span class="line">SBB     带借位减法.  </span><br><span class="line">DEC     减 1.  </span><br><span class="line">NEG     求反(以    0 减之).  </span><br><span class="line">CMP     比较.(两操作数作减法,仅修改标志位,不回送结果).  </span><br><span class="line">AAS     减法的ASCII码调整.  </span><br><span class="line">DAS     减法的十进制调整.  </span><br><span class="line">MUL     无符号乘法.结果回送AH和AL(字节运算),或DX和AX(字运算),  </span><br><span class="line">IMUL    整数乘法.结果回送AH和AL(字节运算),或DX和AX(字运算),  </span><br><span class="line">AAM     乘法的ASCII码调整.  </span><br><span class="line">DIV     无符号除法.结果回送:商回送AL,余数回送AH, (字节运算);或 商回送AX,余数回送DX, (字运算).  </span><br><span class="line">IDIV    整数除法.结果回送:商回送AL,余数回送AH, (字节运算);或 商回送AX,余数回送DX, (字运算).  </span><br><span class="line">AAD     除法的ASCII码调整.  </span><br><span class="line">CBW     字节转换为字. (把AL中字节的符号扩展到AH中去)  </span><br><span class="line">CWD     字转换为双字. (把AX中的字的符号扩展到DX中去)  </span><br><span class="line">CWDE    字转换为双字. (把AX中的字符号扩展到EAX中去)  </span><br><span class="line">CDQ     双字扩展. (把EAX中的字的符号扩展到EDX中去)  </span><br><span class="line"></span><br><span class="line">DS:SI   源串段寄存器 :源串变址.  </span><br><span class="line">ES:DI   目标串段寄存器:目标串变址.  </span><br><span class="line">CX      重复次数计数器.  </span><br><span class="line">AL/AX   扫描值.  </span><br><span class="line">D标志    0表示重复操作中SI和DI应自动增量; 1表示应自动减量.  </span><br><span class="line">Z标志    用来控制扫描或比较操作的结束.</span><br></pre></td></tr></table></figure><h2 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AND     与运算.  </span><br><span class="line">OR      或运算.  </span><br><span class="line">XOR     异或运算.  </span><br><span class="line">NOT     取反.  </span><br><span class="line">TEST    测试.(两操作数作与运算,仅修改标志位,不回送结果).  </span><br><span class="line">SHL     逻辑左移.  </span><br><span class="line">SAL     算术左移.(=SHL)  </span><br><span class="line">SHR     逻辑右移.  </span><br><span class="line">SAR     算术右移.(=SHR)  </span><br><span class="line">ROL     循环左移.  </span><br><span class="line">ROR     循环右移.  </span><br><span class="line">RCL     通过进位的循环左移.  </span><br><span class="line">RCR     通过进位的循环右移.  </span><br><span class="line">          以上八种移位指令,其移位次数可达255次.  </span><br><span class="line">          移位一次时, 可直接用操作码. 如 SHL AX,1.  </span><br><span class="line">          移位&gt;1次时, 则由寄存器CL给出移位次数.  </span><br><span class="line">          如 MOV CL,04   SHL AX,CL</span><br></pre></td></tr></table></figure><h1 id="串指令"><a href="#串指令" class="headerlink" title="串指令"></a>串指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MOVS    串传送.( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )  </span><br><span class="line">CMPS    串比较.( CMPSB 比较字符. CMPSW 比较字. )  </span><br><span class="line">SCAS    串扫描.把AL或AX的内容与目标串作比较,比较结果反映在标志位.  </span><br><span class="line">LODS    装入串.把源串中的元素(字或字节)逐一装入AL或AX中.</span><br><span class="line">        ( LODSB 传送字符. LODSW 传送字.    LODSD 传送双字. )  </span><br><span class="line">STOS    保存串.是LODS的逆过程.  </span><br><span class="line">REP         当CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPE/REPZ   当ZF=1或比较结果相等,且CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPC        当CF=1且CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPNC       当CF=0且CX/ECX&lt;&gt;0时重复.</span><br></pre></td></tr></table></figure><h2 id="无条件转移指令-长转移"><a href="#无条件转移指令-长转移" class="headerlink" title="无条件转移指令 (长转移)"></a>无条件转移指令 (长转移)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JMP         无条件转移指令  </span><br><span class="line">CALL        过程调用  </span><br><span class="line">RET/RETF    过程返回</span><br></pre></td></tr></table></figure><h2 id="条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2"><a href="#条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2" class="headerlink" title="条件转移指令 (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )"></a>条件转移指令 (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">JA/JNBE     不小于或不等于时转移.  </span><br><span class="line">    JAE/JNB     大于或等于转移.  </span><br><span class="line">    JB/JNAE     小于转移.  </span><br><span class="line">    JBE/JNA     小于或等于转移.  </span><br><span class="line">        以上四条,测试无符号整数运算的结果(标志C和Z).  </span><br><span class="line">    JG/JNLE     大于转移.  </span><br><span class="line">    JGE/JNL     大于或等于转移.  </span><br><span class="line">    JL/JNGE     小于转移.  </span><br><span class="line">    JLE/JNG     小于或等于转移.  </span><br><span class="line">        以上四条,测试带符号整数运算的结果(标志S,O和Z).  </span><br><span class="line">    JE/JZ       等于转移.  </span><br><span class="line">    JNE/JNZ     不等于时转移.  </span><br><span class="line">    JC          有进位时转移.  </span><br><span class="line">    JNC         无进位时转移.  </span><br><span class="line">    JNO         不溢出时转移.  </span><br><span class="line">    JNP/JPO     奇偶性为奇数时转移.  </span><br><span class="line">    JNS         符号位为 &quot;0&quot; 时转移.  </span><br><span class="line">    JO          溢出转移.  </span><br><span class="line">    JP/JPE      奇偶性为偶数时转移.  </span><br><span class="line">    JS          符号位为 &quot;1&quot; 时转移.</span><br></pre></td></tr></table></figure><h2 id="循环控制指令-短转移"><a href="#循环控制指令-短转移" class="headerlink" title="循环控制指令(短转移)"></a>循环控制指令(短转移)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOOP            CX不为零时循环.  </span><br><span class="line">LOOPE/LOOPZ     CX不为零且标志Z=1时循环.  </span><br><span class="line">LOOPNE/LOOPNZ   CX不为零且标志Z=0时循环.  </span><br><span class="line">JCXZ            CX为零时转移.  </span><br><span class="line">JECXZ           ECX为零时转移.</span><br></pre></td></tr></table></figure><h2 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INT         中断指令  </span><br><span class="line">INTO        溢出中断  </span><br><span class="line">IRET        中断返回</span><br></pre></td></tr></table></figure><h2 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HLT         处理器暂停,  直到出现中断或复位信号才继续.  </span><br><span class="line">WAIT        当芯片引线TEST为高电平时使CPU进入等待状态.  </span><br><span class="line">ESC         转换到外处理器.  </span><br><span class="line">LOCK        封锁总线.  </span><br><span class="line">NOP         空操作.  </span><br><span class="line">STC         置进位标志位.  </span><br><span class="line">CLC         清进位标志位.  </span><br><span class="line">CMC         进位标志取反.  </span><br><span class="line">STD         置方向标志位.  </span><br><span class="line">CLD         清方向标志位.  </span><br><span class="line">STI         置中断允许位.  </span><br><span class="line">CLI         清中断允许位.</span><br></pre></td></tr></table></figure><h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DW          定义字(2字节).  </span><br><span class="line">PROC        定义过程.  </span><br><span class="line">ENDP        过程结束.  </span><br><span class="line">SEGMENT     定义段.  </span><br><span class="line">ASSUME      建立段寄存器寻址.  </span><br><span class="line">ENDS        段结束.  </span><br><span class="line">END         程序结束.</span><br></pre></td></tr></table></figure><h2 id="处理机控制指令：标志处理指令"><a href="#处理机控制指令：标志处理指令" class="headerlink" title="处理机控制指令：标志处理指令"></a>处理机控制指令：标志处理指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CLC     进位位置0指令  </span><br><span class="line">CMC     进位位求反指令  </span><br><span class="line">STC     进位位置为1指令  </span><br><span class="line">CLD     方向标志置1指令  </span><br><span class="line">STD     方向标志位置1指令  </span><br><span class="line">CLI     中断标志置0指令  </span><br><span class="line">STI     中断标志置1指令  </span><br><span class="line">NOP     无操作  </span><br><span class="line">HLT     停机  </span><br><span class="line">WAIT    等待  </span><br><span class="line">ESC     换码  </span><br><span class="line">LOCK    封锁</span><br></pre></td></tr></table></figure><h1 id="浮点运算指令集"><a href="#浮点运算指令集" class="headerlink" title="浮点运算指令集"></a>浮点运算指令集</h1><h2 id="控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B"><a href="#控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B" class="headerlink" title="控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)"></a>控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FINIT                 初始化浮点部件              9B DB E3  </span><br><span class="line">FCLEX                 清除异常                   9B DB E2  </span><br><span class="line">FDISI                 浮点检查禁止中断             9B DB E1  </span><br><span class="line">FENI                  浮点检查禁止中断二           9B DB E0  </span><br><span class="line">WAIT                  同步CPU和FPU               9B  </span><br><span class="line">FWAIT                 同步CPU和FPU               D9 D0  </span><br><span class="line">FNOP                  无操作                     DA E9  </span><br><span class="line">FXCH                  交换ST(0)和ST(1)           D9 C9  </span><br><span class="line">FXCH ST(i)            交换ST(0)和ST(i)           D9 C1iii  </span><br><span class="line">FSTSW ax              状态字到ax                 9B DF E0  </span><br><span class="line">FSTSW   word ptr mem  状态字到mem                9B DD mm111mmm  </span><br><span class="line">FLDCW   word ptr mem  mem到状态字                D9 mm101mmm  </span><br><span class="line">FSTCW   word ptr mem  控制字到mem                9B D9 mm111mmm  </span><br><span class="line">  </span><br><span class="line">FLDENV  word ptr mem  mem到全环境                D9 mm100mmm  </span><br><span class="line">FSTENV  word ptr mem  全环境到mem                9B D9 mm110mmm  </span><br><span class="line">FRSTOR  word ptr mem  mem到FPU状态               DD mm100mmm  </span><br><span class="line">FSAVE   word ptr mem  FPU状态到mem               9B DD mm110mmm  </span><br><span class="line">  </span><br><span class="line">FFREE ST(i)           标志ST(i)未使用             DD C0iii  </span><br><span class="line">FDECSTP               减少栈指针1-&gt;0 2-&gt;1         D9 F6  </span><br><span class="line">FINCSTP               增加栈指针0-&gt;1 1-&gt;2         D9 F7  </span><br><span class="line">FSETPM                浮点设置保护                 DB E4</span><br></pre></td></tr></table></figure><h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">FLDZ                  将0.0装入ST(0)                  机器码  D9 EE  </span><br><span class="line">FLD1                  将1.0装入ST(0)                  机器码  D9 E8  </span><br><span class="line">FLDPI                 将π装入ST(0)                    机器码  D9 EB  </span><br><span class="line">FLDL2T                将ln10/ln2装入ST(0)             机器码  D9 E9  </span><br><span class="line">FLDL2E                将1/ln2装入ST(0)                机器码  D9 EA  </span><br><span class="line">FLDLG2                将ln2/ln10装入ST(0)             机器码  D9 EC  </span><br><span class="line">FLDLN2                将ln2装入ST(0)                  机器码  D9 ED  </span><br><span class="line">  </span><br><span class="line">FLD    real4 ptr mem  装入mem的单精度浮点数             机器码  D9 mm000mmm  </span><br><span class="line">FLD    real8 ptr mem  装入mem的双精度浮点数             机器码  DD mm000mmm  </span><br><span class="line">FLD   real10 ptr mem  装入mem的十字节浮点数             机器码  DB mm101mmm  </span><br><span class="line">  </span><br><span class="line">FILD    word ptr mem  装入mem的二字节整数              机器码  DF mm000mmm  </span><br><span class="line">FILD   dword ptr mem  装入mem的四字节整数              机器码  DB mm000mmm  </span><br><span class="line">FILD   qword ptr mem  装入mem的八字节整数              机器码  DF mm101mmm  </span><br><span class="line">  </span><br><span class="line">FBLD   tbyte ptr mem  装入mem的十字节BCD数            机器码  DF mm100mmm  </span><br><span class="line">  </span><br><span class="line">FST    real4 ptr mem  保存单精度浮点数到mem             机器码  D9 mm010mmm  </span><br><span class="line">FST    real8 ptr mem  保存双精度浮点数到mem             机器码  DD mm010mmm  </span><br><span class="line">  </span><br><span class="line">FIST    word ptr mem  保存二字节整数到mem              机器码  DF mm010mmm  </span><br><span class="line">FIST   dword ptr mem  保存四字节整数到mem              机器码  DB mm010mmm  </span><br><span class="line">  </span><br><span class="line">FSTP   real4 ptr mem  保存单精度浮点数到mem并出栈      机器码  D9 mm011mmm  </span><br><span class="line">FSTP   real8 ptr mem  保存双精度浮点数到mem并出栈      机器码  DD mm011mmm  </span><br><span class="line">FSTP  real10 ptr mem  保存十字节浮点数到mem并出栈      机器码  DB mm111mmm  </span><br><span class="line">  </span><br><span class="line">FISTP   word ptr mem  保存二字节整数到mem并出栈           机器码  DF mm011mmm  </span><br><span class="line">FISTP  dword ptr mem  保存四字节整数到mem并出栈           机器码  DB mm011mmm  </span><br><span class="line">FISTP  qword ptr mem  保存八字节整数到mem并出栈           机器码  DF mm111mmm  </span><br><span class="line">  </span><br><span class="line">FBSTP  tbyte ptr mem  保存十字节BCD数到mem并出栈     机器码  DF mm110mmm  </span><br><span class="line">  </span><br><span class="line">FCMOVB                ST(0),ST(i) &lt;时传送              机器码  DA C0iii  </span><br><span class="line">FCMOVBE               ST(0),ST(i) &lt;=时传送             机器码  DA D0iii  </span><br><span class="line">FCMOVE                ST(0),ST(i) =时传送             机器码  DA C1iii  </span><br><span class="line">FCMOVNB               ST(0),ST(i) &gt;=时传送             机器码  DB C0iii  </span><br><span class="line">FCMOVNBE              ST(0),ST(i) &gt;时传送              机器码  DB D0iii  </span><br><span class="line">FCMOVNE               ST(0),ST(i) !=时传送            机器码  DB C1iii  </span><br><span class="line">FCMOVNU               ST(0),ST(i) 有序时传送        机器码  DB D1iii  </span><br><span class="line">FCMOVU                ST(0),ST(i) 无序时传送        机器码  DA D1iii</span><br></pre></td></tr></table></figure><h2 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FCOM                  ST(0)-ST(1)                      机器码  D8 D1  </span><br><span class="line">FCOMI                 ST(0),ST(i)  ST(0)-ST(1)         机器码  DB F0iii  </span><br><span class="line">FCOMIP                ST(0),ST(i)  ST(0)-ST(1)并出栈   机器码  DF F0iii  </span><br><span class="line">FCOM   real4 ptr mem  ST(0)-实数mem                      机器码  D8 mm010mmm  </span><br><span class="line">FCOM   real8 ptr mem  ST(0)-实数mem                      机器码  DC mm010mmm  </span><br><span class="line">  </span><br><span class="line">FICOM   word ptr mem  ST(0)-整数mem                      机器码  DE mm010mmm  </span><br><span class="line">FICOM  dword ptr mem  ST(0)-整数mem                      机器码  DA mm010mmm  </span><br><span class="line">FICOMP  word ptr mem  ST(0)-整数mem并出栈               机器码  DE mm011mmm  </span><br><span class="line">FICOMP dword ptr mem  ST(0)-整数mem并出栈               机器码  DA mm011mmm  </span><br><span class="line">  </span><br><span class="line">FTST                  ST(0)-0                          机器码  D9 E4  </span><br><span class="line">FUCOM  ST(i)          ST(0)-ST(i)                      机器码  DD E0iii  </span><br><span class="line">FUCOMP ST(i)          ST(0)-ST(i)并出栈                   机器码  DD E1iii  </span><br><span class="line">FUCOMPP               ST(0)-ST(1)并二次出栈             机器码  DA E9  </span><br><span class="line">FXAM                  ST(0)规格类型                    机器码  D9 E5</span><br></pre></td></tr></table></figure><h2 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">FADD                  把目的操作数 (直接接在指令后的变量或堆栈缓存器) 与来源操作数 </span><br><span class="line">                      (接在目的操作数后的变量或堆栈缓存器)  相加，并将结果存入目的操作数  </span><br><span class="line">FADDP  ST(i),ST       这个指令是使目的操作数加上 ST  缓存器，并弹出 ST 缓存器，</span><br><span class="line">                      而目的操作数必须是堆栈缓存器的其中之一，最后不管目的操作数为何，</span><br><span class="line">                      经弹出一次后，目的操作数会变成上一个堆栈缓存器了  </span><br><span class="line">FIADD                 FIADD 是把 ST   加上来源操作数，然后再存入 ST 缓存器，</span><br><span class="line">                      来源操作数必须是字组整数或短整数形态的变数  </span><br><span class="line">  </span><br><span class="line">FSUB                  减  </span><br><span class="line">FSUBP  </span><br><span class="line">FSUBR                 减数与被减数互换  </span><br><span class="line">FSUBRP  </span><br><span class="line">FISUB  </span><br><span class="line">FISUBR  </span><br><span class="line">  </span><br><span class="line">FMUL                  乘  </span><br><span class="line">FMULP  </span><br><span class="line">FIMUL  </span><br><span class="line">  </span><br><span class="line">FDIV                  除  </span><br><span class="line">FDIVP  </span><br><span class="line">FDIVR  </span><br><span class="line">FDIVRP  </span><br><span class="line">FIDIV  </span><br><span class="line">FIDIVR  </span><br><span class="line">  </span><br><span class="line">FCHS                  改变 ST 的正负值  </span><br><span class="line">  </span><br><span class="line">FABS                  把 ST  之值取出，取其绝对值后再存回去。  </span><br><span class="line">  </span><br><span class="line">FSQRT                 将 ST  之值取出，开根号后再存回去。  </span><br><span class="line">  </span><br><span class="line">FSCALE                这个指令是计算 ST*2^ST(1)之值，再把结果存入ST里，而 ST(1)之值不变</span><br><span class="line">                      ST(1)必须是在 -32768 到 32768(-215到215)之间的整数，</span><br><span class="line">                      如果超过这个范围计算结果无法确定，如果不是整数ST(1)会先向零舍入成整数</span><br><span class="line">                      再计算。所以为安全起见，最好是由字组整数载入到 ST(1) 里。  </span><br><span class="line">  </span><br><span class="line">FRNDINT               这个指令是把 ST 的数值舍入成整数，FPU提供四种舍入方式，</span><br><span class="line">                      由 FPU 的控制字组(control word)中的RC两个位决定  </span><br><span class="line">                          RC    舍入控制  </span><br><span class="line">                          00    四舍五入  </span><br><span class="line">                          01    向负无限大舍入  </span><br><span class="line">                          10    向正无限大舍入  </span><br><span class="line">                          11    向零舍去</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asm </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService Part.1, 认识Go-Micro</title>
      <link href="/2019/07/11/go-micro-part-1/"/>
      <url>/2019/07/11/go-micro-part-1/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参考地址</span><br><span class="line">https://micro.mu/docs/cn/index.html</span><br></pre></td></tr></table></figure></p><h1 id="Part-1"><a href="#Part-1" class="headerlink" title="Part.1"></a>Part.1</h1><h2 id="micro由以下几个部分组成："><a href="#micro由以下几个部分组成：" class="headerlink" title="micro由以下几个部分组成："></a>micro由以下几个部分组成：</h2><ol><li><p>API网关（API Gateway）： - API Gateway 网关。API网关是请求的入口，把请求动态路由到具体服务。网关允许我们建立可伸缩的后台微服务架构，并且让工作在前端的公共API更健壮。Micro API基于服务发现拥有强大的路由能力，通过我们预置的handlers插件，它可以处理http、gRPC、websocket、消息推送事件等等。</p></li><li><p>命令行接口（Interactive CLI）： 交互式的命令行接口。CLI通过终端可以描述、查询、直接与平台和服务进行交互。CLI提供所有的命令让开发者明白微服务正在处理的事情。CLI也包含了交互模式。</p></li><li><p>服务代理（Service Proxy）： 服务代理，基于Go Micro和MUCP协议构建的透明的代理服务。它将服务发现、负载均衡、消息编码、中间件、传输及代理插件转移到某一（具体服务所在）位置，同api不同，它不暴露任何接口，只工作在内部环境，相当于桥接内部服务。</p></li><li><p>模板生成（Template Generation）： 基于模板快速创建新的服务代码。Micor提供预置的模板，通过模板编写统一风格的代码。</p></li><li><p>SlackOps小机器人（SlackOps Bot）： Slack小机器人插件，当它运行中服务中时，这个插件允许开发者通过Slack消息来操作平台。MicroBot插件提供聊天配置选项，这样就可以让团队通过向小机器人发送聊天消息来做一些我们希望它做的事，这里面当然也包含像动态发现服务一样创建slack命令。</p></li><li><p>管理控制台（Web Dashboard）： 通过Web管理控制台，可以直接在Web页面上查看服务的运行情况，展示端点信息，请求与响应状态，甚至直接向服务进行查询。管理控制台也有CLI交互页面提供给开发者在线上处理，就像直接操作终端一样。</p></li><li><p>Go-micro框架（Go Framework）： Go Micro框架是Micro的底层、核心。GO-Micro把分布式服务抽象，并提供简便的方式让大家构建具有高弹性的微服务。</p></li></ol><h1 id="Part-2"><a href="#Part-2" class="headerlink" title="Part.2"></a>Part.2</h1><h2 id="整体框架组成"><a href="#整体框架组成" class="headerlink" title="整体框架组成"></a>整体框架组成</h2><ul><li><p>micro </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Go Micro可以帮你编写微服务。</span><br><span class="line"></span><br><span class="line">Go Micro抽象出分布式系统</span><br><span class="line">集成服务发布、RPC、分发/订阅机制、消息编码</span><br><span class="line">超时容错、重试机制、负载均衡</span><br><span class="line">功能可扩展</span><br><span class="line">可插拔的后台交换技术</span><br></pre></td></tr></table></figure></li><li><p>config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Go Config可以管理复杂的配置</span><br><span class="line"></span><br><span class="line">动态管理 - 加载配置不需要重启</span><br><span class="line">可插拔 - 可以选择从哪个源加载配置：文件、环境变量、consul。</span><br><span class="line">可合并 - 针对多个配置源可以合并并重写。</span><br><span class="line">回退 - 可以指定当key不存在时设置值。</span><br><span class="line">可观察 - 可以查看配置的变动。</span><br></pre></td></tr></table></figure></li><li><p>plugins</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Go Plugins</span><br><span class="line">go-micro与micro的插件集</span><br><span class="line">包含了绝大多数的后端技术</span><br><span class="line">grpc, kubernetes, etcd, kafka等等</span><br><span class="line">经过生产环境验证</span><br></pre></td></tr></table></figure><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>Go Micro把分布式系统的各种细节抽象出来。下面是它的主要特性。</p><ul><li><p>服务发现（Service Discovery） - 自动服务注册与名称解析。服务发现是微服务开发中的核心。当服务A要与服务B协作时，它得知道B在哪里。默认的服务发现系统是Consul，而multicast DNS (mdns，组播)机制作为本地解决方案，或者零依赖的P2P网络中的SWIM协议（gossip）。 <code>Registry</code></p></li><li><p>负载均衡（Load Balancing） - 在服务发现之上构建了负载均衡机制。当我们得到一个服务的任意多个的实例节点时，我们要一个机制去决定要路由到哪一个节点。我们使用随机处理过的哈希负载均衡机制来保证对服务请求颁发的均匀分布，并且在发生问题时进行重试。 <code>Selector</code></p></li><li><p>消息编码（Message Encoding） - 支持基于内容类型（content-type）动态编码消息。客户端和服务端会一起使用content-type的格式来对Go进行无缝编/解码。各种各样的消息被编码会发送到不同的客户端，客户端服服务端默认会处理这些消息。content-type默认包含proto-rpc和json-rpc。 <code>Codec</code></p></li><li><p>Request/Response - RPC通信基于支持双向流的请求/响应方式，我们提供有抽象的同步通信机制。请求发送到服务时，会自动解析、负载均衡、拨号、转成字节流，默认的传输协议是http/1.1，而tls下使用http2协议。<code>Transport</code></p></li><li><p>异步消息（Async Messaging） - 发布订阅（PubSub）头等功能内置在异步通信与事件驱动架构中。事件通知在微服务开发中处于核心位置。默认的消息传送使用点到点http/1.1，激活tls时则使用http2。 <code>Broker</code></p></li><li><p>可插拔接口（Pluggable Interfaces） - Go Micro为每个分布式系统抽象出接口。因此，Go Micro的接口都是可插拔的，允许其在运行时不可知的情况下仍可支持。所以只要实现接口，可以在内部使用任何的技术。更多插件请参考：github.com/micro/go-plugins。</p></li></ul><h1 id="关于如何了解框架"><a href="#关于如何了解框架" class="headerlink" title="关于如何了解框架"></a>关于如何了解框架</h1><p><a href="https://micro.mu/docs/cn/go-micro.html" target="_blank" rel="noopener">https://micro.mu/docs/cn/go-micro.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://micro.mu/docs/cn/features.html" target="_blank" rel="noopener">https://micro.mu/docs/cn/features.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> go-micro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> go-micro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言汇编解释-1</title>
      <link href="/2019/03/31/clang-cinasm-1/"/>
      <url>/2019/03/31/clang-cinasm-1/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code><br>本文转载自 github<br><a href="https://github.com/frozendeath/cinasm" title="知兵" target="_blank" rel="noopener">冻死胖子-github</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所用示例均为翻新，有 参考《Linux C编程一站式学习》以及冻死胖子的Github，如有版权问题，请联系站长删除</span><br></pre></td></tr></table></figure></p><p>本教程使用的编译器为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ clang -v</span><br><span class="line">Apple LLVM version 10.0.1 (clang-1001.0.46.3)</span><br><span class="line">Target: x86_64-apple-darwin18.5.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</span><br></pre></td></tr></table></figure></p><h1 id="Show-Me-The-Code"><a href="#Show-Me-The-Code" class="headerlink" title="Show Me The Code"></a>Show Me The Code</h1><p>老规矩，万物之本 打印 <code>HelloWorld</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hello, World!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码写好了，如何运行呢， 命令如下，生成.out可执行文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜ CinASM clang Hello.c      </span><br><span class="line">➜ CinASM ls -la                    </span><br><span class="line">total 40</span><br><span class="line">drwxr-xr-x   7 lookwi  staff   238 Mar 31 18:40 .</span><br><span class="line">drwxr-xr-x@ 14 lookwi  staff   476 Mar 31 18:32 ..</span><br><span class="line">drwxr-xr-x   7 lookwi  staff   238 Mar 31 18:39 .idea</span><br><span class="line">-rw-r--r--   1 lookwi  staff   109 Mar 31 18:33 CMakeLists.txt</span><br><span class="line">-rwxr-xr-x   1 lookwi  staff  8432 Mar 31 18:40 a.out</span><br><span class="line">drwxr-xr-x   7 lookwi  staff   238 Mar 31 18:33 cmake-build-debug</span><br><span class="line">-rw-r--r--   1 lookwi  staff    79 Mar 31 18:33 main.c</span><br><span class="line">➜ CinASM ./a.out  </span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure></p><h1 id="说好的ASM"><a href="#说好的ASM" class="headerlink" title="说好的ASM"></a>说好的ASM</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">➜  CinASM clang -S main.c</span><br><span class="line">➜  CinASM cat main.s     </span><br><span class="line">        .section        __TEXT,__text,regular,pure_instructions</span><br><span class="line">        .build_version macos, 10, 14    sdk_version 10, 14</span><br><span class="line">        .globl  _main                   ## -- Begin function main</span><br><span class="line">        .p2align        4, 0x90</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">        .cfi_startproc # 指定入口函数</span><br><span class="line">## %bb.0:</span><br><span class="line">        pushq   %rbp </span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset %rbp, -16</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        .cfi_def_cfa_register %rbp</span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        movl    $0, -4(%rbp) </span><br><span class="line">        leaq    L_.str(%rip), %rdi</span><br><span class="line">        movb    $0, %al</span><br><span class="line">        callq   _printf</span><br><span class="line">        xorl    %ecx, %ecx</span><br><span class="line">        movl    %eax, -8(%rbp)          ## 4-byte Spill</span><br><span class="line">        movl    %ecx, %eax</span><br><span class="line">        addq    $16, %rsp</span><br><span class="line">        popq    %rbp</span><br><span class="line">        retq</span><br><span class="line">        .cfi_endproc</span><br><span class="line">                                        ## -- End function</span><br><span class="line">        .section        __TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">        .asciz  &quot;Hello, World!\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.subsections_via_symbols</span><br></pre></td></tr></table></figure><h1 id="解释之前还是说一下汇编基础表"><a href="#解释之前还是说一下汇编基础表" class="headerlink" title="解释之前还是说一下汇编基础表"></a>解释之前还是说一下汇编基础表</h1><h2 id="关于寄存器"><a href="#关于寄存器" class="headerlink" title="关于寄存器"></a>关于寄存器</h2><p>CS（Code Segment）：代码段寄存器<br>DS（Data Segment）：数据段寄存器<br>SS（Stack Segment）：堆栈段寄存器<br>ES（Extra Segment）：附加段寄存器<br>当一个程序要执行时，就要决定程序代码、数据和堆栈各要用到内存的哪些位置，通过设定段寄存器 CS，DS，SS, ES</p><p>esi，edi，分别是16位寄存器DI和SI的32位扩展。它们是源变址寄存器，和目的变址寄存器，用于串操作指令中。同时，它们也可以作为通用寄存器使用。</p><p>EAX 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。<br>EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址。<br>ECX 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。<br>EDX 则总是被用来放整数除法产生的余数。</p><ol><li>常用寄存器有16个，分为x86通用寄存器以及r8-r15寄存器。</li><li>通用寄存器中，函数执行前后必须保持原始的寄存器有3个：是rbx、rbp、rsp。rx寄存器中，最后4个必须保持原值：r12、r13、r14、r15。<br>保持原值的意义是为了让当前函数有可信任的寄存器，减小在函数调用过程中的保存&amp;恢复操作。除了rbp、rsp用于特定用途外，其余5个寄存器可随意使用。</li><li>通用寄存器中，不必假设保存值可随意使用的寄存器有5个：是rax、rcx、rdx、rdi、rsi。其中rax用于第一个返回寄存器（当 然也可以用于其它用途），rdx用于第二个返回寄存器（在调用函数时也用于第三个参数寄存器）。rcx用于第四个参数。rdi用于第一个参数。rsi用于 第二个函数参数。</li><li>r8、r9分配用于第5、第6个参数。</li></ol><p>这里需要说明的是因为实验环境为<code>Darwin</code>内核，因此许多汇编代码是不同的<br>大致可分为两种不同的类型</p><ol><li>DOS/Windows (Intel 风格)</li><li>Unix 和 Linux 系统 ( AT&amp;T 风格)</li></ol><style>table th:nth-of-type(1){width: 20%;}table th:nth-of-type(2){width: 20%;}table th:nth-of-type(3){width: 20%;}table th:nth-of-type(4){width: 40%;}</style><table><thead><tr><th style="text-align:left">AT&amp;T 格式</th><th style="text-align:right">Intel 格式</th><th style="text-align:center">解释</th><th>区别</th></tr></thead><tbody><tr><td style="text-align:left">pushl %eax</td><td style="text-align:right">push eax</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，寄存器名要加上 ‘%’  作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀</td></tr><tr><td style="text-align:left">pushl $1</td><td style="text-align:right">push 1</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，用 ‘$’ 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。</td></tr><tr><td style="text-align:left">addl $1, %eax</td><td style="text-align:right">add eax, 1</td><td style="text-align:center"></td><td>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边</td></tr><tr><td style="text-align:left">movb val, %al</td><td style="text-align:right">mov al, byte ptr val</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀’b’、’w’、’l’分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 “byte ptr” 和 “word ptr” 等前缀来表示的</td></tr><tr><td style="text-align:left">ljump $section, $offset</td><td style="text-align:right">jmp far section:offset</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要</td></tr><tr><td style="text-align:left">lcall $section, $offset</td><td style="text-align:right">call far section:offset</td><td style="text-align:center"></td><td>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 “ljump” 和 “lcall”，而在 Intel 汇编格式中则为 “jmp far” 和 “call far”</td></tr><tr><td style="text-align:left">lret $stack_adjust</td><td style="text-align:right">ret far stack_adjust</td><td style="text-align:center"></td><td>与（jump/call）相应的远程返回指令</td></tr></tbody></table><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">➜  CinASM clang -S main.c</span><br><span class="line">➜  CinASM cat main.s     </span><br><span class="line">        .section        __TEXT,__text,regular,pure_instructions </span><br><span class="line">        ## 编译器指令 告知编译器相关的信息或者进行特定操作</span><br><span class="line">        ## __TEXT,__text用来存放代码指令, 代码一般都放在这一节</span><br><span class="line">        ## regular：regular类型的节区可以包含任意代码或数据，并且链接器不会对它们进行任何特殊处理。</span><br><span class="line">        .build_version macos, 10, 14    sdk_version 10, 14 </span><br><span class="line">        ## 编译信息</span><br><span class="line">        .globl  _main                   ## -- Begin function main </span><br><span class="line">        ## .global关键字用来让一个符号对链接器可见，可以供其他链接对象模块使用。 </span><br><span class="line">        ## .global _main 让 _main 符号成为可见的标示符，这样链接器就知道跳转到程序中的什么地方并开始执行。</span><br><span class="line">        .p2align        4, 0x90</span><br><span class="line">        ## 将位置计数器（在当前子部分中）填充到特定存储边界</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">        .cfi_startproc </span><br><span class="line">        # Main 函数开始</span><br><span class="line">        # 用在每个函数的开始，用于初始化一些内部数据结构</span><br><span class="line">## %bb.0:</span><br><span class="line">        pushq   %rbp </span><br><span class="line">        # 保存旧的帧指针，相当于创建新的栈帧</span><br><span class="line"></span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset %rbp, -16</span><br><span class="line">        ## CFI 指令</span><br><span class="line"></span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        ## 指令则将rsp寄存器的值赋值给rbp寄存器．这样一来，属于main函数的栈区域便构建好了．</span><br><span class="line">        </span><br><span class="line">        .cfi_def_cfa_register %rbp</span><br><span class="line">        # CFI 指令 修改计算CFA的规则。从现在开始，将使用寄存器而不是旧寄存器。 偏移量保持不变</span><br><span class="line"></span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        # 也就是rsp = rsp - 16 将栈地址减去16, 用于存放局部变量</span><br><span class="line">        movl    $0, -4(%rbp) </span><br><span class="line">        # 将0存放于rbp - 4的值作为指针指向的内存地址, 也就是栈顶下方4 byte位置, </span><br><span class="line">        从后面的代码中推测出这里存放的是main方法的默认返回值0</span><br><span class="line">        leaq    L_.str(%rip), %rdi</span><br><span class="line">        # 指令引用了L_.str这个标签, 在经过汇编器汇编后会将标汇编为字符串所存放的地址, 让程序可以定位到字符串.</span><br><span class="line">        首先lea指令是mov指令的变种，据说，lea指令是x86体系结构中，是一条最古老但是从某个方面来讲又是最神奇的指令。</span><br><span class="line">        表面上看，它做的事情非常简单，根据括号里的源操作数来计算地址，然后把地址加载到目标寄存器中。</span><br><span class="line">        上面的操作就是 先计算地址 L_.str(%rip) 然后把最终地址载到寄存器 rdi 中</span><br><span class="line">        movb    $0, %al</span><br><span class="line">        # 把 0 值传送给32为的EAX寄存器值</span><br><span class="line"></span><br><span class="line">        callq   _printf</span><br><span class="line">        # 调用 printf 函数</span><br><span class="line">        将下一条指令的地址入栈，然后跳转到目标地址处执行</span><br><span class="line">        指令callq_printf将%rdi作为第一个参数(里面存放的是&quot;hello, world\n&quot;字符串的地址)调用_printf方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ### 方法尾(epilogue), 用于取出方法头中栈帧信息及方法的返回地址, 并将栈恢复到方法调用前的位置</span><br><span class="line">        xorl    %ecx, %ecx</span><br><span class="line">        # 将ecx 计数器 置零咯</span><br><span class="line">        movl    %eax, -8(%rbp)          ## 4-byte Spill</span><br><span class="line">        # movl是以寄存器运算结果为游标，访问内存获得该地址的值，然后给目标寄存器赋值</span><br><span class="line">        movl    %ecx, %eax</span><br><span class="line">    </span><br><span class="line">        addq    $16, %rsp</span><br><span class="line"></span><br><span class="line">        popq    %rbp </span><br><span class="line">        # 从 RBP 寄存器栈中取出数据</span><br><span class="line">        retq </span><br><span class="line">        ### 方法尾(epilogue), 用于取出方法头中栈帧信息及方法的返回地址, 并将栈恢复到方法调用前的位置</span><br><span class="line">        .cfi_endproc </span><br><span class="line">        # Main 函数结束</span><br><span class="line">        #.cfi_startproc 和 .cfi_endproc 分别是 dwarf2 CFI 的初始过程和结束过程指</span><br><span class="line">                                        ## -- End function</span><br><span class="line">        .section        __TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">        .asciz  &quot;Hello, World!\n&quot;</span><br><span class="line">        # 分配一段字符串内存单元，并用expr初始化字符串内存单元</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.subsections_via_symbols</span><br></pre></td></tr></table></figure><p>解释完了，有什么不对的地方，欢迎留言给我，请多多指教</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> Mac </tag>
            
            <tag> clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Part.1 包管理器</title>
      <link href="/2018/02/13/golang-golang-1/"/>
      <url>/2018/02/13/golang-golang-1/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="Part-1-Golang-Modules"><a href="#Part-1-Golang-Modules" class="headerlink" title="Part.1, Golang Modules"></a>Part.1, Golang Modules</h1><h2 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h2><p>go building package manager.</p><p>go mod是go语言内置的包管理工具，集成在go tool中，安装好go就可以使用。</p><p>要求: go version &gt;= 1.11</p><p>官方文档： <a href="https://tip.golang.org/cmd/go/#hdr-Download_modules_to_local_cache" target="_blank" rel="noopener">https://tip.golang.org/cmd/go…</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 通过环境变量GOPROXY设置代理</span><br><span class="line">export GOPROXY=https://goproxy.io</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">proxychains4 go get github.com/shirou/gopsutil/disk</span><br><span class="line"></span><br><span class="line"># go mod功能开关，默认是auto，在gopath中不启用</span><br><span class="line"># 可设置为on强制启用</span><br><span class="line">export GO111MODULE=on</span><br></pre></td></tr></table></figure><h3 id="初始化-go-mod-init"><a href="#初始化-go-mod-init" class="headerlink" title="初始化 go mod init"></a>初始化 go mod init</h3><p>init报错outside gopath no import comments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 方法一 手动创建go.mod文件， 写入module xxx</span><br><span class="line">echo &apos;module xxx&apos; &gt; go.mod</span><br><span class="line"></span><br><span class="line"># 方法二 main包加入import声明</span><br><span class="line">package main // import &quot;xxx&quot;</span><br></pre></td></tr></table></figure><h3 id="go-mod-download"><a href="#go-mod-download" class="headerlink" title="go mod download"></a>go mod download</h3><p>下载依赖</p><h3 id="go-mod-tidy"><a href="#go-mod-tidy" class="headerlink" title="go mod tidy"></a>go mod tidy</h3><p>同步依赖包，添加需要的，移除多余的</p><h3 id="go-mod-vendor"><a href="#go-mod-vendor" class="headerlink" title="go mod vendor"></a>go mod vendor</h3><p>将依赖包放入vendor</p><h3 id="go-get-下载-升级依赖"><a href="#go-get-下载-升级依赖" class="headerlink" title="go get 下载/升级依赖"></a>go get 下载/升级依赖</h3><p>go mod不再下载源码进$GOPATH/src</p><p>go mod的下载目录在$GOPATH/pkg/mod，并且是文件权限是只读的<br><code>-r--r--r--</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tag必须以v开头 v1.2.3格式</span><br><span class="line">go get -u xxx.com/pkg@2.1.0</span><br></pre></td></tr></table></figure><h3 id="vendor-模式"><a href="#vendor-模式" class="headerlink" title="vendor 模式"></a>vendor 模式</h3><p>go mod是不推荐使用vendor目录的，而是直接使用source或cache中的包。</p><p>在根目录有vendor文件夹时默认使用vendor模式。此模式下依赖只从vendor中找。</p><p><a href="https://github.com/golang/go/wiki/Modules#how-do-i-use-vendoring-with-modules-is-vendoring-going-away" target="_blank" rel="noopener">https://github.com/golang/go/…</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vendor模式下get报错：go get: disabled by -mod=vendor</span><br><span class="line"></span><br><span class="line"># mod有三个取值</span><br><span class="line"># mod can be &apos;&apos;, &apos;readonly&apos;, or &apos;vendor&apos;</span><br><span class="line"># 两种赋值方式都可以</span><br><span class="line">-mod=&apos;&apos;</span><br><span class="line">-mod &apos;&apos;</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>让原本依赖的 github.com/repo/pkg 包，实际使用 github.com/your-fork/pkg@version。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod edit -replace github.com/repo/pkg=github.com/your-fork/pkg@version</span><br></pre></td></tr></table></figure><h3 id="清缓存"><a href="#清缓存" class="headerlink" title="清缓存"></a>清缓存</h3><p>go clean -modcache</p><h3 id="go-mod-amp-go-sum"><a href="#go-mod-amp-go-sum" class="headerlink" title="go.mod &amp; go.sum"></a>go.mod &amp; go.sum</h3><p>go.mod：依赖列表和版本约束。</p><p>go.sum：记录module文件hash值，用于安全校验。</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>go mod不推荐使用vendor，不要将vendor提交到版本控制。</p><p>提交go.mod，可以忽略go.sum，因为会根据校验sum跨平台可能报错。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 反射，IO, net/http</title>
      <link href="/2018/02/13/golang-golang-10/"/>
      <url>/2018/02/13/golang-golang-10/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener">反射介绍</a>) 如果你对反射不了解，请看维基百科解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;reflect&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type User struct &#123;</span><br><span class="line">ID       uint64</span><br><span class="line">Username string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var str = &quot;我是一个字符串&quot;</span><br><span class="line">fmt.Println(&quot;反射出来的类型为: &quot;, reflect.TypeOf(str))</span><br><span class="line">//反射出来的类型为:  string</span><br><span class="line">var i32 int32 = 32</span><br><span class="line">fmt.Println(&quot;反射出来的类型为: &quot;, reflect.TypeOf(i32))</span><br><span class="line">//反射出来的类型为:  int32</span><br><span class="line">var slice = make([]string, 0)</span><br><span class="line">fmt.Println(&quot;反射出来的类型为: &quot;, reflect.TypeOf(slice))</span><br><span class="line">//反射出来的类型为:  int32</span><br><span class="line"></span><br><span class="line">var user User</span><br><span class="line">user.ID = 1</span><br><span class="line">user.Username = &quot;admin&quot;</span><br><span class="line">tp := reflect.TypeOf(user)</span><br><span class="line">fmt.Println(&quot;反射出类型： &quot;, tp)</span><br><span class="line">fmt.Println(&quot;反射struct 的 名称： &quot;, tp.Name())</span><br><span class="line">fmt.Println(&quot;反射出值: &quot;, reflect.ValueOf(user))</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;反射出来的Kind: &quot;, tp.Kind())</span><br><span class="line">for i := 0; i &lt; tp.NumField(); i++ &#123;</span><br><span class="line">fmt.Println(&quot;字段 :&quot;, i, tp.Field(i), &quot;字段名称 :&quot;, tp.Field(i).Name, &quot;字段类型 :&quot;, tp.Field(i).Type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 读取文件</span><br><span class="line">data, err := ioutil.ReadFile(&quot;./test.txt&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;无法读取文件,&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;文件内容：&quot;, string(data))</span><br><span class="line"></span><br><span class="line">// 创建文件</span><br><span class="line">f, err := os.Create(&quot;./test1.txt&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">l, err := f.WriteString(&quot;俺也一样&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">err := f.Close()</span><br><span class="line">fmt.Println(err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(l, &quot;写入完成&quot;)</span><br><span class="line">err = f.Close()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 追加文件</span><br><span class="line"></span><br><span class="line">file, err := os.OpenFile(&quot;./test1.txt&quot;, os.O_APPEND|os.O_WRONLY, 0644)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">newLine := &quot;俺也一样 +1&quot;</span><br><span class="line">_, err = fmt.Fprintln(file, newLine)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">err := file.Close()</span><br><span class="line">fmt.Println(err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">err = file.Close()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;文件追加完成&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="net-http"><a href="#net-http" class="headerlink" title="net/http"></a>net/http</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 客户端 获取内容</span><br><span class="line">resp, err := http.Get(&quot;https://www.fei.dev&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">// handle error</span><br><span class="line">fmt.Println(err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">//程序在使用完回复后必须关闭回复的主体。</span><br><span class="line">defer resp.Body.Close()</span><br><span class="line"></span><br><span class="line">body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">fmt.Println(string(body))</span><br><span class="line"></span><br><span class="line">// 服务端</span><br><span class="line"></span><br><span class="line">http.HandleFunc(&quot;/&quot;, func(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">writer.Write([]byte(&quot;你好朋友.&quot;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">err = http.ListenAndServe(&quot;:8088&quot;, nil)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 安装和配置</title>
      <link href="/2018/02/13/golang-golang-2/"/>
      <url>/2018/02/13/golang-golang-2/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>Mac 安装<br>brew install go</p></blockquote><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Volumes/Data/gopath</span><br><span class="line">export GOROOT=/usr/local/opt/go/libexec</span><br><span class="line"># 开启go mod 模式 下一章节会说到</span><br><span class="line">export GO111MODULE=on</span><br><span class="line">export PATH=&quot;$PATH:$GOPATH/bin:$GOROOT/bin&quot;</span><br><span class="line">#此处为go get 代理，但是并没有什么卵用</span><br><span class="line">#export GOPROXY=https://goproxy.io</span><br><span class="line">export GOPROXY=</span><br></pre></td></tr></table></figure><h1 id="代理问题"><a href="#代理问题" class="headerlink" title="代理问题"></a>代理问题</h1><p>上面说到<code>GOPROXY</code>没有什么卵用，还是经常网络掉包什么的<br>这里推荐几个方式<br><code>proxifer</code> 强制全局走代理</p><p>or </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 go get -u github.com/swaggo/swag</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xofred.github.io/ss-in-mac-terminal/" target="_blank" rel="noopener">Mac OSX 终端走 shadowsocks 代理</a></p><p><a href="http://blackwolfsec.cc/2016/09/19/Proxifier_Shadowshocks/" target="_blank" rel="noopener">Proxifier+Shadowshocks系统全局代理的正确姿势</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 断言，流程控制，运算</title>
      <link href="/2018/02/13/golang-golang-5/"/>
      <url>/2018/02/13/golang-golang-5/</url>
      
        <content type="html"><![CDATA[<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">//自定义类型</span><br><span class="line">type sw interface &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 给类型赋值</span><br><span class="line">var s sw = 0x0D</span><br><span class="line">// 断言</span><br><span class="line">fmt.Println(s.(int))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var d int64 = 1200</span><br><span class="line">fmt.Println(d)</span><br><span class="line">if d%10 != 1 &#123;</span><br><span class="line">fmt.Println(&quot;a&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;b&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// i32 测试</span><br><span class="line">var i32 int32 = 1200</span><br><span class="line">str, err := test(i32)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">// 空字符串</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">// 无法判断类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//i64 测试</span><br><span class="line"></span><br><span class="line">s, err := test(d)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">// 您传入的是 ： 1200</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">// 不会发生错误</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test(i interface&#123;&#125;) (str string, err error) &#123;</span><br><span class="line">switch i.(type) &#123;</span><br><span class="line">case int64:</span><br><span class="line">sprintf := fmt.Sprintf(&quot;您传入的是 ： %d&quot;, i)</span><br><span class="line">return sprintf, nil</span><br><span class="line">&#125;</span><br><span class="line">return &quot;&quot;, errors.New(&quot;无法判断类型&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 循环一百次</span><br><span class="line">for i:=1; i &lt;=100; i++ &#123; </span><br><span class="line">    // 大于50停止循环 </span><br><span class="line">    if i &gt; 50&#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    // 求于等于0 跳过</span><br><span class="line">    if i %2 == 0&#123;</span><br><span class="line">        continue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 死循环</span><br><span class="line">//for &#123;</span><br><span class="line">//fmt.Println(time.Now().Second())</span><br><span class="line">//time.Sleep(time.Second * 3)</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h1 id="switch-选择"><a href="#switch-选择" class="headerlink" title="switch 选择"></a>switch 选择</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">test := &quot;A&quot;</span><br><span class="line">switch test &#123;</span><br><span class="line">case &quot;A&quot;:</span><br><span class="line">fmt.Println(test)</span><br><span class="line">case &quot;B&quot;:</span><br><span class="line">fmt.Println(&quot;B&quot;)</span><br><span class="line">case &quot;C&quot;:</span><br><span class="line">fmt.Println(&quot;C&quot;)</span><br><span class="line">case &quot;Q&quot;, &quot;P&quot;:</span><br><span class="line">fmt.Println(&quot;Q,P&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch num := 99; &#123;</span><br><span class="line">case num &lt; 50:</span><br><span class="line">fmt.Printf(&quot;%d 小于 %d\n&quot;, num, 50)</span><br><span class="line">//跳转到下一个case</span><br><span class="line">fallthrough</span><br><span class="line">case num &lt; 100:</span><br><span class="line">fmt.Printf(&quot;%d 小于 %d\n&quot;, num, 100)</span><br><span class="line">//跳转到下一个case</span><br><span class="line">fallthrough</span><br><span class="line">case num &lt; 200:</span><br><span class="line">fmt.Printf(&quot;%d 小于 %d&quot;, num, 200)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 变量,类型,常量,函数，包</title>
      <link href="/2018/02/13/golang-golang-4/"/>
      <url>/2018/02/13/golang-golang-4/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TL;DR 如果初学者，请暂时忽略下列注释，避免无法理解</span><br><span class="line">// 构建约束 支持多行的构建约束，多行之间是AND关系</span><br><span class="line">如下所示 编译(linux AND 386) OR (darwin AND (NOT cgo))</span><br><span class="line">编译linux 和 386支持的代码 or 编译 达尔文内核 不进行CGO</span><br><span class="line">// +build linux,386 darwin,!cgo </span><br><span class="line">构建linux 或者 达尔文 and 386</span><br><span class="line">// +build linux darwin</span><br><span class="line">// +build 386</span><br><span class="line">忽略编译，如果想在同一个package下多个main包，使用该方式，编译时指定</span><br><span class="line">// +build ignore</span><br><span class="line">单元测试 集成测试</span><br><span class="line">// +build integration</span><br><span class="line">// 运行测试方式 go test -tags=integration $(go list ./tests/... | grep -v /vendor/) -v</span><br><span class="line"></span><br><span class="line">/// main包</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">// 导入 fmt包</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// 主函数</span><br><span class="line">func main() &#123;</span><br><span class="line">// int变量声明 默认值0填充</span><br><span class="line">var money int</span><br><span class="line">// 用fmt包进行输出</span><br><span class="line">fmt.Println(&quot;how much money you have left : &quot;, money)</span><br><span class="line">// 输出 how much money you have left : 0</span><br><span class="line"></span><br><span class="line">// int变量声明 并赋值</span><br><span class="line">var money2 int = 1000</span><br><span class="line">// 用fmt包进行输出</span><br><span class="line">fmt.Println(&quot;how much money you have left : &quot;, money2)</span><br><span class="line">// 输出 how much money you have left : 1000</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *自动推断值类型</span><br><span class="line"> */</span><br><span class="line">var money3 = 9999</span><br><span class="line">// 简短自动推断类型 此用法最多</span><br><span class="line">money4 := 8888</span><br><span class="line">fmt.Println(&quot;money 3 is :&quot;, money3, &quot;money4 is :&quot;, money4)</span><br><span class="line">// 批量声明推断变量</span><br><span class="line">var a1, a2, a3, a4 = 100, &quot;0xFFFF&quot;, false, 0xFFFFFFF</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;a1 is &quot;, a1, &quot;; a2 is&quot;, a2, &quot;; a3 is&quot;, a3, &quot;; a4 is&quot;, a4)</span><br><span class="line">//a1 数值int, a2 字符串, a3 bool , a4 16进制</span><br><span class="line">//a1 is  100 ; a2 is 0xFFFF ; a3 is false ; a4 is 268435455</span><br><span class="line"></span><br><span class="line">// 使用16进制时需注意 溢出问题 0xFFFFFFFF 连续32个1的内存</span><br><span class="line">// var a = 0xFFFFFFFF</span><br><span class="line">// fmt.Println(a)</span><br><span class="line">// 上面的实例将输出 constant 4294967295 overflows int</span><br><span class="line"></span><br><span class="line">//批量声明固定类型的变量</span><br><span class="line">var k1, k2 = 100, 88</span><br><span class="line">fmt.Println(&quot;k1 is &quot;, k1, &quot;; k2 is&quot;, k2)</span><br><span class="line"></span><br><span class="line">// 涵盖声明</span><br><span class="line">var (</span><br><span class="line">version = &quot;1.1.1&quot;</span><br><span class="line">port    = 9501</span><br><span class="line">name    = &quot;user-srv&quot;</span><br><span class="line">)</span><br><span class="line">fmt.Printf(&quot;%v Server is starting in port %v. version : %v . &quot;, name, port, version)</span><br><span class="line">// user-srv Server is starting in port 9501. version : 1.1.1 . </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><ul><li>bool</li><li>数字类型</li><li>int8, int16, int32, int64, int</li><li>uint8, uint16, uint32, uint64, uint</li><li>float32, float64</li><li>complex64, complex128</li><li>byte</li><li>rune</li><li>string</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;unicode/utf8&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 布尔类型</span><br><span class="line">boolT := true</span><br><span class="line">boolT = false</span><br><span class="line">fmt.Println(&quot;布尔类型的输出: &quot;, boolT)</span><br><span class="line">//布尔类型的输出:  false</span><br><span class="line"></span><br><span class="line">// 关于数值类型的说明</span><br><span class="line">// 凡是带 u + 类型的均为 无符号类型 例如 uint8 是无符号的8位正整数 0-255</span><br><span class="line"></span><br><span class="line">// int8类型 -128-127</span><br><span class="line">// uint8类型 0 ~ 255</span><br><span class="line">var int8T int8 = 127</span><br><span class="line">var uint8T uint8 = 255</span><br><span class="line">// 指定的类型不能超出数值范围，否则发生overflow 其他的类型同理</span><br><span class="line">//var int8T int8 = 128</span><br><span class="line">//constant 128 overflows int8v</span><br><span class="line">fmt.Println(&quot;8位数值的类型的输出: &quot;, int8T)</span><br><span class="line">fmt.Println(&quot;无符号8位数值的类型的输出: &quot;, uint8T)</span><br><span class="line">/**</span><br><span class="line">8位数值的类型的输出:  127</span><br><span class="line">无符号8位数值的类型的输出:  255</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//int16 -32768～32767</span><br><span class="line">//uint16 0～65535</span><br><span class="line">var int16T int16 = 127</span><br><span class="line">var uint16T uint16 = 65535</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;int16T 的类型的输出: &quot;, int16T)</span><br><span class="line">fmt.Println(&quot;uint16T 的类型的输出: &quot;, uint16T)</span><br><span class="line">/**</span><br><span class="line">int16T 的类型的输出:  127</span><br><span class="line">uint16T 的类型的输出:  65535</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//int32 ：-2147483648～2147483647</span><br><span class="line">//uint32 :  0～4294967295</span><br><span class="line">var int32T int32 = 2147483647</span><br><span class="line">var uint32T uint32 = 4294967295</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;int32T 的类型的输出: &quot;, int32T)</span><br><span class="line">fmt.Println(&quot;uint32T 的类型的输出: &quot;, uint32T)</span><br><span class="line">/**</span><br><span class="line">int32T 的类型的输出:  2147483647</span><br><span class="line">uint32T 的类型的输出:  4294967295</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//int64 : -9223372036854775808～9223372036854775807</span><br><span class="line">//uint64: 0～18446744073709551615</span><br><span class="line">var int64T int64 = 9223372036854775807</span><br><span class="line">var uint64T uint64 = 18446744073709551615</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;int64T 的类型的输出: &quot;, int64T)</span><br><span class="line">fmt.Println(&quot;uint64T 的类型的输出: &quot;, uint64T)</span><br><span class="line">/**</span><br><span class="line">int64T 的类型的输出:  9223372036854775807</span><br><span class="line">uint64T 的类型的输出:  18446744073709551615</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// int 和 uint 都是根据系统的位数自行调节</span><br><span class="line">// 32 位系统 : -2147483648～2147483647</span><br><span class="line">// 64 位系统 : -9223372036854775808～9223372036854775807</span><br><span class="line">var intT int = 9223372036854775807</span><br><span class="line"></span><br><span class="line">//uint：表示 32 或 64 位无符号整型。(取决于系统的位数)</span><br><span class="line">// 32 位系统 ：  0～4294967295，</span><br><span class="line">// 64 位系统 ： 0～18446744073709551615</span><br><span class="line">var uintT uint = 18446744073709551615</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;intT 的类型的输出: &quot;, intT)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;uintT 的类型的输出: &quot;, uintT)</span><br><span class="line">/**</span><br><span class="line">intT 的类型的输出:  9223372036854775807</span><br><span class="line">uintT 的类型的输出:  18446744073709551615</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">Float 数值类型</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">// float32 3.402823466385288598117041834516925440e +381.401298464324817070923729583289916131280e -45</span><br><span class="line">// float32 大约可提供6位小数 1 左移 24位</span><br><span class="line"></span><br><span class="line">var float32T float32 = 16777216</span><br><span class="line">// IEEE754</span><br><span class="line">// 因float32 累计计算扩散 请尽量使用float64</span><br><span class="line">fmt.Println(&quot;float32T 的类型的输出: &quot;, float32T == float32T+1)</span><br><span class="line"></span><br><span class="line">var float64T float64 = 16777216</span><br><span class="line">fmt.Println(&quot;float64T 的类型的输出: &quot;, float64T == float64T+1)</span><br><span class="line"></span><br><span class="line">const Avogadro = 6.02214129e23 // 阿伏伽德罗常数</span><br><span class="line">const Planck = 6.62606957e-34  // 普朗克常数</span><br><span class="line">fmt.Println(&quot;阿伏伽德罗常数：&quot;, Avogadro, &quot;普朗克常数：&quot;, Planck)</span><br><span class="line"></span><br><span class="line">// 默认情况下 float推断 均为float64</span><br><span class="line">fl64 := 1.11</span><br><span class="line">fmt.Printf(&quot;Float 类型推断： %T \n&quot;, fl64)</span><br><span class="line"></span><br><span class="line">// 复数类型</span><br><span class="line">// 用途 ：  反常积分 ,分析系统稳定性的根轨迹法 ，奈奎斯特图法（Nyquist plot）和尼科尔斯图法（Nichols plot）都是在复平面上进行的</span><br><span class="line"></span><br><span class="line">//complex64：实和虚 都为 float32 类型的的复数。</span><br><span class="line">//complex128：实和虚 都为 float64 类型的的复数。</span><br><span class="line">c1 := complex(1, 2)</span><br><span class="line">c2 := 3 + 4i</span><br><span class="line">cadd := c1 + c2</span><br><span class="line">fmt.Println(&quot;复数和:&quot;, cadd)</span><br><span class="line">cmul := c1 * c2</span><br><span class="line">fmt.Println(&quot;复数:&quot;, cmul)</span><br><span class="line"></span><br><span class="line">// byte 是 uint8 的别名。 utf8编码</span><br><span class="line">// 声明数组</span><br><span class="line">// ASCII 码 49 50 51 52</span><br><span class="line">data := [4]byte&#123;0x31, 0x32, 0x33, 0x34&#125;</span><br><span class="line">str := string(data[:])</span><br><span class="line">fmt.Println(&quot;byte 转 string :&quot;, str)</span><br><span class="line">// 使用rune 和获取 字符串长度</span><br><span class="line">fmt.Println(&quot;rune string 长度 :&quot;, utf8.RuneCountInString(str))</span><br><span class="line"></span><br><span class="line">// rune 是 int32 的别名。</span><br><span class="line">str1 := &quot;我叫MT&quot;</span><br><span class="line">fmt.Println(&quot;rune 结果&quot;, []rune(str1))</span><br><span class="line">fmt.Println(&quot;byte 结果&quot;, []byte(str1))</span><br><span class="line"></span><br><span class="line">//const 关键字常量 初始化赋值</span><br><span class="line">// 常量结果不能通过函数 方法赋值给常量</span><br><span class="line">const constA = 100</span><br><span class="line">fmt.Println(&quot;constA 结果&quot;, constA)</span><br><span class="line"></span><br><span class="line">// IOTA 常量</span><br><span class="line">const (</span><br><span class="line">a = iota //a=0</span><br><span class="line">b = iota //b=1</span><br><span class="line">c        //c=2</span><br><span class="line">_        //3</span><br><span class="line">d        //d=4</span><br><span class="line">)</span><br><span class="line">fmt.Println(</span><br><span class="line">&quot;a is :&quot;, a,</span><br><span class="line">&quot;b is :&quot;, b,</span><br><span class="line">&quot;c is :&quot;, c,</span><br><span class="line">&quot;d is :&quot;, d,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 实战用法</span><br><span class="line">type ByteSize float64</span><br><span class="line">const (</span><br><span class="line">_           = iota             // ignore first value by assigning to blank identifier</span><br><span class="line">KB ByteSize = 1 &lt;&lt; (10 * iota) // 1 &lt;&lt; (10*1)</span><br><span class="line">MB                             // 1 &lt;&lt; (10*2)</span><br><span class="line">GB                             // 1 &lt;&lt; (10*3)</span><br><span class="line">TB                             // 1 &lt;&lt; (10*4)</span><br><span class="line">PB                             // 1 &lt;&lt; (10*5)</span><br><span class="line">EB                             // 1 &lt;&lt; (10*6)</span><br><span class="line">ZB                             // 1 &lt;&lt; (10*7)</span><br><span class="line">YB                             // 1 &lt;&lt; (10*8)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(</span><br><span class="line">&quot;KB is &quot;, KB,</span><br><span class="line">&quot;\n MB is &quot;, MB,</span><br><span class="line">&quot;\n GB is &quot;, GB,</span><br><span class="line">&quot;\n TB is &quot;, TB,</span><br><span class="line">&quot;\n PB is &quot;, PB,</span><br><span class="line">&quot;\n EB is &quot;, EB,</span><br><span class="line">&quot;\n EB is &quot;, EB,</span><br><span class="line">&quot;\n ZB is &quot;, ZB,</span><br><span class="line">&quot;\n YB is &quot;, YB,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">//引入包</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/pkg/errors&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(TestFunc(33))</span><br><span class="line">fmt.Println(TestFunc(10))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestFunc(i int) (err error, d int) &#123;</span><br><span class="line">if d := i % 10; d == 0 &#123;</span><br><span class="line">return nil, d</span><br><span class="line">&#125;</span><br><span class="line">return errors.New(&quot;无法对10取模&quot;), 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 协程，频道，select, WaitGroup &amp;&amp; mutex</title>
      <link href="/2018/02/13/golang-golang-8/"/>
      <url>/2018/02/13/golang-golang-8/</url>
      
        <content type="html"><![CDATA[<h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">什么是协程</span><br><span class="line">OS 并不理解 协程，协程是在 用户层 模拟出来的调度，协程运行在线程之上，所以协程没有上下文切换消耗。</span><br></pre></td></tr></table></figure><h1 id="协程，频道"><a href="#协程，频道" class="headerlink" title="协程，频道"></a>协程，频道</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 感兴趣的朋友可以去了解一下</span><br><span class="line">func main() &#123;</span><br><span class="line">// 协程</span><br><span class="line">go func() &#123;</span><br><span class="line">fmt.Println(&quot;现在时间是:&quot;, time.Now().String())</span><br><span class="line">&#125;()</span><br><span class="line">// 并没有任何输出</span><br><span class="line">// golang 协程已经启动了，发生了什么无法打印现在时间呢</span><br><span class="line"></span><br><span class="line">// 事实上 go主进程 不会等待 go 协程执行完， 主进程调用go 协程后会顺序执行你的下一步代码</span><br><span class="line">// 所以，上述代码 调用协程后，主进程 执行下一步代码，因为下一步代码 没有之后，主进程生命周期完结退出了</span><br><span class="line"></span><br><span class="line">// 让主进程等待几秒钟 查看go 协程的打印信息</span><br><span class="line">time.Sleep(time.Second * 3)</span><br><span class="line">// 等待后，你会发现协程中的打印可以正常输出了</span><br><span class="line">// 现在时间是: 2020-03-28 17:02:20.059775 +0800 CST m=+0.000452348</span><br><span class="line"></span><br><span class="line">// Channel 双向频道 长度为5或者可缓冲长度</span><br><span class="line">var gochan = make(chan string, 5)</span><br><span class="line">go func() &#123;</span><br><span class="line">// 协程执行，并将消息发送到频道信息中</span><br><span class="line">gochan &lt;- &quot;chan 打印时间&quot; + time.Now().String()</span><br><span class="line">&#125;()</span><br><span class="line">// 如果无人接收该频道值则会发生死锁</span><br><span class="line">fmt.Println(&lt;-gochan)</span><br><span class="line">// 此时通过频道获取数据</span><br><span class="line">// 打印数据为：chan 打印时间2020-03-28 17:15:09.589493 +0800 CST m=+3.000244013</span><br><span class="line"></span><br><span class="line">// 只写频道：chan&lt;- T</span><br><span class="line">// chan 后面 有箭头则是写入方向</span><br><span class="line">var goschan = make(chan&lt;- string, 5)</span><br><span class="line">goschan &lt;- &quot;可以写入&quot;</span><br><span class="line">// 打印chan的地址</span><br><span class="line">fmt.Println(goschan)</span><br><span class="line">// 尝试接收打印时，IDE会报错</span><br><span class="line">//fmt.Println(&lt;-goschan)</span><br><span class="line"></span><br><span class="line">// 那么这个该怎么用呢</span><br><span class="line">// 首先声明一个 双向的chanel</span><br><span class="line">// 这里直接使用上的gochan 双向的 频道</span><br><span class="line">onlySend(gochan)</span><br><span class="line">fmt.Println(&lt;-gochan)</span><br><span class="line">// 你好，现在是北京时间2020-03-28 17:26:23.318116 +0800 CST m=+3.002332002</span><br><span class="line"></span><br><span class="line">// 只读频道：&lt;-chan T</span><br><span class="line">//chan 前面有箭头则是读取方向</span><br><span class="line">/*var gorchan = make(&lt;-chan string, 5)</span><br><span class="line">fmt.Println(&lt;-gorchan)*/</span><br><span class="line">//这样写会提示报错 fatal error: all goroutines are asleep - deadlock!</span><br><span class="line">//因为单向的只读chan 没有数据可读 产生死锁</span><br><span class="line">//那么单向的只读chan该如何使用呢</span><br><span class="line">// 使用双向chan 与只写类似</span><br><span class="line">// 这里直接使用上的gochan 双向的 频道</span><br><span class="line">gochan &lt;- &quot;只读的Chan 读取数据啦&quot;</span><br><span class="line">// 注意此时的gochan不存在数据，一样会造成死锁，所以在此之前，我们发送一个消息到chan中</span><br><span class="line">onlyRead(gochan)</span><br><span class="line">// 此时只读chan 正常运行打印了</span><br><span class="line">// 只读的Chan 读取数据啦</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func onlyRead(read &lt;-chan string) &#123;</span><br><span class="line">fmt.Println(&lt;-read)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 限制只允许发送信息，不允许接收信息</span><br><span class="line">func onlySend(say chan&lt;- string) &#123;</span><br><span class="line">say &lt;- &quot;你好，现在是北京时间&quot; + time.Now().String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func ConsoleInfo(c chan string) &#123;</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line"></span><br><span class="line">c &lt;- &quot;当前打印 : &quot; + strconv.Itoa(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">ch := make(chan string, 10)</span><br><span class="line">go ConsoleInfo(ch)</span><br><span class="line">var count = 0</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case curr := &lt;-ch:</span><br><span class="line">fmt.Println(&quot;接受到的消息： &quot;, curr)</span><br><span class="line">count++</span><br><span class="line">if count &gt;= 10 &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">case &lt;-time.After(time.Second * 1):</span><br><span class="line">fmt.Println(&quot;timeout&quot;)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;没有接收到数据&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WaitGroup-amp-amp-mutex"><a href="#WaitGroup-amp-amp-mutex" class="headerlink" title="WaitGroup &amp;&amp; mutex"></a>WaitGroup &amp;&amp; mutex</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var count = 0</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var w sync.WaitGroup</span><br><span class="line">var m sync.Mutex</span><br><span class="line">for i := 1; i &lt;= 100; i++ &#123;</span><br><span class="line">w.Add(1)</span><br><span class="line">go func() &#123;</span><br><span class="line">// 加锁操作</span><br><span class="line">m.Lock()</span><br><span class="line">count = count + 1</span><br><span class="line">// 操作完成 解锁</span><br><span class="line">m.Unlock()</span><br><span class="line">w.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">w.Wait()</span><br><span class="line">fmt.Println(&quot;最终值为：&quot;, count)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 数组，切片，Map, 字符串</title>
      <link href="/2018/02/13/golang-golang-6/"/>
      <url>/2018/02/13/golang-golang-6/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/pkg/errors&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 初始化数组 默认为0</span><br><span class="line">var arri32 [10]int32</span><br><span class="line">fmt.Println(arri32)</span><br><span class="line">// 输出 [0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">arri32[1] = 10</span><br><span class="line">arri32[9] = 10</span><br><span class="line">fmt.Println(arri32)</span><br><span class="line">// 输出 [0 10 0 0 0 0 0 0 0 10]</span><br><span class="line"></span><br><span class="line">// 直接初始化数组值</span><br><span class="line">var arri = [5]int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">fmt.Println(arri)</span><br><span class="line">//[1 2 3 4 5]</span><br><span class="line"></span><br><span class="line">// 自动计算长度</span><br><span class="line">var arra = [...]int&#123;5, 4, 3, 2, 1&#125;</span><br><span class="line">fmt.Println(arra)</span><br><span class="line">// [5 4 3 2 1]</span><br><span class="line"></span><br><span class="line">//相同长度相同类型的数组可以直接赋值</span><br><span class="line">// 变更arri 1-5 为 5-1</span><br><span class="line">arri = arra</span><br><span class="line">fmt.Println(arri)</span><br><span class="line">//[5 4 3 2 1]</span><br><span class="line"></span><br><span class="line">// 值类型传递</span><br><span class="line">arra[2] = 18</span><br><span class="line">fmt.Println(arra)</span><br><span class="line">fmt.Println(arri)</span><br><span class="line">//[5 4 18 2 1]</span><br><span class="line">//[5 4 3 2 1]</span><br><span class="line">// 上面 arra 赋值给 arri 之后 arra发生变化  arri 还是保持原样</span><br><span class="line">// 赋值复制整个数组，为值传递</span><br><span class="line">// 传递给方法 或者函数时，也是如此</span><br><span class="line"></span><br><span class="line">// 数组长度</span><br><span class="line"></span><br><span class="line">fmt.Println(len(arra))</span><br><span class="line">// 长度为 5</span><br><span class="line"></span><br><span class="line">// 循环数组内容</span><br><span class="line"></span><br><span class="line">for i, i2 := range arra &#123;</span><br><span class="line">fmt.Println(&quot;数组下标: &quot;, i, &quot;数组值: &quot;, i2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; len(arra); i++ &#123;</span><br><span class="line">fmt.Println(&quot;数组下标: &quot;, i, &quot;数组值: &quot;, arra[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多维数组</span><br><span class="line"></span><br><span class="line">arrm := [3][3]string&#123;</span><br><span class="line">&#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;,</span><br><span class="line">&#123;&quot;4&quot;, &quot;5&quot;, &quot;6&quot;&#125;,</span><br><span class="line">&#123;&quot;7&quot;, &quot;8&quot;, &quot;9&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">// 查找出现的位置</span><br><span class="line">r, c, err := search(arrm[:][:], 3, 3, &quot;6&quot;)</span><br><span class="line">fmt.Println(&quot;第&quot;, r, &quot;行 第 c : &quot;, c, &quot;列&quot;, &quot;错误信息：&quot;, err)</span><br><span class="line">//第 2 行 第 c :  3 列 错误信息： &lt;nil&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义查找一个多行多列的数组中的值位置</span><br><span class="line">func search(a [][3]string, row, col int, key string) (r, c int, err error) &#123;</span><br><span class="line">if row &lt; 0 || col &lt; 0 &#123;</span><br><span class="line">return 0, 0, errors.New(&quot;空的&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 循环递增的行数</span><br><span class="line">rowNum := 0</span><br><span class="line">// 循环递增的列数，由外部传入后 - 1得知</span><br><span class="line">colNum := col - 1</span><br><span class="line">// 当前循环行 小于 grid 行 且 列数不为0</span><br><span class="line">for rowNum &lt; row &amp;&amp; colNum &gt;= 0 &#123;</span><br><span class="line">// 判断等于 key 值</span><br><span class="line">if a[rowNum][colNum] == key &#123;</span><br><span class="line">// 返回下标</span><br><span class="line">return rowNum + 1, colNum + 1, nil</span><br><span class="line">&#125; else &#123;</span><br><span class="line">rowNum++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">arrm := [3][3]string&#123;</span><br><span class="line">&#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;,</span><br><span class="line">&#123;&quot;4&quot;, &quot;5&quot;, &quot;6&quot;&#125;,</span><br><span class="line">&#123;&quot;7&quot;, &quot;8&quot;, &quot;9&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">// 切片初始化</span><br><span class="line">var slia [][3]string = arrm[1:]</span><br><span class="line">fmt.Println(slia)</span><br><span class="line">//[[4 5 6] [7 8 9]]</span><br><span class="line"></span><br><span class="line">var slic = []string&#123;&quot;10&quot;, &quot;11&quot;, &quot;12&quot;&#125;</span><br><span class="line">fmt.Println(slic)</span><br><span class="line">// [10 11 12]</span><br><span class="line"></span><br><span class="line">// make 方式创建切片</span><br><span class="line">slid := make([]int, 10, 10)</span><br><span class="line">fmt.Println(slid)</span><br><span class="line">//[0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">slice := slid[1:6]</span><br><span class="line">// 从1-5 截取</span><br><span class="line">fmt.Printf(&quot;Slice 长度为 %d capacity 为 %d \n&quot;, len(slice), cap(slice))</span><br><span class="line">// slice 从 slid 创建</span><br><span class="line">// 索引从1开始 到 第10位 10 -1 = 9 的capacity</span><br><span class="line">// 同理 slid[2:6] 则为 10 -2 =8 的 capacity</span><br><span class="line"></span><br><span class="line">// 复制切片 释放原切片数组</span><br><span class="line"></span><br><span class="line">en24 := []string&#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;&#125;</span><br><span class="line">countslice := en24[1:3]</span><br><span class="line">copySlice := make([]string, 10)</span><br><span class="line">copy(copySlice, countslice)</span><br><span class="line">// 释放en24</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 创建map</span><br><span class="line">mapT := make(map[string]interface&#123;&#125;, 10)</span><br><span class="line">// Map 添加值</span><br><span class="line">mapT[&quot;key&quot;] = &quot;val&quot;</span><br><span class="line">// 打印map</span><br><span class="line">fmt.Println(mapT)</span><br><span class="line">// 获取指定的map值</span><br><span class="line">fmt.Println(mapT[&quot;key&quot;])</span><br><span class="line">fmt.Println(len(mapT))</span><br><span class="line">//map[key:val]</span><br><span class="line">//val</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">delete(mapT, &quot;key&quot;)</span><br><span class="line">fmt.Println(mapT)</span><br><span class="line">//map[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">str := &quot;String&quot;</span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; len(str); i++ &#123;</span><br><span class="line">// 打印 hex</span><br><span class="line">fmt.Printf(&quot;%x &quot;, str[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">str = &quot;我爱中国&quot;</span><br><span class="line">for i := 0; i &lt; len(str); i++ &#123;</span><br><span class="line">// 打印 char</span><br><span class="line">fmt.Printf(&quot;%c &quot;, str[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">// rune</span><br><span class="line"></span><br><span class="line">runeString := []rune(str)</span><br><span class="line">for i := 0; i &lt; len(runeString); i++ &#123;</span><br><span class="line">// 打印 char</span><br><span class="line">fmt.Printf(&quot;%c &quot;, runeString[i])</span><br><span class="line">&#125;</span><br><span class="line">// or</span><br><span class="line">fmt.Println()</span><br><span class="line">for _, i2 := range runeString &#123;</span><br><span class="line">// 打印 char</span><br><span class="line">fmt.Printf(&quot;%c &quot;, i2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 结构，方法，接口, 指针</title>
      <link href="/2018/02/13/golang-golang-7/"/>
      <url>/2018/02/13/golang-golang-7/</url>
      
        <content type="html"><![CDATA[<h1 id="结构，方法-指针"><a href="#结构，方法-指针" class="headerlink" title="结构，方法, 指针"></a>结构，方法, 指针</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 接口</span><br><span class="line">type SoftDelete interface &#123;</span><br><span class="line">delete(id uint64) (bool, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Base struct &#123;</span><br><span class="line">// 声明ID 类型int64</span><br><span class="line">// ``包裹的是 Tag注释 由 reflection 反射获取</span><br><span class="line">// 序列化时 json 为id, omitempty 可以为空</span><br><span class="line">ID uint64 `json:&quot;id,omitempty&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 声明一个User 结构体</span><br><span class="line">type User struct &#123;</span><br><span class="line">// 结构体嵌套</span><br><span class="line">Base</span><br><span class="line">Username string `json:&quot;username,omitempty&quot;`</span><br><span class="line">// 非导出字段</span><br><span class="line">// 非user包 无法访问该属性</span><br><span class="line">password string `json:&quot;password,omitempty&quot;`</span><br><span class="line"></span><br><span class="line">// 结构体嵌套</span><br><span class="line">UserAddress []UserAddress `json:&quot;address,omitempty&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">type UserAddress struct &#123;</span><br><span class="line">Base</span><br><span class="line">PhoneNumber string  `json:&quot;phone_number,omitempty&quot;`</span><br><span class="line">Address     string  `json:&quot;address,omitempty&quot;`</span><br><span class="line">Lat         float64 `json:&quot;lat,omitempty&quot;`</span><br><span class="line">Lon         float64 `json:&quot;lat,omitempty&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 值方法</span><br><span class="line">func (us User) delete(id uint64) (bool, error) &#123;</span><br><span class="line">if id &gt; 0 &#123;</span><br><span class="line">us.ID = 0</span><br><span class="line">us.Username = &quot;&quot;</span><br><span class="line">fmt.Println(&quot;正确的ID已删除&quot;)</span><br><span class="line">return true, nil</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">return false, errors.New(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指针 方法</span><br><span class="line">func (uad *UserAddress) delete(id uint64) (bool, error) &#123;</span><br><span class="line">if id &gt; 0 &#123;</span><br><span class="line">uad.ID = 0</span><br><span class="line">uad.Address = &quot;&quot;</span><br><span class="line">fmt.Println(&quot;正确的ID已删除&quot;)</span><br><span class="line">return true, nil</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">return false, errors.New(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var user User</span><br><span class="line">user.ID = 1</span><br><span class="line">user.Username = &quot;admin&quot;</span><br><span class="line">// 本包内可以访问数据</span><br><span class="line">user.password = &quot;123123&quot;</span><br><span class="line">var userAddress = make([]UserAddress, 3, 10)</span><br><span class="line"></span><br><span class="line">// var 方式设置结构体</span><br><span class="line">var u UserAddress</span><br><span class="line">u.ID = 1</span><br><span class="line">u.PhoneNumber = &quot;1339222101&quot;</span><br><span class="line">u.Address = &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">u.Lat = 30.6179363100</span><br><span class="line">u.Lon = 114.2626900300</span><br><span class="line"></span><br><span class="line">userAddress = append(userAddress, u)</span><br><span class="line">// 直接初始化结构体</span><br><span class="line">userAddress = append(userAddress, UserAddress&#123;</span><br><span class="line">// 嵌套结构体直接初始化，必须要给定结构体</span><br><span class="line">Base:        Base&#123;ID: 2&#125;,</span><br><span class="line">PhoneNumber: &quot;1339222101&quot;,</span><br><span class="line">Address:     &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;,</span><br><span class="line">Lat:         30.6179363100,</span><br><span class="line">Lon:         114.2626900300,</span><br><span class="line">&#125;)</span><br><span class="line">// new 方式初始化</span><br><span class="line">u2 := new(UserAddress)</span><br><span class="line">u2.ID = 3</span><br><span class="line">u.PhoneNumber = &quot;1339222101&quot;</span><br><span class="line">u.Address = &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">u.Lat = 30.6179363100</span><br><span class="line">u.Lon = 114.2626900300</span><br><span class="line"></span><br><span class="line">user.UserAddress = userAddress</span><br><span class="line">fmt.Println(user)</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println()</span><br><span class="line">marshal, _ := json.Marshal(user)</span><br><span class="line">fmt.Println(string(marshal))</span><br><span class="line">/**</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;address&quot;: [</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: 1,</span><br><span class="line">            &quot;phone_number&quot;: &quot;1339222101&quot;,</span><br><span class="line">            &quot;address&quot;: &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: 2,</span><br><span class="line">            &quot;phone_number&quot;: &quot;1339222101&quot;,</span><br><span class="line">            &quot;address&quot;: &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 输出时无password字段</span><br><span class="line"></span><br><span class="line">b, err := u2.delete(0)</span><br><span class="line">fmt.Println(&quot;u2 删除结果 &quot;, b, &quot;err 信息：&quot;, err)</span><br><span class="line"></span><br><span class="line">fmt.Println(u2.ID)</span><br><span class="line">//错误的ID，无法删除</span><br><span class="line">//u2 删除结果  false err 信息： 错误的ID，无法删除</span><br><span class="line"></span><br><span class="line">b, err = u2.delete(1)</span><br><span class="line">fmt.Println(&quot;u2 删除结果 &quot;, b, &quot;err 信息：&quot;, err)</span><br><span class="line">// 指针接受者则会变更内容</span><br><span class="line">fmt.Println(u2)</span><br><span class="line">//正确的ID已删除</span><br><span class="line">//u2 删除结果  true err 信息： &lt;nil&gt;</span><br><span class="line"></span><br><span class="line">b2, err := user.delete(0)</span><br><span class="line">fmt.Println(&quot;user 删除结果 &quot;, b2, &quot;err 信息：&quot;, err)</span><br><span class="line">bytes, err := json.Marshal(user)</span><br><span class="line">fmt.Println(string(bytes))</span><br><span class="line"></span><br><span class="line">b2, err = user.delete(1)</span><br><span class="line">fmt.Println(&quot;user 删除结果 &quot;, b2, &quot;err 信息：&quot;, err)</span><br><span class="line">bytes, err = json.Marshal(user)</span><br><span class="line">fmt.Println(string(bytes))</span><br><span class="line">// user.ID 并没有被重置</span><br><span class="line"></span><br><span class="line">// 接口调用</span><br><span class="line">var I1 SoftDelete = user</span><br><span class="line">I1.delete(0)</span><br><span class="line">I1.delete(1)</span><br><span class="line"></span><br><span class="line">var I2 SoftDelete = u2</span><br><span class="line">I2.delete(0)</span><br><span class="line">I2.delete(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. defer, errors,panic, recover</title>
      <link href="/2018/02/13/golang-golang-9/"/>
      <url>/2018/02/13/golang-golang-9/</url>
      
        <content type="html"><![CDATA[<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func incA() int &#123;</span><br><span class="line">var A int</span><br><span class="line">defer func() &#123;</span><br><span class="line">A++</span><br><span class="line">&#125;()</span><br><span class="line">return A</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func incB() (B int64) &#123;</span><br><span class="line"></span><br><span class="line">defer func() &#123;</span><br><span class="line">B++</span><br><span class="line">&#125;()</span><br><span class="line">return B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">1.defer是栈调用，后写的先执行</span><br><span class="line">2.defer的函数调用语句会在父函数调用后执行，但是用到的参数会在当时就执行得出</span><br><span class="line">*/</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(incA())</span><br><span class="line">fmt.Println(incB())</span><br><span class="line">fmt.Println(&quot;--------------------&quot;)</span><br><span class="line">defer func() &#123;</span><br><span class="line">fmt.Println(incA())</span><br><span class="line">&#125;()</span><br><span class="line">defer func() &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">fmt.Println(incB())</span><br><span class="line">&#125;()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="errors-panic-recover"><a href="#errors-panic-recover" class="headerlink" title="errors,panic recover"></a>errors,panic recover</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(errors.New(&quot;你得罪了你的女朋友！&quot;))</span><br><span class="line">fmt.Println(errors.New(&quot;你还一直不懂味！！！&quot;))</span><br><span class="line">fmt.Println(errors.New(&quot;还是和往常一样在飞快的处理 err&quot;))</span><br><span class="line">fmt.Println(&quot;你准备打开这本恋爱修炼手册&quot;)</span><br><span class="line">f, err := os.Open(&quot;/恋爱修炼手册.txt&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;其实你并没有这本书&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(f.Name(), &quot;你打开了潘多拉魔盒&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(errors.New(&quot;直到有一天，你的生活发生了改变&quot;))</span><br><span class="line"></span><br><span class="line">fmt.Println(fmt.Errorf(&quot;你的女朋友问你，你是否还爱她. 你给出了答案： %s&quot;, &quot;你爱过大海，我爱过你&quot;))</span><br><span class="line">fmt.Println(&quot;你在说这句话的时候，其实你已经准备好了向她求婚...&quot;)</span><br><span class="line">defer func() &#123;</span><br><span class="line">if r := recover(); r != nil &#123;</span><br><span class="line">fmt.Println(&quot;醒醒吧，你没有女朋友，程序员哪来的女朋友&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&quot;无法继续生活下去了&quot;)</span><br><span class="line">panic(&quot;分手！！！&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构-MHA搭建部署</title>
      <link href="/2018/02/13/mysql-mysql-mha/"/>
      <url>/2018/02/13/mysql-mysql-mha/</url>
      
        <content type="html"><![CDATA[<h1 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h1><ul><li>centos 7.2.1511</li><li>mysql 5.7.24-27</li><li>mha4mysql-manager 0.58</li><li>mha4mysql-node 0.58</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MHA 是较为常用的数据库中的高可用架构，以下部署是基于主从已经部署部署完毕的情况下搭建的。</span><br></pre></td></tr></table></figure><h1 id="部署搭建"><a href="#部署搭建" class="headerlink" title="部署搭建"></a>部署搭建</h1><h2 id="需要注意："><a href="#需要注意：" class="headerlink" title="需要注意："></a>需要注意：</h2><p>mysql服务需要设置： relay_log_purge=0</p><h2 id="所有MySQL数据库节点中添加定时任务："><a href="#所有MySQL数据库节点中添加定时任务：" class="headerlink" title="所有MySQL数据库节点中添加定时任务："></a>所有MySQL数据库节点中添加定时任务：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 04 * * *  /usr/bin/purge_relay_logs --user=ha_monitor --password=123123 --disable_relay_log_purge &amp;&gt;&gt; /var/purge_relay_logs.log</span><br></pre></td></tr></table></figure><h2 id="配置SSH认证"><a href="#配置SSH认证" class="headerlink" title="配置SSH认证"></a>配置SSH认证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">证书生成、公钥分发及依赖安装需要在每个节点上执行</span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h3 id="分发公钥到所有节点"><a href="#分发公钥到所有节点" class="headerlink" title="分发公钥到所有节点"></a>分发公钥到所有节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.17.0.55</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.17.0.56</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.17.0.57</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@172.17.0.58</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install  epel-release  -y</span><br><span class="line">yum install  perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager \</span><br><span class="line">perl-Time-HiRes perl-devel perl-devel perl-CPAN  -y</span><br></pre></td></tr></table></figure><h2 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/masterha/ 目录需要在所有节点创建， /etc/mastermha/仅在ha-monitor节点中创建</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/mastermha/</span><br><span class="line">mkdir -p /home/masterha/</span><br></pre></td></tr></table></figure><h2 id="下载MHA组件"><a href="#下载MHA组件" class="headerlink" title="下载MHA组件"></a>下载MHA组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有节点需要安装mha node 节点，仅manager需要安装在ha-monitor节点上</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget \</span><br><span class="line">https://github.com/yoshinorim/mha4mysql-node/releases/download/v0.58/mha4mysql-node-0.58-0.el7.centos.noarch.rpm</span><br><span class="line">wget \</span><br><span class="line">https://github.com/yoshinorim/mha4mysql-manager/releases/download/v0.58/mha4mysql-manager-0.58-0.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="在所有节点上安装mha-node-组件："><a href="#在所有节点上安装mha-node-组件：" class="headerlink" title="在所有节点上安装mha-node 组件："></a>在所有节点上安装mha-node 组件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mha4mysql-node-0.58-0.el7.centos.noarch.rpm -y</span><br></pre></td></tr></table></figure><h3 id="在ha-monitor节点上安装mha4mysql-manager-组件："><a href="#在ha-monitor节点上安装mha4mysql-manager-组件：" class="headerlink" title="在ha-monitor节点上安装mha4mysql-manager 组件："></a>在ha-monitor节点上安装mha4mysql-manager 组件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mha4mysql-manager-0.58-0.el7.centos.noarch.rpm  -y</span><br></pre></td></tr></table></figure><h3 id="创建监控用户："><a href="#创建监控用户：" class="headerlink" title="创建监控用户："></a>创建监控用户：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;ha_monitor&apos;@&apos;172.17.0.%&apos; IDENTIFIED BY &apos;123123&apos;;</span><br><span class="line">mysql&gt; GRANT ALL ON *.* TO &apos;ha_monitor&apos;@&apos;172.17.0.%&apos; ;</span><br></pre></td></tr></table></figure><h3 id="在ha-monitor节点添加配置文件："><a href="#在ha-monitor节点添加配置文件：" class="headerlink" title="在ha-monitor节点添加配置文件："></a>在ha-monitor节点添加配置文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/mastermha/app1.conf &lt;&lt; EOF</span><br><span class="line">[server default]</span><br><span class="line">#授权的manager监控用号和密码</span><br><span class="line">user=ha_monitor</span><br><span class="line">password=123123</span><br><span class="line"></span><br><span class="line">#MySQL服务复制用户和密码</span><br><span class="line">repl_user=sync</span><br><span class="line">repl_password=123123</span><br><span class="line"></span><br><span class="line"># ssh远程登录用户和端口</span><br><span class="line">ssh_user=root</span><br><span class="line">ssh_port=22</span><br><span class="line"></span><br><span class="line"># 检测主master存活间隔和类型</span><br><span class="line">ping_interval=1</span><br><span class="line">ping_type=SELECT</span><br><span class="line"></span><br><span class="line">#管理端log路径</span><br><span class="line">manager_log=/home/masterha/manager.log</span><br><span class="line">#管理服务端所使用的目录</span><br><span class="line">manager_workdir=/home/masterha/</span><br><span class="line">#远程节点工作目录</span><br><span class="line">remote_workdir=/home/masterha/</span><br><span class="line">#数据库binlog目录</span><br><span class="line">master_binlog_dir=/data/mysql_3306_core/log/binary_log</span><br><span class="line"></span><br><span class="line">#故障failover脚本，需在官网的基础上修改配置</span><br><span class="line">master_ip_failover_script=/usr/local/bin/master_ip_failover</span><br><span class="line">master_ip_online_change_script=/usr/local/bin/master_ip_online_change</span><br><span class="line"></span><br><span class="line">#检测路由主master是否宕机</span><br><span class="line">secondary_check_script=&quot;masterha_secondary_check -s 172.17.0.56 -s 172.17.0.57&quot;</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">hostname=172.17.0.56</span><br><span class="line">port=3306</span><br><span class="line">candidate_master=1</span><br><span class="line"></span><br><span class="line">[server2]</span><br><span class="line">hostname=172.17.0.57</span><br><span class="line">port=3306</span><br><span class="line">#设置可参数选举为MYSQL MASTER</span><br><span class="line">candidate_master=1</span><br><span class="line">#忽略延迟</span><br><span class="line">check_repl_delay=0</span><br><span class="line"></span><br><span class="line">[server3]</span><br><span class="line">hostname=172.17.0.58</span><br><span class="line">port=3306</span><br><span class="line">#不参与选举</span><br><span class="line">no_master=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="在ha-monitor节点下载相关脚本并修改相关信息："><a href="#在ha-monitor节点下载相关脚本并修改相关信息：" class="headerlink" title="在ha-monitor节点下载相关脚本并修改相关信息："></a>在ha-monitor节点下载相关脚本并修改相关信息：</h3><h4 id="下载相关脚本"><a href="#下载相关脚本" class="headerlink" title="下载相关脚本"></a>下载相关脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget  https://down.niknk.com/MYSQL/master_ip_failover</span><br><span class="line">wget  https://down.niknk.com/MYSQL/master_ip_online_change</span><br><span class="line">mv master_ip_* /usr/local/bin/</span><br><span class="line">chmod +x /usr/local/bin/master_ip_*</span><br></pre></td></tr></table></figure><h4 id="修改master-ip-failover、master-ip-online-change中的参数信息"><a href="#修改master-ip-failover、master-ip-online-change中的参数信息" class="headerlink" title="修改master_ip_failover、master_ip_online_change中的参数信息"></a>修改master_ip_failover、master_ip_online_change中的参数信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my $vip = &apos;172.17.0.100&apos;; #配置虚拟IP</span><br><span class="line">my $gateway = &apos;172.17.0.1&apos;; #配置网关</span><br><span class="line">my $interface = &apos;eth0&apos;; #配置网卡名称</span><br></pre></td></tr></table></figure><h3 id="测试SSH及主从复制是否正常："><a href="#测试SSH及主从复制是否正常：" class="headerlink" title="测试SSH及主从复制是否正常："></a>测试SSH及主从复制是否正常：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_ssh  --conf=/etc/mastermha/app1.conf</span><br><span class="line">masterha_check_repl  --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure><h3 id="启动HA监控管理服务器："><a href="#启动HA监控管理服务器：" class="headerlink" title="启动HA监控管理服务器："></a>启动HA监控管理服务器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager  --conf=/etc/mastermha/app1.conf --remove_dead_master_conf \</span><br><span class="line">--ignore_fail_on_start --ignore_last_failover &amp;</span><br></pre></td></tr></table></figure><h4 id="检查是否正常："><a href="#检查是否正常：" class="headerlink" title="检查是否正常："></a>检查是否正常：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_status  --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure><p>输出信息：<code>app1 (pid:11522) is running(0:PING_OK), master:172.17.0.56</code></p><h1 id="后续维护："><a href="#后续维护：" class="headerlink" title="后续维护："></a>后续维护：</h1><h2 id="其它操作："><a href="#其它操作：" class="headerlink" title="其它操作："></a>其它操作：</h2><h3 id="停止HA监控管理服务"><a href="#停止HA监控管理服务" class="headerlink" title="停止HA监控管理服务"></a>停止HA监控管理服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure><h3 id="在线手动切换"><a href="#在线手动切换" class="headerlink" title="在线手动切换"></a>在线手动切换</h3><p><code>手动执行切换需要停止HA监控管理服务</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_master_switch --master_state=alive --new_master_host=172.17.0.56  \</span><br><span class="line">--orig_master_is_new_slave  --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure></p><h3 id="宕机手动切换"><a href="#宕机手动切换" class="headerlink" title="宕机手动切换"></a>宕机手动切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_master_switch --master_state=dead  --new_master_host=172.17.0.57  \</span><br><span class="line">--orig_master_is_new_slave --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure><h2 id="重新加入节点"><a href="#重新加入节点" class="headerlink" title="重新加入节点"></a>重新加入节点</h2><p><code>过滤 CHANGE MASTER 的信息并修改密码，在新添加的MySQL节点服务添加即可</code></p><h3 id="过滤CHANGE-MASTER信息"><a href="#过滤CHANGE-MASTER信息" class="headerlink" title="过滤CHANGE MASTER信息"></a>过滤CHANGE MASTER信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &apos;CHANGE MASTER TO&apos; /home/masterha/manager.log</span><br></pre></td></tr></table></figure><p>过滤出日志修改信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;172.17.0.57&apos;,</span><br><span class="line">MASTER_PORT=3306,</span><br><span class="line">MASTER_AUTO_POSITION=1,</span><br><span class="line">MASTER_USER=&apos;sync&apos;,</span><br><span class="line">MASTER_PASSWORD=&apos;123123&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="在MHA配置文件中添加节点信息"><a href="#在MHA配置文件中添加节点信息" class="headerlink" title="在MHA配置文件中添加节点信息"></a>在MHA配置文件中添加节点信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mastermha/app1.conf</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">candidate_master=1</span><br><span class="line">check_repl_delay=0</span><br><span class="line">hostname=172.17.0.56</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><h3 id="重新测试SSH及主从复制是否正常"><a href="#重新测试SSH及主从复制是否正常" class="headerlink" title="重新测试SSH及主从复制是否正常"></a>重新测试SSH及主从复制是否正常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_ssh  --conf=/etc/mastermha/app1.conf</span><br><span class="line">masterha_check_repl  --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure><h3 id="重新启动HA监控管理服务器"><a href="#重新启动HA监控管理服务器" class="headerlink" title="重新启动HA监控管理服务器"></a>重新启动HA监控管理服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager  --conf=/etc/mastermha/app1.conf --remove_dead_master_conf \</span><br><span class="line">--ignore_fail_on_start --ignore_last_failover &amp;</span><br></pre></td></tr></table></figure><h3 id="重新检查是否正常"><a href="#重新检查是否正常" class="headerlink" title="重新检查是否正常"></a>重新检查是否正常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_status  --conf=/etc/mastermha/app1.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> 高可用方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> more HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-大表优化-数据归档</title>
      <link href="/2018/02/13/mysql-mysql-percona/"/>
      <url>/2018/02/13/mysql-mysql-percona/</url>
      
        <content type="html"><![CDATA[<h1 id="服务环境："><a href="#服务环境：" class="headerlink" title="服务环境："></a>服务环境：</h1><ul><li>Centos7.2.1511</li><li>percona-toolkit-3.0</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">信息        数据库IP地址   库名    表名</span><br><span class="line">主数据库    10.58.107.46   unix   sbtest01 </span><br><span class="line">归档数据库  10.58.107.46   unix   sbtest_archiver</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当一个表超过千万行的时候就会对数据库性能造成影响，但如果仅有INSERT操作和少量的SELECT操作,几乎没有UPDATE和DELETE操作的话，相对来说对数据库的性能影响不算很大。</span><br></pre></td></tr></table></figure><h1 id="安装及使用方法："><a href="#安装及使用方法：" class="headerlink" title="安装及使用方法："></a>安装及使用方法：</h1><h2 id="安装percona-toolkit"><a href="#安装percona-toolkit" class="headerlink" title="安装percona-toolkit"></a>安装percona-toolkit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/percona-toolkit/3.0.11/binary/redhat/7/x86_64/percona-toolkit-3.0.11-1.el7.x86_64.rpm</span><br><span class="line">yum localinstall percona-toolkit-3.0.11-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="创建归档表"><a href="#创建归档表" class="headerlink" title="创建归档表"></a>创建归档表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注：以下是归档示例，数据库是unix，归档的表是sbtest01 ，归档到 sbtest_archiver表中。</span><br><span class="line">use unix;</span><br><span class="line">create table sbtest_archiver like sbtest1 ;</span><br></pre></td></tr></table></figure><h2 id="使用percona做数据库归档"><a href="#使用percona做数据库归档" class="headerlink" title="使用percona做数据库归档"></a>使用percona做数据库归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注：以下归档命令是把数据归档完之后，并删除掉老的数据，如果用于线上执行前请慎重，如果做完归档不想删除掉老的数据可以使用no-delete参数</span><br><span class="line">pt-archiver \</span><br><span class="line">--source h=10.58.107.46,P=3306,u=monitor,p=123123,D=unix,t=sbtest1  \</span><br><span class="line">--dest h=10.58.107.46,P=3306,u=monitor,p=123123,D=unix,t=sbtest_archiver  \</span><br><span class="line">--where  &apos;id &lt;= 10000&apos;  --limit=1000 --txn-size=1000 \</span><br><span class="line">--statistics --charset=utf8</span><br></pre></td></tr></table></figure><h1 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--no-delete     #归档时不删除老数据</span><br><span class="line">--limit         #表示每次事务删除的行数</span><br><span class="line">--txn-size      #每个事务提交的行数（读写）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> 高可用方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> more HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pm2 保活进程工具</title>
      <link href="/2018/02/13/%E4%BF%9D%E6%B4%BB%E6%96%B9%E6%A1%88-p2/"/>
      <url>/2018/02/13/%E4%BF%9D%E6%B4%BB%E6%96%B9%E6%A1%88-p2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用pm2自动化部署node项目"><a href="#使用pm2自动化部署node项目" class="headerlink" title="使用pm2自动化部署node项目"></a>使用pm2自动化部署node项目</h1><h2 id="pm2简介"><a href="#pm2简介" class="headerlink" title="pm2简介"></a>pm2简介</h2><p>pm2（process manager）是一个进程管理工具，维护一个进程列表，可以用它来管理你的node进程，负责所有正在运行的进程，并查看node进程的状态，也支持性能监控，负载均衡等功能。</p><h3 id="使用pm2管理的node程序的好处"><a href="#使用pm2管理的node程序的好处" class="headerlink" title="使用pm2管理的node程序的好处"></a>使用pm2管理的node程序的好处</h3><p>监听文件变化，自动重启程序<br>支持性能监控<br>负载均衡<br>程序崩溃自动重启<br>服务器重新启动时自动重新启动<br>自动化部署项目</p><h2 id="pm2安装与使用"><a href="#pm2安装与使用" class="headerlink" title="pm2安装与使用"></a>pm2安装与使用</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>启动一个node程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start start.js</span><br></pre></td></tr></table></figure><p>启动进程并指定应用的程序名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --name application1</span><br></pre></td></tr></table></figure><p>集群模式启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// -i 表示 number-instances 实例数量</span><br><span class="line">// max 表示 PM2将自动检测可用CPU的数量 可以自己指定数量</span><br><span class="line">pm2 start start.js -i max</span><br></pre></td></tr></table></figure><p>添加进程监视</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在文件改变的时候会重新启动程序</span><br><span class="line">pm2 start app.js --name start --watch</span><br></pre></td></tr></table></figure><p>列出所有进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br><span class="line">pm2 ls // 简写</span><br></pre></td></tr></table></figure><p>从进程列表中删除进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm2 delete [appname] | id</span><br><span class="line">pm2 delete app  // 指定进程名删除</span><br><span class="line">pm2 delete 0    // 指定进程id删除</span><br></pre></td></tr></table></figure><p>删除进程列表中所有进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 delete all</span><br></pre></td></tr></table></figure><p>查看某个进程具体情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 describe app</span><br></pre></td></tr></table></figure><p>查看进程的资源消耗情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><p>重启进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app // 重启指定名称的进程</span><br><span class="line">pm2 restart all // 重启所有进程</span><br></pre></td></tr></table></figure><p>查看进程日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 logs app    // 查看该名称进程的日志</span><br><span class="line">pm2 logs all    // 查看所有进程的日志</span><br></pre></td></tr></table></figure><p>设置pm2开机自启</p><p>开启启动设置，此处是CentOS系统，其他系统替换最后一个选项（可选项：ubuntu, centos, redhat, gentoo, systemd, darwin, amazon）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 startup centos</span><br></pre></td></tr></table></figure><p>然后按照提示需要输入的命令进行输入</p><p>最后保存设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 save</span><br></pre></td></tr></table></figure><h2 id="通过pm2配置文件来自动部署项目"><a href="#通过pm2配置文件来自动部署项目" class="headerlink" title="通过pm2配置文件来自动部署项目"></a>通过pm2配置文件来自动部署项目</h2><p>确保服务器安装了pm2，没有安装的话先安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure></p><h3 id="在项目根目录下新建一个-deploy-yaml-文件"><a href="#在项目根目录下新建一个-deploy-yaml-文件" class="headerlink" title="在项目根目录下新建一个 deploy.yaml 文件"></a>在项目根目录下新建一个 deploy.yaml 文件</h3><h1 id="deploy-yaml"><a href="#deploy-yaml" class="headerlink" title="deploy.yaml"></a>deploy.yaml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apps:</span><br><span class="line">  - script: ./start.js       # 入口文件</span><br><span class="line">    name: &apos;app&apos;              # 程序名称</span><br><span class="line">    env:                     # 环境变量</span><br><span class="line">      COMMON_VARIABLE: true</span><br><span class="line">    env_production:</span><br><span class="line">      NODE_ENV: production</span><br><span class="line"></span><br><span class="line">deploy:                     # 部署脚本</span><br><span class="line">  production:               # 生产环境</span><br><span class="line">    user: lentoo            # 服务器的用户名</span><br><span class="line">    host: 192.168.2.166     # 服务器的ip地址</span><br><span class="line">    port: 22                # ssh端口</span><br><span class="line">    ref: origin/master      # 要拉取的git分支</span><br><span class="line">    ssh_options: StrictHostKeyChecking=no # SSH 公钥检查</span><br><span class="line">    repo: https://github.com/**.git # 远程仓库地址</span><br><span class="line">    path: /home              # 拉取到服务器某个目录下</span><br><span class="line">    pre-deploy: git fetch --all # 部署前执行</span><br><span class="line">    post-deploy: npm install &amp;&amp;  pm2 reload deploy.yaml --env production # 部署后执行</span><br><span class="line">    env:</span><br><span class="line">      NODE_ENV: production</span><br></pre></td></tr></table></figure><h3 id="配置git的ssh免密认证"><a href="#配置git的ssh免密认证" class="headerlink" title="配置git的ssh免密认证"></a>配置git的ssh免密认证</h3><p>在服务器中生成rsa公钥和私钥，当前是 centos7 下进行</p><p>前提服务器要安装git，没有安装的先安装git，已安装的跳过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum –y install git</span><br></pre></td></tr></table></figure><p>生成秘钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>在~/.ssh目录下有 id_rsa和 id_rsa.pub两个文件，其中id_rsa.pub文件里存放的即是公钥key。</p><p>登录到GitHub，点击右上方的头像，选择settings ，点击Add SSH key，把id_rsa.pub的内容复制到里面即可。</p><h3 id="使用pm2部署项目"><a href="#使用pm2部署项目" class="headerlink" title="使用pm2部署项目"></a>使用pm2部署项目</h3><p>每次部署前先将本地的代码提交到远程git仓库</p><p>首次部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy deploy.yaml production setup</span><br></pre></td></tr></table></figure><p>部署完成后，既可登陆服务器查看配置的目录下是否从git上拉取了项目</p><p>再次部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy deploy.yaml production update</span><br></pre></td></tr></table></figure><h3 id="该部署流程同样适用前端项目"><a href="#该部署流程同样适用前端项目" class="headerlink" title="该部署流程同样适用前端项目"></a>该部署流程同样适用前端项目</h3><p>如vue-cli的项目，自动部署到服务器，自动执行npm run build 命令，生成的dist目录，指定到nginx的静态文件目录下。</p><h1 id="可能会遇到的坑"><a href="#可能会遇到的坑" class="headerlink" title="可能会遇到的坑"></a>可能会遇到的坑</h1><p>在window系统下 vscode的命令行程序，以及powershell执行部署的命令时，出现部署失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy deploy.yaml production setup</span><br></pre></td></tr></table></figure><p>解决方案：使用git命令行来执行</p>]]></content>
      
      
      <categories>
          
          <category> 保活工具 </category>
          
          <category> 高可用方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> more HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor 保活进程工具</title>
      <link href="/2018/02/13/%E4%BF%9D%E6%B4%BB%E6%96%B9%E6%A1%88-supervisor/"/>
      <url>/2018/02/13/%E4%BF%9D%E6%B4%BB%E6%96%B9%E6%A1%88-supervisor/</url>
      
        <content type="html"><![CDATA[<p>TL;DR; 就是标题</p><h1 id="什么是supervisor"><a href="#什么是supervisor" class="headerlink" title="什么是supervisor"></a>什么是supervisor</h1><p>superviosr是一个Linux/Unix系统上的进程监控工具，他/她upervisor是一个Python开发的通用的进程管理程序，可以管理和监控Linux上面的进程，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。不过同daemontools一样，它不能监控daemon进程</p><h1 id="为什么用supervisor"><a href="#为什么用supervisor" class="headerlink" title="为什么用supervisor"></a>为什么用supervisor</h1><h2 id="使用简单"><a href="#使用简单" class="headerlink" title="使用简单"></a>使用简单</h2><p>supervisor提供了一种统一的方式来start、stop、monitor你的进程， 进程可以单独控制，也可以成组的控制。你可以在本地或者远程命令行或者web接口来配置Supervisor。<br>在linux下的很多程序通常都是一直运行着的，一般来说都需要自己编写一个能够实现进程start/stop/restart/reload功能的脚本，然后放到/etc/init.d/下面。但这样做也有很多弊端，第一我们要为每个程序编写一个类似脚本，第二，当这个进程挂掉的时候，linux不会自动重启它的，想要自动重启的话，我们还要自己写一个监控重启脚本。<br>而supervisor则可以完美的解决这些问题。supervisor管理进程，就是通过fork/exec的方式把这些被管理的进程，当作supervisor的子进程来启动。这样的话，我们只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去就OK了。第二，被管理进程作为supervisor的子进程，当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，所以当然也就可以对挂掉的子进程进行自动重启，当然重启还是不重启，也要看你的配置文件里面有木有设置autostart=true了。<br>supervisor通过INI格式配置文件进行配置，很容易掌握，它为每个进程提供了很多配置选项，可以使你很容易的重启进程或者自动的轮转日志。</p><h2 id="集中管理"><a href="#集中管理" class="headerlink" title="集中管理"></a>集中管理</h2><p>supervisor管理的进程，进程组信息，全部都写在一个ini格式的文件里就OK了。而且，我们管理supervisor的时候的可以在本地进行管理，也可以远程管理，而且supervisor提供了一个web界面，我们可以在web界面上监控，管理进程。 当然了，本地，远程和web管理的时候，需要调用supervisor的xml_rpc接口，这个也是后话。<br>supervisor可以对进程组统一管理，也就是说咱们可以把需要管理的进程写到一个组里面，然后我们把这个组作为一个对象进行管理，如启动，停止，重启等等操作。而linux系统则是没有这种功能的，我们想要停止一个进程，只能一个一个的去停止，要么就自己写个脚本去批量停止。</p><h1 id="supervisor组成"><a href="#supervisor组成" class="headerlink" title="supervisor组成"></a>supervisor组成</h1><h2 id="supervisord-主进程"><a href="#supervisord-主进程" class="headerlink" title="supervisord 主进程"></a>supervisord 主进程</h2><p>主进程,负责管理进程的server，它会根据配置文件创建指定数量的应用程序的子进程，管理子进程的整个生命周期，对crash的进程重启，对进程变化发送事件通知等。同时内置web server和XML-RPC Interface，轻松实现进程管理。。该服务的配置文件在/etc/supervisor/supervisord.conf。</p><h2 id="supervisorctl-外部控制器"><a href="#supervisorctl-外部控制器" class="headerlink" title="supervisorctl 外部控制器"></a>supervisorctl 外部控制器</h2><p>客户端的命令行工具，提供一个类似shell的操作接口，通过它你可以连接到不同的supervisord进程上来管理它们各自的子程序，命令通过UNIX socket或者TCP来和服务通讯。用户通过命令行发送消息给supervisord，可以查看进程状态，加载配置文件，启停进程，查看进程标准输出和错误输出，远程操作等。服务端也可以要求客户端提供身份验证之后才能进行操作。</p><h2 id="Web-Server-web控制器"><a href="#Web-Server-web控制器" class="headerlink" title="Web Server web控制器"></a>Web Server web控制器</h2><p>superviosr提供了web server功能，可通过web控制进程(需要设置[inethttpserver]配置项)。</p><h2 id="RPC控制器"><a href="#RPC控制器" class="headerlink" title="RPC控制器"></a>RPC控制器</h2><p>XML-RPC接口， 就像HTTP提供WEB UI一样，用来控制supervisor和由它运行的程序。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br><span class="line">// 创建配置文件</span><br><span class="line">mkdir /etc/supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line">// 运行supervisor</span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>supervisord.conf</p><p>去除注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p>比如说之前 mysql MHA方式搭建时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 后台运行HA监控管理服务器</span><br><span class="line">nohup masterha_manager  --conf=/etc/mastermha/app1.conf --remove_dead_master_conf \</span><br><span class="line">--ignore_fail_on_start --ignore_last_failover &amp;</span><br></pre></td></tr></table></figure></p><p>我们可以将其改造到supervisor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[program:test_http]</span><br><span class="line">command=masterha_manager  --conf=/etc/mastermha/app1.conf --remove_dead_master_conf \</span><br><span class="line">--ignore_fail_on_start --ignore_last_failover; 被监控的进程路径</span><br><span class="line">;directory=/root/temp                ; 执行前要不要先cd到目录去，一般不用</span><br><span class="line">priority=1                    ;数字越高，优先级越高</span><br><span class="line">numprocs=1                    ; 启动几个进程</span><br><span class="line">autostart=true                ; 随着supervisord的启动而启动</span><br><span class="line">autorestart=true              ; 自动重启。。当然要选上了</span><br><span class="line">startretries=10               ; 启动失败时的最多重试次数</span><br><span class="line">exitcodes=0                   ; 正常退出代码（是说退出代码是这个时就不再重启了吗？待确定）</span><br><span class="line">stopsignal=KILL               ; 用来杀死进程的信号</span><br><span class="line">stopwaitsecs=10               ; 发送SIGKILL前的等待时间</span><br><span class="line">redirect_stderr=true          ; 重定向stderr到stdout</span><br></pre></td></tr></table></figure><p>or 又或者是其他场景比如<code>laravel</code> 的队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:laravel-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">directory=/data/www/laravel </span><br><span class="line">command=php /artisan queue:work --tries=3</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=vagrant ;运行用户</span><br><span class="line">numprocs=8 ; 启动几个进程</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/var/log/supervisor/laravel-queue.log</span><br></pre></td></tr></table></figure><h1 id="配置清单样例"><a href="#配置清单样例" class="headerlink" title="配置清单样例"></a>配置清单样例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- command：启动程序使用的命令，可以是绝对路径或者相对路径</span><br><span class="line">- process_name：一个python字符串表达式，用来表示supervisor进程启动的这个的名称，默认值是%(program_name)s</span><br><span class="line">- numprocs：Supervisor启动这个程序的多个实例，如果numprocs&gt;1，则process_name的表达式必须包含%(process_num)s，默认是1</span><br><span class="line">- numprocs_start：一个int偏移值，当启动实例的时候用来计算numprocs的值</span><br><span class="line">- priority：权重，可以控制程序启动和关闭时的顺序，权重越低：越早启动，越晚关闭。默认值是999</span><br><span class="line">- autostart：如果设置为true，当supervisord启动的时候，进程会自动重启。</span><br><span class="line">- autorestart：值可以是false、true、unexpected。false：进程不会自动重启，unexpected：当程序退出时的退出码不是exitcodes中定义的时，进程会重启，true：进程会无条件重启当退出的时候。</span><br><span class="line">- startsecs：程序启动后等待多长时间后才认为程序启动成功</span><br><span class="line">- startretries：supervisord尝试启动一个程序时尝试的次数。默认是3</span><br><span class="line">- exitcodes：一个预期的退出返回码，默认是0,2。</span><br><span class="line">- stopsignal：当收到stop请求的时候，发送信号给程序，默认是TERM信号，也可以是 HUP, INT, QUIT, KILL, USR1, or USR2。</span><br><span class="line">- stopwaitsecs：在操作系统给supervisord发送SIGCHILD信号时等待的时间</span><br><span class="line">- stopasgroup：如果设置为true，则会使supervisor发送停止信号到整个进程组</span><br><span class="line">- killasgroup：如果设置为true，则在给程序发送SIGKILL信号的时候，会发送到整个进程组，它的子进程也会受到影响。</span><br><span class="line">- user：如果supervisord以root运行，则会使用这个设置用户启动子程序</span><br><span class="line">- redirect_stderr：如果设置为true，进程则会把标准错误输出到supervisord后台的标准输出文件描述符。</span><br><span class="line">- stdout_logfile：把进程的标准输出写入文件中，如果stdout_logfile没有设置或者设置为AUTO，则supervisor会自动选择一个文件位置。</span><br><span class="line">- stdout_logfile_maxbytes：标准输出log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小</span><br><span class="line">- stdout_logfile_backups：标准输出日志轮转备份的数量，默认是10，如果设置为0，则不备份</span><br><span class="line">- stdout_capture_maxbytes：当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB</span><br><span class="line">- stdout_events_enabled：如果设置为true，当进程在写它的stderr到文件描述符的时候，PROCESS_LOG_STDERR事件会被触发</span><br><span class="line">- stderr_logfile：把进程的错误日志输出一个文件中，除非redirect_stderr参数被设置为true</span><br><span class="line">- stderr_logfile_maxbytes：错误log文件达到多少后自动进行轮转，单位是KB、MB、GB。如果设置为0则表示不限制日志文件大小</span><br><span class="line">- stderr_logfile_backups：错误日志轮转备份的数量，默认是10，如果设置为0，则不备份</span><br><span class="line">- stderr_capture_maxbytes：当进程处于stderr capture mode模式的时候，写入FIFO队列的最大bytes值，单位可以是KB、MB、GB</span><br><span class="line">- stderr_events_enabled：如果设置为true，当进程在写它的stderr到文件描述符的时候，PROCESS_LOG_STDERR事件会被触发</span><br><span class="line">- environment：一个k/v对的list列表</span><br><span class="line">- directory：supervisord在生成子进程的时候会切换到该目录</span><br><span class="line">- umask：设置进程的umask</span><br><span class="line">- serverurl：是否允许子进程和内部的HTTP服务通讯，如果设置为AUTO，supervisor会自动的构造一个url</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 保活工具 </category>
          
          <category> 高可用方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> more HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造高效的工作环境</title>
      <link href="/2016/01/01/PHP-%E7%8E%AF%E5%A2%83/"/>
      <url>/2016/01/01/PHP-%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>用了一段时间的Mac系统， 记录一下使用心得<br>在使用大多数环境时，为了偷懒更加偏向于Homebrew的依赖安装，省去了自己编译的方法，所以<br>在开始的时候呢，首先说一下翻墙环境<br>我使用的是SS + kcptun 的模式，由于大部分操作都是在终端环境，所以这里先来一个Proxy代理的方案</p><h1 id="利器代理篇"><a href="#利器代理篇" class="headerlink" title="利器代理篇"></a>利器代理篇</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 在终端中输入如下命令行</span><br><span class="line">export all_proxy=socks5://127.0.0.1:1080</span><br><span class="line">// 也可以分开TLS 和 HTTP访问</span><br><span class="line">export http_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class="line">export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class="line"></span><br><span class="line">// git 操作 一般情况下访问国外才需要这么做，访问国内时可以切换回来，</span><br><span class="line">// 我也懒得改，反正是kcptun加速，也没有感觉</span><br><span class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line"></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>如果你不想这么麻烦，可以选择 <strong>Proxifier</strong> 全局代理，当然在大多数情况下，有些软件不支持代理的话，可以选择  <strong>Proxifier</strong> 进行强制代理</p><p><a href="https://www.proxifier.com/" title="Proxifier" target="_blank" rel="noopener">Proxifier 下载地址</a></p><p>or</p><p>使用 proxychains4</p><p>当然你还可能会遇到，只支持HTTP代理的，那么可以选择 <strong>privoxy</strong> 将 socks5转换成HTTP 但我个人很少使用这种方式</p><h1 id="利器浏览器篇"><a href="#利器浏览器篇" class="headerlink" title="利器浏览器篇"></a>利器浏览器篇</h1><p>当有了代理之后，SS如果选择全局代理的话感觉也不是很好可以走PAC，但我个人选择<strong>SwitchyOmega</strong><br>这里就不啰嗦了，推荐几个我觉得好用的</p><ol><li>FeHelper 百度开发的Web前端助手</li><li>Adblock Plus 广告屏蔽，虽然没以前好用了，但是也还不错用习惯了</li><li>Octotree Github 浏览目录结构利器</li><li>Sourcegraph 比上面的强大的代码阅读理解工具</li></ol><h1 id="利器安装包篇"><a href="#利器安装包篇" class="headerlink" title="利器安装包篇"></a>利器安装包篇</h1><p>有了代理之后，可以愉快的下载到各种你下载慢的东西了，比如说<strong>composer</strong>, <strong>npm i</strong>, <strong>git</strong>, <strong>docker</strong>等等一系列的 飞机一般的感受<br>那么编译就成为了另一件大事了，NMP的环境编译一套下来整个人都懵了，那些乱七八糟的参数，我只想要一个开发环境，咋就那么难呢？<br>为了偷懒，特地 google 了一下，原来Darwin系统还是有包管理的，类似linux 的yum or apt</p><p><code>题外话，如果你是windows的开发者，那么你有choco</code><br><a href="https://chocolatey.org/" title="Choco" target="_blank" rel="noopener">Windows包管理 下载地址</a><br><code>Win10的话也同样可以使用上面的办法安装一整套环境，或者你也可以使用WSL，毕竟Linux才是王道</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 在开始之前挂上代理</span><br><span class="line">export all_proxy=socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">// 使用Ruby获取Homebrew</span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"></span><br><span class="line">// Homebrew 更新</span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line">// 安装nginx </span><br><span class="line">brew install nginx</span><br><span class="line"></span><br><span class="line">// 安装PHP </span><br><span class="line">brew search php </span><br><span class="line">因为homebrew core 迁移问题 php 5.6 低版本迁移问题，</span><br><span class="line">包括php5.6即将要终止维护的问题，将PHP迁移至其他子项目中所以先搜索一下</span><br><span class="line">或者你强制想要安装某个版本，那怎么办访问</span><br></pre></td></tr></table></figure><p><a href="https://php-osx.liip.ch/" title="Choco" target="_blank" rel="noopener">PHP各个版本安装</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">就可以找到各个版本的安装方式执行一下</span><br><span class="line">// 我这里安装PHP5.6 是因为有老版本项目还得继续维护，非常讨厌5.6了</span><br><span class="line">brew install php@5.6</span><br><span class="line">// 中意的7.2安装</span><br><span class="line">brew install php@7.2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装mysql</span><br><span class="line">brew install mysql</span><br><span class="line">// 安装nodejs</span><br><span class="line">brew install node</span><br><span class="line">// 安装yarn composer 等等，只要你想的到的...</span><br></pre></td></tr></table></figure><h1 id="Golang安装"><a href="#Golang安装" class="headerlink" title="Golang安装"></a>Golang安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install go</span><br></pre></td></tr></table></figure><p>安装其他服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 安装jenkins</span><br><span class="line">brew install jenkins</span><br><span class="line">// 安装etcd</span><br><span class="line">brew install etcd</span><br><span class="line">// 安装consul</span><br><span class="line">brew install consul</span><br></pre></td></tr></table></figure></p><h1 id="利器命令行篇"><a href="#利器命令行篇" class="headerlink" title="利器命令行篇"></a>利器命令行篇</h1><p>在经历过 代理， 安装包 的痛苦之后，那么命令行又称为了懒人无法面对的事情，等等，我上一行命令是什么来着忘记了我好想记得是 git log xxxxx什么来着<br>算了history看看吧，要不就一直up键找，直到找到为止，这样实在是太痛苦了<br>后来又在网上逛了一圈，终于找到一个神器</p><h3 id="ZSH-安装"><a href="#ZSH-安装" class="headerlink" title="ZSH 安装"></a>ZSH 安装</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh" title="命令行利器" target="_blank" rel="noopener">Oh-my-Zsh</a> </p><h4 id="使用CURL方式安装"><a href="#使用CURL方式安装" class="headerlink" title="使用CURL方式安装"></a>使用CURL方式安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><h4 id="使用Wget方式安装"><a href="#使用Wget方式安装" class="headerlink" title="使用Wget方式安装"></a>使用Wget方式安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><p>安装后你会发现就只是变了个箭头而已，但是环境已经切到了ZSH上</p><h3 id="ZSH自动提示插件"><a href="#ZSH自动提示插件" class="headerlink" title="ZSH自动提示插件"></a>ZSH自动提示插件</h3><ol><li><p>克隆仓库到当前用户的 <code>~/.zsh/zsh-autosuggestions</code>.</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>.zshrc</code> 并向其中添加下面这行:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure></li><li><p>打开一个新的终端</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Homebrew </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
