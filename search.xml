<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang part3. 协程，信道，select, mutex</title>
      <link href="/2020/03/28/golang-golang-8/"/>
      <url>/2020/03/28/golang-golang-8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 反射，IO, net/http</title>
      <link href="/2020/03/28/golang-golang-10/"/>
      <url>/2020/03/28/golang-golang-10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 调度器</title>
      <link href="/2020/03/28/golang-golang-11/"/>
      <url>/2020/03/28/golang-golang-11/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 调度器</title>
      <link href="/2020/03/28/golang-golang-12/"/>
      <url>/2020/03/28/golang-golang-12/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 内存分配</title>
      <link href="/2020/03/28/golang-golang-13/"/>
      <url>/2020/03/28/golang-golang-13/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part3. 协程，信道，select, mutex</title>
      <link href="/2020/03/28/golang-golang-9/"/>
      <url>/2020/03/28/golang-golang-9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService Part.1.1, 开启micro之路</title>
      <link href="/2020/03/28/go-micro-part-1-1/"/>
      <url>/2020/03/28/go-micro-part-1-1/</url>
      
        <content type="html"><![CDATA[<h1 id="获取Go-micro"><a href="#获取Go-micro" class="headerlink" title="获取Go micro"></a>获取Go micro</h1><h1 id="安装配置环境"><a href="#安装配置环境" class="headerlink" title="安装配置环境"></a>安装配置环境</h1><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> go-micro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go-micro </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 数组，切片，Map, 字符串</title>
      <link href="/2020/03/18/golang-golang-6/"/>
      <url>/2020/03/18/golang-golang-6/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/pkg/errors&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 初始化数组 默认为0</span><br><span class="line">var arri32 [10]int32</span><br><span class="line">fmt.Println(arri32)</span><br><span class="line">// 输出 [0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">arri32[1] = 10</span><br><span class="line">arri32[9] = 10</span><br><span class="line">fmt.Println(arri32)</span><br><span class="line">// 输出 [0 10 0 0 0 0 0 0 0 10]</span><br><span class="line"></span><br><span class="line">// 直接初始化数组值</span><br><span class="line">var arri = [5]int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">fmt.Println(arri)</span><br><span class="line">//[1 2 3 4 5]</span><br><span class="line"></span><br><span class="line">// 自动计算长度</span><br><span class="line">var arra = [...]int&#123;5, 4, 3, 2, 1&#125;</span><br><span class="line">fmt.Println(arra)</span><br><span class="line">// [5 4 3 2 1]</span><br><span class="line"></span><br><span class="line">//相同长度相同类型的数组可以直接赋值</span><br><span class="line">// 变更arri 1-5 为 5-1</span><br><span class="line">arri = arra</span><br><span class="line">fmt.Println(arri)</span><br><span class="line">//[5 4 3 2 1]</span><br><span class="line"></span><br><span class="line">// 值类型传递</span><br><span class="line">arra[2] = 18</span><br><span class="line">fmt.Println(arra)</span><br><span class="line">fmt.Println(arri)</span><br><span class="line">//[5 4 18 2 1]</span><br><span class="line">//[5 4 3 2 1]</span><br><span class="line">// 上面 arra 赋值给 arri 之后 arra发生变化  arri 还是保持原样</span><br><span class="line">// 赋值复制整个数组，为值传递</span><br><span class="line">// 传递给方法 或者函数时，也是如此</span><br><span class="line"></span><br><span class="line">// 数组长度</span><br><span class="line"></span><br><span class="line">fmt.Println(len(arra))</span><br><span class="line">// 长度为 5</span><br><span class="line"></span><br><span class="line">// 循环数组内容</span><br><span class="line"></span><br><span class="line">for i, i2 := range arra &#123;</span><br><span class="line">fmt.Println(&quot;数组下标: &quot;, i, &quot;数组值: &quot;, i2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; len(arra); i++ &#123;</span><br><span class="line">fmt.Println(&quot;数组下标: &quot;, i, &quot;数组值: &quot;, arra[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多维数组</span><br><span class="line"></span><br><span class="line">arrm := [3][3]string&#123;</span><br><span class="line">&#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;,</span><br><span class="line">&#123;&quot;4&quot;, &quot;5&quot;, &quot;6&quot;&#125;,</span><br><span class="line">&#123;&quot;7&quot;, &quot;8&quot;, &quot;9&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">// 查找出现的位置</span><br><span class="line">r, c, err := search(arrm[:][:], 3, 3, &quot;6&quot;)</span><br><span class="line">fmt.Println(&quot;第&quot;, r, &quot;行 第 c : &quot;, c, &quot;列&quot;, &quot;错误信息：&quot;, err)</span><br><span class="line">//第 2 行 第 c :  3 列 错误信息： &lt;nil&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义查找一个多行多列的数组中的值位置</span><br><span class="line">func search(a [][3]string, row, col int, key string) (r, c int, err error) &#123;</span><br><span class="line">if row &lt; 0 || col &lt; 0 &#123;</span><br><span class="line">return 0, 0, errors.New(&quot;空的&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 循环递增的行数</span><br><span class="line">rowNum := 0</span><br><span class="line">// 循环递增的列数，由外部传入后 - 1得知</span><br><span class="line">colNum := col - 1</span><br><span class="line">// 当前循环行 小于 grid 行 且 列数不为0</span><br><span class="line">for rowNum &lt; row &amp;&amp; colNum &gt;= 0 &#123;</span><br><span class="line">// 判断等于 key 值</span><br><span class="line">if a[rowNum][colNum] == key &#123;</span><br><span class="line">// 返回下标</span><br><span class="line">return rowNum + 1, colNum + 1, nil</span><br><span class="line">&#125; else &#123;</span><br><span class="line">rowNum++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">arrm := [3][3]string&#123;</span><br><span class="line">&#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;,</span><br><span class="line">&#123;&quot;4&quot;, &quot;5&quot;, &quot;6&quot;&#125;,</span><br><span class="line">&#123;&quot;7&quot;, &quot;8&quot;, &quot;9&quot;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">// 切片初始化</span><br><span class="line">var slia [][3]string = arrm[1:]</span><br><span class="line">fmt.Println(slia)</span><br><span class="line">//[[4 5 6] [7 8 9]]</span><br><span class="line"></span><br><span class="line">var slic = []string&#123;&quot;10&quot;, &quot;11&quot;, &quot;12&quot;&#125;</span><br><span class="line">fmt.Println(slic)</span><br><span class="line">// [10 11 12]</span><br><span class="line"></span><br><span class="line">// make 方式创建切片</span><br><span class="line">slid := make([]int, 10, 10)</span><br><span class="line">fmt.Println(slid)</span><br><span class="line">//[0 0 0 0 0 0 0 0 0 0]</span><br><span class="line">slice := slid[1:6]</span><br><span class="line">// 从1-5 截取</span><br><span class="line">fmt.Printf(&quot;Slice 长度为 %d capacity 为 %d \n&quot;, len(slice), cap(slice))</span><br><span class="line">// slice 从 slid 创建</span><br><span class="line">// 索引从1开始 到 第10位 10 -1 = 9 的capacity</span><br><span class="line">// 同理 slid[2:6] 则为 10 -2 =8 的 capacity</span><br><span class="line"></span><br><span class="line">// 复制切片 释放原切片数组</span><br><span class="line"></span><br><span class="line">en24 := []string&#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;&#125;</span><br><span class="line">countslice := en24[1:3]</span><br><span class="line">copySlice := make([]string, 10)</span><br><span class="line">copy(copySlice, countslice)</span><br><span class="line">// 释放en24</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 创建map</span><br><span class="line">mapT := make(map[string]interface&#123;&#125;, 10)</span><br><span class="line">// Map 添加值</span><br><span class="line">mapT[&quot;key&quot;] = &quot;val&quot;</span><br><span class="line">// 打印map</span><br><span class="line">fmt.Println(mapT)</span><br><span class="line">// 获取指定的map值</span><br><span class="line">fmt.Println(mapT[&quot;key&quot;])</span><br><span class="line">fmt.Println(len(mapT))</span><br><span class="line">//map[key:val]</span><br><span class="line">//val</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">delete(mapT, &quot;key&quot;)</span><br><span class="line">fmt.Println(mapT)</span><br><span class="line">//map[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">str := &quot;String&quot;</span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; len(str); i++ &#123;</span><br><span class="line">// 打印 hex</span><br><span class="line">fmt.Printf(&quot;%x &quot;, str[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">str = &quot;我爱中国&quot;</span><br><span class="line">for i := 0; i &lt; len(str); i++ &#123;</span><br><span class="line">// 打印 char</span><br><span class="line">fmt.Printf(&quot;%c &quot;, str[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">// rune</span><br><span class="line"></span><br><span class="line">runeString := []rune(str)</span><br><span class="line">for i := 0; i &lt; len(runeString); i++ &#123;</span><br><span class="line">// 打印 char</span><br><span class="line">fmt.Printf(&quot;%c &quot;, runeString[i])</span><br><span class="line">&#125;</span><br><span class="line">// or</span><br><span class="line">fmt.Println()</span><br><span class="line">for _, i2 := range runeString &#123;</span><br><span class="line">// 打印 char</span><br><span class="line">fmt.Printf(&quot;%c &quot;, i2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 断言，流程控制，运算</title>
      <link href="/2020/03/18/golang-golang-5/"/>
      <url>/2020/03/18/golang-golang-5/</url>
      
        <content type="html"><![CDATA[<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">//自定义类型</span><br><span class="line">type sw interface &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 给类型赋值</span><br><span class="line">var s sw = 0x0D</span><br><span class="line">// 断言</span><br><span class="line">fmt.Println(s.(int))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var d int64 = 1200</span><br><span class="line">fmt.Println(d)</span><br><span class="line">if d%10 != 1 &#123;</span><br><span class="line">fmt.Println(&quot;a&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(&quot;b&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// i32 测试</span><br><span class="line">var i32 int32 = 1200</span><br><span class="line">str, err := test(i32)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">// 空字符串</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">// 无法判断类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//i64 测试</span><br><span class="line"></span><br><span class="line">s, err := test(d)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">// 您传入的是 ： 1200</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">// 不会发生错误</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test(i interface&#123;&#125;) (str string, err error) &#123;</span><br><span class="line">switch i.(type) &#123;</span><br><span class="line">case int64:</span><br><span class="line">sprintf := fmt.Sprintf(&quot;您传入的是 ： %d&quot;, i)</span><br><span class="line">return sprintf, nil</span><br><span class="line">&#125;</span><br><span class="line">return &quot;&quot;, errors.New(&quot;无法判断类型&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 循环一百次</span><br><span class="line">for i:=1; i &lt;=100; i++ &#123; </span><br><span class="line">    // 大于50停止循环 </span><br><span class="line">    if i &gt; 50&#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    // 求于等于0 跳过</span><br><span class="line">    if i %2 == 0&#123;</span><br><span class="line">        continue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 死循环</span><br><span class="line">//for &#123;</span><br><span class="line">//fmt.Println(time.Now().Second())</span><br><span class="line">//time.Sleep(time.Second * 3)</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h1 id="switch-选择"><a href="#switch-选择" class="headerlink" title="switch 选择"></a>switch 选择</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">test := &quot;A&quot;</span><br><span class="line">switch test &#123;</span><br><span class="line">case &quot;A&quot;:</span><br><span class="line">fmt.Println(test)</span><br><span class="line">case &quot;B&quot;:</span><br><span class="line">fmt.Println(&quot;B&quot;)</span><br><span class="line">case &quot;C&quot;:</span><br><span class="line">fmt.Println(&quot;C&quot;)</span><br><span class="line">case &quot;Q&quot;, &quot;P&quot;:</span><br><span class="line">fmt.Println(&quot;Q,P&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch num := 99; &#123;</span><br><span class="line">case num &lt; 50:</span><br><span class="line">fmt.Printf(&quot;%d 小于 %d\n&quot;, num, 50)</span><br><span class="line">//跳转到下一个case</span><br><span class="line">fallthrough</span><br><span class="line">case num &lt; 100:</span><br><span class="line">fmt.Printf(&quot;%d 小于 %d\n&quot;, num, 100)</span><br><span class="line">//跳转到下一个case</span><br><span class="line">fallthrough</span><br><span class="line">case num &lt; 200:</span><br><span class="line">fmt.Printf(&quot;%d 小于 %d&quot;, num, 200)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 结构，方法，接口, 指针</title>
      <link href="/2020/03/18/golang-golang-7/"/>
      <url>/2020/03/18/golang-golang-7/</url>
      
        <content type="html"><![CDATA[<h1 id="结构，方法-指针"><a href="#结构，方法-指针" class="headerlink" title="结构，方法, 指针"></a>结构，方法, 指针</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 接口</span><br><span class="line">type SoftDelete interface &#123;</span><br><span class="line">delete(id uint64) (bool, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Base struct &#123;</span><br><span class="line">// 声明ID 类型int64</span><br><span class="line">// ``包裹的是 Tag注释 由 reflection 反射获取</span><br><span class="line">// 序列化时 json 为id, omitempty 可以为空</span><br><span class="line">ID uint64 `json:&quot;id,omitempty&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 声明一个User 结构体</span><br><span class="line">type User struct &#123;</span><br><span class="line">// 结构体嵌套</span><br><span class="line">Base</span><br><span class="line">Username string `json:&quot;username,omitempty&quot;`</span><br><span class="line">// 非导出字段</span><br><span class="line">// 非user包 无法访问该属性</span><br><span class="line">password string `json:&quot;password,omitempty&quot;`</span><br><span class="line"></span><br><span class="line">// 结构体嵌套</span><br><span class="line">UserAddress []UserAddress `json:&quot;address,omitempty&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">type UserAddress struct &#123;</span><br><span class="line">Base</span><br><span class="line">PhoneNumber string  `json:&quot;phone_number,omitempty&quot;`</span><br><span class="line">Address     string  `json:&quot;address,omitempty&quot;`</span><br><span class="line">Lat         float64 `json:&quot;lat,omitempty&quot;`</span><br><span class="line">Lon         float64 `json:&quot;lat,omitempty&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 值方法</span><br><span class="line">func (us User) delete(id uint64) (bool, error) &#123;</span><br><span class="line">if id &gt; 0 &#123;</span><br><span class="line">us.ID = 0</span><br><span class="line">us.Username = &quot;&quot;</span><br><span class="line">fmt.Println(&quot;正确的ID已删除&quot;)</span><br><span class="line">return true, nil</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">return false, errors.New(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指针 方法</span><br><span class="line">func (uad *UserAddress) delete(id uint64) (bool, error) &#123;</span><br><span class="line">if id &gt; 0 &#123;</span><br><span class="line">uad.ID = 0</span><br><span class="line">uad.Address = &quot;&quot;</span><br><span class="line">fmt.Println(&quot;正确的ID已删除&quot;)</span><br><span class="line">return true, nil</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">return false, errors.New(&quot;错误的ID，无法删除&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var user User</span><br><span class="line">user.ID = 1</span><br><span class="line">user.Username = &quot;admin&quot;</span><br><span class="line">// 本包内可以访问数据</span><br><span class="line">user.password = &quot;123123&quot;</span><br><span class="line">var userAddress = make([]UserAddress, 3, 10)</span><br><span class="line"></span><br><span class="line">// var 方式设置结构体</span><br><span class="line">var u UserAddress</span><br><span class="line">u.ID = 1</span><br><span class="line">u.PhoneNumber = &quot;1339222101&quot;</span><br><span class="line">u.Address = &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">u.Lat = 30.6179363100</span><br><span class="line">u.Lon = 114.2626900300</span><br><span class="line"></span><br><span class="line">userAddress = append(userAddress, u)</span><br><span class="line">// 直接初始化结构体</span><br><span class="line">userAddress = append(userAddress, UserAddress&#123;</span><br><span class="line">// 嵌套结构体直接初始化，必须要给定结构体</span><br><span class="line">Base:        Base&#123;ID: 2&#125;,</span><br><span class="line">PhoneNumber: &quot;1339222101&quot;,</span><br><span class="line">Address:     &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;,</span><br><span class="line">Lat:         30.6179363100,</span><br><span class="line">Lon:         114.2626900300,</span><br><span class="line">&#125;)</span><br><span class="line">// new 方式初始化</span><br><span class="line">u2 := new(UserAddress)</span><br><span class="line">u2.ID = 3</span><br><span class="line">u.PhoneNumber = &quot;1339222101&quot;</span><br><span class="line">u.Address = &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">u.Lat = 30.6179363100</span><br><span class="line">u.Lon = 114.2626900300</span><br><span class="line"></span><br><span class="line">user.UserAddress = userAddress</span><br><span class="line">fmt.Println(user)</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println()</span><br><span class="line">marshal, _ := json.Marshal(user)</span><br><span class="line">fmt.Println(string(marshal))</span><br><span class="line">/**</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;address&quot;: [</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: 1,</span><br><span class="line">            &quot;phone_number&quot;: &quot;1339222101&quot;,</span><br><span class="line">            &quot;address&quot;: &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: 2,</span><br><span class="line">            &quot;phone_number&quot;: &quot;1339222101&quot;,</span><br><span class="line">            &quot;address&quot;: &quot;湖北省武汉市江汉区新华路华南海鲜市场&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 输出时无password字段</span><br><span class="line"></span><br><span class="line">b, err := u2.delete(0)</span><br><span class="line">fmt.Println(&quot;u2 删除结果 &quot;, b, &quot;err 信息：&quot;, err)</span><br><span class="line"></span><br><span class="line">fmt.Println(u2.ID)</span><br><span class="line">//错误的ID，无法删除</span><br><span class="line">//u2 删除结果  false err 信息： 错误的ID，无法删除</span><br><span class="line"></span><br><span class="line">b, err = u2.delete(1)</span><br><span class="line">fmt.Println(&quot;u2 删除结果 &quot;, b, &quot;err 信息：&quot;, err)</span><br><span class="line">// 指针接受者则会变更内容</span><br><span class="line">fmt.Println(u2)</span><br><span class="line">//正确的ID已删除</span><br><span class="line">//u2 删除结果  true err 信息： &lt;nil&gt;</span><br><span class="line"></span><br><span class="line">b2, err := user.delete(0)</span><br><span class="line">fmt.Println(&quot;user 删除结果 &quot;, b2, &quot;err 信息：&quot;, err)</span><br><span class="line">bytes, err := json.Marshal(user)</span><br><span class="line">fmt.Println(string(bytes))</span><br><span class="line"></span><br><span class="line">b2, err = user.delete(1)</span><br><span class="line">fmt.Println(&quot;user 删除结果 &quot;, b2, &quot;err 信息：&quot;, err)</span><br><span class="line">bytes, err = json.Marshal(user)</span><br><span class="line">fmt.Println(string(bytes))</span><br><span class="line">// user.ID 并没有被重置</span><br><span class="line"></span><br><span class="line">// 接口调用</span><br><span class="line">var I1 SoftDelete = user</span><br><span class="line">I1.delete(0)</span><br><span class="line">I1.delete(1)</span><br><span class="line"></span><br><span class="line">var I2 SoftDelete = u2</span><br><span class="line">I2.delete(0)</span><br><span class="line">I2.delete(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang part2. 变量,类型,常量,函数，包</title>
      <link href="/2020/03/18/golang-golang-4/"/>
      <url>/2020/03/18/golang-golang-4/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TL;DR 如果初学者，请暂时忽略下列注释，避免无法理解</span><br><span class="line">// 构建约束 支持多行的构建约束，多行之间是AND关系</span><br><span class="line">如下所示 编译(linux AND 386) OR (darwin AND (NOT cgo))</span><br><span class="line">编译linux 和 386支持的代码 or 编译 达尔文内核 不进行CGO</span><br><span class="line">// +build linux,386 darwin,!cgo </span><br><span class="line">构建linux 或者 达尔文 and 386</span><br><span class="line">// +build linux darwin</span><br><span class="line">// +build 386</span><br><span class="line">忽略编译，如果想在同一个package下多个main包，使用该方式，编译时指定</span><br><span class="line">// +build ignore</span><br><span class="line">单元测试 集成测试</span><br><span class="line">// +build integration</span><br><span class="line">// 运行测试方式 go test -tags=integration $(go list ./tests/... | grep -v /vendor/) -v</span><br><span class="line"></span><br><span class="line">/// main包</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">// 导入 fmt包</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// 主函数</span><br><span class="line">func main() &#123;</span><br><span class="line">// int变量声明 默认值0填充</span><br><span class="line">var money int</span><br><span class="line">// 用fmt包进行输出</span><br><span class="line">fmt.Println(&quot;how much money you have left : &quot;, money)</span><br><span class="line">// 输出 how much money you have left : 0</span><br><span class="line"></span><br><span class="line">// int变量声明 并赋值</span><br><span class="line">var money2 int = 1000</span><br><span class="line">// 用fmt包进行输出</span><br><span class="line">fmt.Println(&quot;how much money you have left : &quot;, money2)</span><br><span class="line">// 输出 how much money you have left : 1000</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *自动推断值类型</span><br><span class="line"> */</span><br><span class="line">var money3 = 9999</span><br><span class="line">// 简短自动推断类型 此用法最多</span><br><span class="line">money4 := 8888</span><br><span class="line">fmt.Println(&quot;money 3 is :&quot;, money3, &quot;money4 is :&quot;, money4)</span><br><span class="line">// 批量声明推断变量</span><br><span class="line">var a1, a2, a3, a4 = 100, &quot;0xFFFF&quot;, false, 0xFFFFFFF</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;a1 is &quot;, a1, &quot;; a2 is&quot;, a2, &quot;; a3 is&quot;, a3, &quot;; a4 is&quot;, a4)</span><br><span class="line">//a1 数值int, a2 字符串, a3 bool , a4 16进制</span><br><span class="line">//a1 is  100 ; a2 is 0xFFFF ; a3 is false ; a4 is 268435455</span><br><span class="line"></span><br><span class="line">// 使用16进制时需注意 溢出问题 0xFFFFFFFF 连续32个1的内存</span><br><span class="line">// var a = 0xFFFFFFFF</span><br><span class="line">// fmt.Println(a)</span><br><span class="line">// 上面的实例将输出 constant 4294967295 overflows int</span><br><span class="line"></span><br><span class="line">//批量声明固定类型的变量</span><br><span class="line">var k1, k2 = 100, 88</span><br><span class="line">fmt.Println(&quot;k1 is &quot;, k1, &quot;; k2 is&quot;, k2)</span><br><span class="line"></span><br><span class="line">// 涵盖声明</span><br><span class="line">var (</span><br><span class="line">version = &quot;1.1.1&quot;</span><br><span class="line">port    = 9501</span><br><span class="line">name    = &quot;user-srv&quot;</span><br><span class="line">)</span><br><span class="line">fmt.Printf(&quot;%v Server is starting in port %v. version : %v . &quot;, name, port, version)</span><br><span class="line">// user-srv Server is starting in port 9501. version : 1.1.1 . </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><ul><li>bool</li><li>数字类型</li><li>int8, int16, int32, int64, int</li><li>uint8, uint16, uint32, uint64, uint</li><li>float32, float64</li><li>complex64, complex128</li><li>byte</li><li>rune</li><li>string</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;unicode/utf8&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 布尔类型</span><br><span class="line">boolT := true</span><br><span class="line">boolT = false</span><br><span class="line">fmt.Println(&quot;布尔类型的输出: &quot;, boolT)</span><br><span class="line">//布尔类型的输出:  false</span><br><span class="line"></span><br><span class="line">// 关于数值类型的说明</span><br><span class="line">// 凡是带 u + 类型的均为 无符号类型 例如 uint8 是无符号的8位正整数 0-255</span><br><span class="line"></span><br><span class="line">// int8类型 -128-127</span><br><span class="line">// uint8类型 0 ~ 255</span><br><span class="line">var int8T int8 = 127</span><br><span class="line">var uint8T uint8 = 255</span><br><span class="line">// 指定的类型不能超出数值范围，否则发生overflow 其他的类型同理</span><br><span class="line">//var int8T int8 = 128</span><br><span class="line">//constant 128 overflows int8v</span><br><span class="line">fmt.Println(&quot;8位数值的类型的输出: &quot;, int8T)</span><br><span class="line">fmt.Println(&quot;无符号8位数值的类型的输出: &quot;, uint8T)</span><br><span class="line">/**</span><br><span class="line">8位数值的类型的输出:  127</span><br><span class="line">无符号8位数值的类型的输出:  255</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//int16 -32768～32767</span><br><span class="line">//uint16 0～65535</span><br><span class="line">var int16T int16 = 127</span><br><span class="line">var uint16T uint16 = 65535</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;int16T 的类型的输出: &quot;, int16T)</span><br><span class="line">fmt.Println(&quot;uint16T 的类型的输出: &quot;, uint16T)</span><br><span class="line">/**</span><br><span class="line">int16T 的类型的输出:  127</span><br><span class="line">uint16T 的类型的输出:  65535</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//int32 ：-2147483648～2147483647</span><br><span class="line">//uint32 :  0～4294967295</span><br><span class="line">var int32T int32 = 2147483647</span><br><span class="line">var uint32T uint32 = 4294967295</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;int32T 的类型的输出: &quot;, int32T)</span><br><span class="line">fmt.Println(&quot;uint32T 的类型的输出: &quot;, uint32T)</span><br><span class="line">/**</span><br><span class="line">int32T 的类型的输出:  2147483647</span><br><span class="line">uint32T 的类型的输出:  4294967295</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//int64 : -9223372036854775808～9223372036854775807</span><br><span class="line">//uint64: 0～18446744073709551615</span><br><span class="line">var int64T int64 = 9223372036854775807</span><br><span class="line">var uint64T uint64 = 18446744073709551615</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;int64T 的类型的输出: &quot;, int64T)</span><br><span class="line">fmt.Println(&quot;uint64T 的类型的输出: &quot;, uint64T)</span><br><span class="line">/**</span><br><span class="line">int64T 的类型的输出:  9223372036854775807</span><br><span class="line">uint64T 的类型的输出:  18446744073709551615</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// int 和 uint 都是根据系统的位数自行调节</span><br><span class="line">// 32 位系统 : -2147483648～2147483647</span><br><span class="line">// 64 位系统 : -9223372036854775808～9223372036854775807</span><br><span class="line">var intT int = 9223372036854775807</span><br><span class="line"></span><br><span class="line">//uint：表示 32 或 64 位无符号整型。(取决于系统的位数)</span><br><span class="line">// 32 位系统 ：  0～4294967295，</span><br><span class="line">// 64 位系统 ： 0～18446744073709551615</span><br><span class="line">var uintT uint = 18446744073709551615</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;intT 的类型的输出: &quot;, intT)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;uintT 的类型的输出: &quot;, uintT)</span><br><span class="line">/**</span><br><span class="line">intT 的类型的输出:  9223372036854775807</span><br><span class="line">uintT 的类型的输出:  18446744073709551615</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">Float 数值类型</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">// float32 3.402823466385288598117041834516925440e +381.401298464324817070923729583289916131280e -45</span><br><span class="line">// float32 大约可提供6位小数 1 左移 24位</span><br><span class="line"></span><br><span class="line">var float32T float32 = 16777216</span><br><span class="line">// IEEE754</span><br><span class="line">// 因float32 累计计算扩散 请尽量使用float64</span><br><span class="line">fmt.Println(&quot;float32T 的类型的输出: &quot;, float32T == float32T+1)</span><br><span class="line"></span><br><span class="line">var float64T float64 = 16777216</span><br><span class="line">fmt.Println(&quot;float64T 的类型的输出: &quot;, float64T == float64T+1)</span><br><span class="line"></span><br><span class="line">const Avogadro = 6.02214129e23 // 阿伏伽德罗常数</span><br><span class="line">const Planck = 6.62606957e-34  // 普朗克常数</span><br><span class="line">fmt.Println(&quot;阿伏伽德罗常数：&quot;, Avogadro, &quot;普朗克常数：&quot;, Planck)</span><br><span class="line"></span><br><span class="line">// 默认情况下 float推断 均为float64</span><br><span class="line">fl64 := 1.11</span><br><span class="line">fmt.Printf(&quot;Float 类型推断： %T \n&quot;, fl64)</span><br><span class="line"></span><br><span class="line">// 复数类型</span><br><span class="line">// 用途 ：  反常积分 ,分析系统稳定性的根轨迹法 ，奈奎斯特图法（Nyquist plot）和尼科尔斯图法（Nichols plot）都是在复平面上进行的</span><br><span class="line"></span><br><span class="line">//complex64：实和虚 都为 float32 类型的的复数。</span><br><span class="line">//complex128：实和虚 都为 float64 类型的的复数。</span><br><span class="line">c1 := complex(1, 2)</span><br><span class="line">c2 := 3 + 4i</span><br><span class="line">cadd := c1 + c2</span><br><span class="line">fmt.Println(&quot;复数和:&quot;, cadd)</span><br><span class="line">cmul := c1 * c2</span><br><span class="line">fmt.Println(&quot;复数:&quot;, cmul)</span><br><span class="line"></span><br><span class="line">// byte 是 uint8 的别名。 utf8编码</span><br><span class="line">// 声明数组</span><br><span class="line">// ASCII 码 49 50 51 52</span><br><span class="line">data := [4]byte&#123;0x31, 0x32, 0x33, 0x34&#125;</span><br><span class="line">str := string(data[:])</span><br><span class="line">fmt.Println(&quot;byte 转 string :&quot;, str)</span><br><span class="line">// 使用rune 和获取 字符串长度</span><br><span class="line">fmt.Println(&quot;rune string 长度 :&quot;, utf8.RuneCountInString(str))</span><br><span class="line"></span><br><span class="line">// rune 是 int32 的别名。</span><br><span class="line">str1 := &quot;我叫MT&quot;</span><br><span class="line">fmt.Println(&quot;rune 结果&quot;, []rune(str1))</span><br><span class="line">fmt.Println(&quot;byte 结果&quot;, []byte(str1))</span><br><span class="line"></span><br><span class="line">//const 关键字常量 初始化赋值</span><br><span class="line">// 常量结果不能通过函数 方法赋值给常量</span><br><span class="line">const constA = 100</span><br><span class="line">fmt.Println(&quot;constA 结果&quot;, constA)</span><br><span class="line"></span><br><span class="line">// IOTA 常量</span><br><span class="line">const (</span><br><span class="line">a = iota //a=0</span><br><span class="line">b = iota //b=1</span><br><span class="line">c        //c=2</span><br><span class="line">_        //3</span><br><span class="line">d        //d=4</span><br><span class="line">)</span><br><span class="line">fmt.Println(</span><br><span class="line">&quot;a is :&quot;, a,</span><br><span class="line">&quot;b is :&quot;, b,</span><br><span class="line">&quot;c is :&quot;, c,</span><br><span class="line">&quot;d is :&quot;, d,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 实战用法</span><br><span class="line">type ByteSize float64</span><br><span class="line">const (</span><br><span class="line">_           = iota             // ignore first value by assigning to blank identifier</span><br><span class="line">KB ByteSize = 1 &lt;&lt; (10 * iota) // 1 &lt;&lt; (10*1)</span><br><span class="line">MB                             // 1 &lt;&lt; (10*2)</span><br><span class="line">GB                             // 1 &lt;&lt; (10*3)</span><br><span class="line">TB                             // 1 &lt;&lt; (10*4)</span><br><span class="line">PB                             // 1 &lt;&lt; (10*5)</span><br><span class="line">EB                             // 1 &lt;&lt; (10*6)</span><br><span class="line">ZB                             // 1 &lt;&lt; (10*7)</span><br><span class="line">YB                             // 1 &lt;&lt; (10*8)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(</span><br><span class="line">&quot;KB is &quot;, KB,</span><br><span class="line">&quot;\n MB is &quot;, MB,</span><br><span class="line">&quot;\n GB is &quot;, GB,</span><br><span class="line">&quot;\n TB is &quot;, TB,</span><br><span class="line">&quot;\n PB is &quot;, PB,</span><br><span class="line">&quot;\n EB is &quot;, EB,</span><br><span class="line">&quot;\n EB is &quot;, EB,</span><br><span class="line">&quot;\n ZB is &quot;, ZB,</span><br><span class="line">&quot;\n YB is &quot;, YB,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">//引入包</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/pkg/errors&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(TestFunc(33))</span><br><span class="line">fmt.Println(TestFunc(10))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestFunc(i int) (err error, d int) &#123;</span><br><span class="line">if d := i % 10; d == 0 &#123;</span><br><span class="line">return nil, d</span><br><span class="line">&#125;</span><br><span class="line">return errors.New(&quot;无法对10取模&quot;), 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编指令整理</title>
      <link href="/2020/01/15/asm-%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/01/15/asm-%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="汇编寄存器整理"><a href="#汇编寄存器整理" class="headerlink" title="汇编寄存器整理"></a>汇编寄存器整理</h1><h2 id="1-通用数据传送指令"><a href="#1-通用数据传送指令" class="headerlink" title="1. 通用数据传送指令"></a>1. 通用数据传送指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MOV     传送字或字节.  </span><br><span class="line">MOVSX   先符号扩展,再传送.  </span><br><span class="line">MOVZX   先零扩展,再传送.  </span><br><span class="line">PUSH    把字压入堆栈.  </span><br><span class="line">POP     把字弹出堆栈.  </span><br><span class="line">PUSHA   把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.  </span><br><span class="line">POPA    把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.  </span><br><span class="line">PUSHAD  把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.  </span><br><span class="line">POPAD   把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈.  </span><br><span class="line">BSWAP   交换32位寄存器里字节的顺序  </span><br><span class="line">XCHG    交换字或字节.(至少有一个操作数为寄存器,段寄存器不可作为操作数)  </span><br><span class="line">CMPXCHG 比较并交换操作数.(第二个操作数必须为累加器AL/AX/EAX)  </span><br><span class="line">XADD    先交换再累加.(结果在第一个操作数里)  </span><br><span class="line">XLAT    字节查表转换.----BX指向一张256字节的表的起点,</span><br><span class="line">        AL为表的索引值(0-255,即0-FFH);</span><br><span class="line">        返回AL为查表结果.([BX+AL]-&gt;AL)</span><br></pre></td></tr></table></figure><h2 id="2-输入输出端口传送指令"><a href="#2-输入输出端口传送指令" class="headerlink" title="2. 输入输出端口传送指令:"></a>2. 输入输出端口传送指令:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IN      I/O端口输入. ( 语法: IN   累加器,    &#123;端口号│DX&#125; )  </span><br><span class="line">OUT     I/O端口输出. ( 语法: OUT &#123;端口号│DX&#125;,累加器 )</span><br><span class="line">                    输入输出端口由立即方式指定时,其范围是 0-255; </span><br><span class="line">                    由寄存器 DX 指定时,其范围是 0-65535.</span><br></pre></td></tr></table></figure><h2 id="3-目的地址传送指令"><a href="#3-目的地址传送指令" class="headerlink" title="3. 目的地址传送指令:"></a>3. 目的地址传送指令:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LEA     装入有效地址.例: LEA DX,string ;把偏移地址存到DX.  </span><br><span class="line">LDS     传送目标指针,把指针内容装入DS.例: LDS SI,string ;把段地址:偏移地址存到DS:SI.  </span><br><span class="line">LES     传送目标指针,把指针内容装入ES.例: LES DI,string ;把段地址:偏移地址存到ES:DI.  </span><br><span class="line">LFS     传送目标指针,把指针内容装入FS.例: LFS DI,string ;把段地址:偏移地址存到FS:DI.  </span><br><span class="line">LGS     传送目标指针,把指针内容装入GS.例: LGS DI,string ;把段地址:偏移地址存到GS:DI.  </span><br><span class="line">LSS     传送目标指针,把指针内容装入SS.例: LSS DI,string ;把段地址:偏移地址存到SS:DI.</span><br></pre></td></tr></table></figure><h2 id="4-标志传送指令"><a href="#4-标志传送指令" class="headerlink" title="4. 标志传送指令:"></a>4. 标志传送指令:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LAHF    标志寄存器传送,把标志装入AH.  </span><br><span class="line">SAHF    标志寄存器传送,把AH内容装入标志寄存器.  </span><br><span class="line">PUSHF   标志入栈.  </span><br><span class="line">POPF    标志出栈.  </span><br><span class="line">PUSHD   32位标志入栈.  </span><br><span class="line">POPD    32位标志出栈.</span><br></pre></td></tr></table></figure><h2 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ADD     加法.  </span><br><span class="line">ADC     带进位加法.  </span><br><span class="line">INC     加 1.  </span><br><span class="line">AAA     加法的ASCII码调整.  </span><br><span class="line">DAA     加法的十进制调整.  </span><br><span class="line">SUB     减法.  </span><br><span class="line">SBB     带借位减法.  </span><br><span class="line">DEC     减 1.  </span><br><span class="line">NEG     求反(以    0 减之).  </span><br><span class="line">CMP     比较.(两操作数作减法,仅修改标志位,不回送结果).  </span><br><span class="line">AAS     减法的ASCII码调整.  </span><br><span class="line">DAS     减法的十进制调整.  </span><br><span class="line">MUL     无符号乘法.结果回送AH和AL(字节运算),或DX和AX(字运算),  </span><br><span class="line">IMUL    整数乘法.结果回送AH和AL(字节运算),或DX和AX(字运算),  </span><br><span class="line">AAM     乘法的ASCII码调整.  </span><br><span class="line">DIV     无符号除法.结果回送:商回送AL,余数回送AH, (字节运算);或 商回送AX,余数回送DX, (字运算).  </span><br><span class="line">IDIV    整数除法.结果回送:商回送AL,余数回送AH, (字节运算);或 商回送AX,余数回送DX, (字运算).  </span><br><span class="line">AAD     除法的ASCII码调整.  </span><br><span class="line">CBW     字节转换为字. (把AL中字节的符号扩展到AH中去)  </span><br><span class="line">CWD     字转换为双字. (把AX中的字的符号扩展到DX中去)  </span><br><span class="line">CWDE    字转换为双字. (把AX中的字符号扩展到EAX中去)  </span><br><span class="line">CDQ     双字扩展. (把EAX中的字的符号扩展到EDX中去)  </span><br><span class="line"></span><br><span class="line">DS:SI   源串段寄存器 :源串变址.  </span><br><span class="line">ES:DI   目标串段寄存器:目标串变址.  </span><br><span class="line">CX      重复次数计数器.  </span><br><span class="line">AL/AX   扫描值.  </span><br><span class="line">D标志    0表示重复操作中SI和DI应自动增量; 1表示应自动减量.  </span><br><span class="line">Z标志    用来控制扫描或比较操作的结束.</span><br></pre></td></tr></table></figure><h2 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AND     与运算.  </span><br><span class="line">OR      或运算.  </span><br><span class="line">XOR     异或运算.  </span><br><span class="line">NOT     取反.  </span><br><span class="line">TEST    测试.(两操作数作与运算,仅修改标志位,不回送结果).  </span><br><span class="line">SHL     逻辑左移.  </span><br><span class="line">SAL     算术左移.(=SHL)  </span><br><span class="line">SHR     逻辑右移.  </span><br><span class="line">SAR     算术右移.(=SHR)  </span><br><span class="line">ROL     循环左移.  </span><br><span class="line">ROR     循环右移.  </span><br><span class="line">RCL     通过进位的循环左移.  </span><br><span class="line">RCR     通过进位的循环右移.  </span><br><span class="line">          以上八种移位指令,其移位次数可达255次.  </span><br><span class="line">          移位一次时, 可直接用操作码. 如 SHL AX,1.  </span><br><span class="line">          移位&gt;1次时, 则由寄存器CL给出移位次数.  </span><br><span class="line">          如 MOV CL,04   SHL AX,CL</span><br></pre></td></tr></table></figure><h1 id="串指令"><a href="#串指令" class="headerlink" title="串指令"></a>串指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MOVS    串传送.( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )  </span><br><span class="line">CMPS    串比较.( CMPSB 比较字符. CMPSW 比较字. )  </span><br><span class="line">SCAS    串扫描.把AL或AX的内容与目标串作比较,比较结果反映在标志位.  </span><br><span class="line">LODS    装入串.把源串中的元素(字或字节)逐一装入AL或AX中.</span><br><span class="line">        ( LODSB 传送字符. LODSW 传送字.    LODSD 传送双字. )  </span><br><span class="line">STOS    保存串.是LODS的逆过程.  </span><br><span class="line">REP         当CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPE/REPZ   当ZF=1或比较结果相等,且CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPC        当CF=1且CX/ECX&lt;&gt;0时重复.  </span><br><span class="line">REPNC       当CF=0且CX/ECX&lt;&gt;0时重复.</span><br></pre></td></tr></table></figure><h2 id="无条件转移指令-长转移"><a href="#无条件转移指令-长转移" class="headerlink" title="无条件转移指令 (长转移)"></a>无条件转移指令 (长转移)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JMP         无条件转移指令  </span><br><span class="line">CALL        过程调用  </span><br><span class="line">RET/RETF    过程返回</span><br></pre></td></tr></table></figure><h2 id="条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2"><a href="#条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2" class="headerlink" title="条件转移指令 (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )"></a>条件转移指令 (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">JA/JNBE     不小于或不等于时转移.  </span><br><span class="line">    JAE/JNB     大于或等于转移.  </span><br><span class="line">    JB/JNAE     小于转移.  </span><br><span class="line">    JBE/JNA     小于或等于转移.  </span><br><span class="line">        以上四条,测试无符号整数运算的结果(标志C和Z).  </span><br><span class="line">    JG/JNLE     大于转移.  </span><br><span class="line">    JGE/JNL     大于或等于转移.  </span><br><span class="line">    JL/JNGE     小于转移.  </span><br><span class="line">    JLE/JNG     小于或等于转移.  </span><br><span class="line">        以上四条,测试带符号整数运算的结果(标志S,O和Z).  </span><br><span class="line">    JE/JZ       等于转移.  </span><br><span class="line">    JNE/JNZ     不等于时转移.  </span><br><span class="line">    JC          有进位时转移.  </span><br><span class="line">    JNC         无进位时转移.  </span><br><span class="line">    JNO         不溢出时转移.  </span><br><span class="line">    JNP/JPO     奇偶性为奇数时转移.  </span><br><span class="line">    JNS         符号位为 &quot;0&quot; 时转移.  </span><br><span class="line">    JO          溢出转移.  </span><br><span class="line">    JP/JPE      奇偶性为偶数时转移.  </span><br><span class="line">    JS          符号位为 &quot;1&quot; 时转移.</span><br></pre></td></tr></table></figure><h2 id="循环控制指令-短转移"><a href="#循环控制指令-短转移" class="headerlink" title="循环控制指令(短转移)"></a>循环控制指令(短转移)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOOP            CX不为零时循环.  </span><br><span class="line">LOOPE/LOOPZ     CX不为零且标志Z=1时循环.  </span><br><span class="line">LOOPNE/LOOPNZ   CX不为零且标志Z=0时循环.  </span><br><span class="line">JCXZ            CX为零时转移.  </span><br><span class="line">JECXZ           ECX为零时转移.</span><br></pre></td></tr></table></figure><h2 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INT         中断指令  </span><br><span class="line">INTO        溢出中断  </span><br><span class="line">IRET        中断返回</span><br></pre></td></tr></table></figure><h2 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HLT         处理器暂停,  直到出现中断或复位信号才继续.  </span><br><span class="line">WAIT        当芯片引线TEST为高电平时使CPU进入等待状态.  </span><br><span class="line">ESC         转换到外处理器.  </span><br><span class="line">LOCK        封锁总线.  </span><br><span class="line">NOP         空操作.  </span><br><span class="line">STC         置进位标志位.  </span><br><span class="line">CLC         清进位标志位.  </span><br><span class="line">CMC         进位标志取反.  </span><br><span class="line">STD         置方向标志位.  </span><br><span class="line">CLD         清方向标志位.  </span><br><span class="line">STI         置中断允许位.  </span><br><span class="line">CLI         清中断允许位.</span><br></pre></td></tr></table></figure><h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DW          定义字(2字节).  </span><br><span class="line">PROC        定义过程.  </span><br><span class="line">ENDP        过程结束.  </span><br><span class="line">SEGMENT     定义段.  </span><br><span class="line">ASSUME      建立段寄存器寻址.  </span><br><span class="line">ENDS        段结束.  </span><br><span class="line">END         程序结束.</span><br></pre></td></tr></table></figure><h2 id="处理机控制指令：标志处理指令"><a href="#处理机控制指令：标志处理指令" class="headerlink" title="处理机控制指令：标志处理指令"></a>处理机控制指令：标志处理指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CLC     进位位置0指令  </span><br><span class="line">CMC     进位位求反指令  </span><br><span class="line">STC     进位位置为1指令  </span><br><span class="line">CLD     方向标志置1指令  </span><br><span class="line">STD     方向标志位置1指令  </span><br><span class="line">CLI     中断标志置0指令  </span><br><span class="line">STI     中断标志置1指令  </span><br><span class="line">NOP     无操作  </span><br><span class="line">HLT     停机  </span><br><span class="line">WAIT    等待  </span><br><span class="line">ESC     换码  </span><br><span class="line">LOCK    封锁</span><br></pre></td></tr></table></figure><h1 id="浮点运算指令集"><a href="#浮点运算指令集" class="headerlink" title="浮点运算指令集"></a>浮点运算指令集</h1><h2 id="控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B"><a href="#控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B" class="headerlink" title="控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)"></a>控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FINIT                 初始化浮点部件              9B DB E3  </span><br><span class="line">FCLEX                 清除异常                   9B DB E2  </span><br><span class="line">FDISI                 浮点检查禁止中断             9B DB E1  </span><br><span class="line">FENI                  浮点检查禁止中断二           9B DB E0  </span><br><span class="line">WAIT                  同步CPU和FPU               9B  </span><br><span class="line">FWAIT                 同步CPU和FPU               D9 D0  </span><br><span class="line">FNOP                  无操作                     DA E9  </span><br><span class="line">FXCH                  交换ST(0)和ST(1)           D9 C9  </span><br><span class="line">FXCH ST(i)            交换ST(0)和ST(i)           D9 C1iii  </span><br><span class="line">FSTSW ax              状态字到ax                 9B DF E0  </span><br><span class="line">FSTSW   word ptr mem  状态字到mem                9B DD mm111mmm  </span><br><span class="line">FLDCW   word ptr mem  mem到状态字                D9 mm101mmm  </span><br><span class="line">FSTCW   word ptr mem  控制字到mem                9B D9 mm111mmm  </span><br><span class="line">  </span><br><span class="line">FLDENV  word ptr mem  mem到全环境                D9 mm100mmm  </span><br><span class="line">FSTENV  word ptr mem  全环境到mem                9B D9 mm110mmm  </span><br><span class="line">FRSTOR  word ptr mem  mem到FPU状态               DD mm100mmm  </span><br><span class="line">FSAVE   word ptr mem  FPU状态到mem               9B DD mm110mmm  </span><br><span class="line">  </span><br><span class="line">FFREE ST(i)           标志ST(i)未使用             DD C0iii  </span><br><span class="line">FDECSTP               减少栈指针1-&gt;0 2-&gt;1         D9 F6  </span><br><span class="line">FINCSTP               增加栈指针0-&gt;1 1-&gt;2         D9 F7  </span><br><span class="line">FSETPM                浮点设置保护                 DB E4</span><br></pre></td></tr></table></figure><h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">FLDZ                  将0.0装入ST(0)                  机器码  D9 EE  </span><br><span class="line">FLD1                  将1.0装入ST(0)                  机器码  D9 E8  </span><br><span class="line">FLDPI                 将π装入ST(0)                    机器码  D9 EB  </span><br><span class="line">FLDL2T                将ln10/ln2装入ST(0)             机器码  D9 E9  </span><br><span class="line">FLDL2E                将1/ln2装入ST(0)                机器码  D9 EA  </span><br><span class="line">FLDLG2                将ln2/ln10装入ST(0)             机器码  D9 EC  </span><br><span class="line">FLDLN2                将ln2装入ST(0)                  机器码  D9 ED  </span><br><span class="line">  </span><br><span class="line">FLD    real4 ptr mem  装入mem的单精度浮点数             机器码  D9 mm000mmm  </span><br><span class="line">FLD    real8 ptr mem  装入mem的双精度浮点数             机器码  DD mm000mmm  </span><br><span class="line">FLD   real10 ptr mem  装入mem的十字节浮点数             机器码  DB mm101mmm  </span><br><span class="line">  </span><br><span class="line">FILD    word ptr mem  装入mem的二字节整数              机器码  DF mm000mmm  </span><br><span class="line">FILD   dword ptr mem  装入mem的四字节整数              机器码  DB mm000mmm  </span><br><span class="line">FILD   qword ptr mem  装入mem的八字节整数              机器码  DF mm101mmm  </span><br><span class="line">  </span><br><span class="line">FBLD   tbyte ptr mem  装入mem的十字节BCD数            机器码  DF mm100mmm  </span><br><span class="line">  </span><br><span class="line">FST    real4 ptr mem  保存单精度浮点数到mem             机器码  D9 mm010mmm  </span><br><span class="line">FST    real8 ptr mem  保存双精度浮点数到mem             机器码  DD mm010mmm  </span><br><span class="line">  </span><br><span class="line">FIST    word ptr mem  保存二字节整数到mem              机器码  DF mm010mmm  </span><br><span class="line">FIST   dword ptr mem  保存四字节整数到mem              机器码  DB mm010mmm  </span><br><span class="line">  </span><br><span class="line">FSTP   real4 ptr mem  保存单精度浮点数到mem并出栈      机器码  D9 mm011mmm  </span><br><span class="line">FSTP   real8 ptr mem  保存双精度浮点数到mem并出栈      机器码  DD mm011mmm  </span><br><span class="line">FSTP  real10 ptr mem  保存十字节浮点数到mem并出栈      机器码  DB mm111mmm  </span><br><span class="line">  </span><br><span class="line">FISTP   word ptr mem  保存二字节整数到mem并出栈           机器码  DF mm011mmm  </span><br><span class="line">FISTP  dword ptr mem  保存四字节整数到mem并出栈           机器码  DB mm011mmm  </span><br><span class="line">FISTP  qword ptr mem  保存八字节整数到mem并出栈           机器码  DF mm111mmm  </span><br><span class="line">  </span><br><span class="line">FBSTP  tbyte ptr mem  保存十字节BCD数到mem并出栈     机器码  DF mm110mmm  </span><br><span class="line">  </span><br><span class="line">FCMOVB                ST(0),ST(i) &lt;时传送              机器码  DA C0iii  </span><br><span class="line">FCMOVBE               ST(0),ST(i) &lt;=时传送             机器码  DA D0iii  </span><br><span class="line">FCMOVE                ST(0),ST(i) =时传送             机器码  DA C1iii  </span><br><span class="line">FCMOVNB               ST(0),ST(i) &gt;=时传送             机器码  DB C0iii  </span><br><span class="line">FCMOVNBE              ST(0),ST(i) &gt;时传送              机器码  DB D0iii  </span><br><span class="line">FCMOVNE               ST(0),ST(i) !=时传送            机器码  DB C1iii  </span><br><span class="line">FCMOVNU               ST(0),ST(i) 有序时传送        机器码  DB D1iii  </span><br><span class="line">FCMOVU                ST(0),ST(i) 无序时传送        机器码  DA D1iii</span><br></pre></td></tr></table></figure><h2 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FCOM                  ST(0)-ST(1)                      机器码  D8 D1  </span><br><span class="line">FCOMI                 ST(0),ST(i)  ST(0)-ST(1)         机器码  DB F0iii  </span><br><span class="line">FCOMIP                ST(0),ST(i)  ST(0)-ST(1)并出栈   机器码  DF F0iii  </span><br><span class="line">FCOM   real4 ptr mem  ST(0)-实数mem                      机器码  D8 mm010mmm  </span><br><span class="line">FCOM   real8 ptr mem  ST(0)-实数mem                      机器码  DC mm010mmm  </span><br><span class="line">  </span><br><span class="line">FICOM   word ptr mem  ST(0)-整数mem                      机器码  DE mm010mmm  </span><br><span class="line">FICOM  dword ptr mem  ST(0)-整数mem                      机器码  DA mm010mmm  </span><br><span class="line">FICOMP  word ptr mem  ST(0)-整数mem并出栈               机器码  DE mm011mmm  </span><br><span class="line">FICOMP dword ptr mem  ST(0)-整数mem并出栈               机器码  DA mm011mmm  </span><br><span class="line">  </span><br><span class="line">FTST                  ST(0)-0                          机器码  D9 E4  </span><br><span class="line">FUCOM  ST(i)          ST(0)-ST(i)                      机器码  DD E0iii  </span><br><span class="line">FUCOMP ST(i)          ST(0)-ST(i)并出栈                   机器码  DD E1iii  </span><br><span class="line">FUCOMPP               ST(0)-ST(1)并二次出栈             机器码  DA E9  </span><br><span class="line">FXAM                  ST(0)规格类型                    机器码  D9 E5</span><br></pre></td></tr></table></figure><h2 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">FADD                  把目的操作数 (直接接在指令后的变量或堆栈缓存器) 与来源操作数 </span><br><span class="line">                      (接在目的操作数后的变量或堆栈缓存器)  相加，并将结果存入目的操作数  </span><br><span class="line">FADDP  ST(i),ST       这个指令是使目的操作数加上 ST  缓存器，并弹出 ST 缓存器，</span><br><span class="line">                      而目的操作数必须是堆栈缓存器的其中之一，最后不管目的操作数为何，</span><br><span class="line">                      经弹出一次后，目的操作数会变成上一个堆栈缓存器了  </span><br><span class="line">FIADD                 FIADD 是把 ST   加上来源操作数，然后再存入 ST 缓存器，</span><br><span class="line">                      来源操作数必须是字组整数或短整数形态的变数  </span><br><span class="line">  </span><br><span class="line">FSUB                  减  </span><br><span class="line">FSUBP  </span><br><span class="line">FSUBR                 减数与被减数互换  </span><br><span class="line">FSUBRP  </span><br><span class="line">FISUB  </span><br><span class="line">FISUBR  </span><br><span class="line">  </span><br><span class="line">FMUL                  乘  </span><br><span class="line">FMULP  </span><br><span class="line">FIMUL  </span><br><span class="line">  </span><br><span class="line">FDIV                  除  </span><br><span class="line">FDIVP  </span><br><span class="line">FDIVR  </span><br><span class="line">FDIVRP  </span><br><span class="line">FIDIV  </span><br><span class="line">FIDIVR  </span><br><span class="line">  </span><br><span class="line">FCHS                  改变 ST 的正负值  </span><br><span class="line">  </span><br><span class="line">FABS                  把 ST  之值取出，取其绝对值后再存回去。  </span><br><span class="line">  </span><br><span class="line">FSQRT                 将 ST  之值取出，开根号后再存回去。  </span><br><span class="line">  </span><br><span class="line">FSCALE                这个指令是计算 ST*2^ST(1)之值，再把结果存入ST里，而 ST(1)之值不变</span><br><span class="line">                      ST(1)必须是在 -32768 到 32768(-215到215)之间的整数，</span><br><span class="line">                      如果超过这个范围计算结果无法确定，如果不是整数ST(1)会先向零舍入成整数</span><br><span class="line">                      再计算。所以为安全起见，最好是由字组整数载入到 ST(1) 里。  </span><br><span class="line">  </span><br><span class="line">FRNDINT               这个指令是把 ST 的数值舍入成整数，FPU提供四种舍入方式，</span><br><span class="line">                      由 FPU 的控制字组(control word)中的RC两个位决定  </span><br><span class="line">                          RC    舍入控制  </span><br><span class="line">                          00    四舍五入  </span><br><span class="line">                          01    向负无限大舍入  </span><br><span class="line">                          10    向正无限大舍入  </span><br><span class="line">                          11    向零舍去</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asm </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService Part.1, 认识Go-Micro</title>
      <link href="/2019/07/11/go-micro-part-1/"/>
      <url>/2019/07/11/go-micro-part-1/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参考地址</span><br><span class="line">https://micro.mu/docs/cn/index.html</span><br></pre></td></tr></table></figure></p><h1 id="Part-1"><a href="#Part-1" class="headerlink" title="Part.1"></a>Part.1</h1><h2 id="micro由以下几个部分组成："><a href="#micro由以下几个部分组成：" class="headerlink" title="micro由以下几个部分组成："></a>micro由以下几个部分组成：</h2><ol><li><p>API网关（API Gateway）： - API Gateway 网关。API网关是请求的入口，把请求动态路由到具体服务。网关允许我们建立可伸缩的后台微服务架构，并且让工作在前端的公共API更健壮。Micro API基于服务发现拥有强大的路由能力，通过我们预置的handlers插件，它可以处理http、gRPC、websocket、消息推送事件等等。</p></li><li><p>命令行接口（Interactive CLI）： 交互式的命令行接口。CLI通过终端可以描述、查询、直接与平台和服务进行交互。CLI提供所有的命令让开发者明白微服务正在处理的事情。CLI也包含了交互模式。</p></li><li><p>服务代理（Service Proxy）： 服务代理，基于Go Micro和MUCP协议构建的透明的代理服务。它将服务发现、负载均衡、消息编码、中间件、传输及代理插件转移到某一（具体服务所在）位置，同api不同，它不暴露任何接口，只工作在内部环境，相当于桥接内部服务。</p></li><li><p>模板生成（Template Generation）： 基于模板快速创建新的服务代码。Micor提供预置的模板，通过模板编写统一风格的代码。</p></li><li><p>SlackOps小机器人（SlackOps Bot）： Slack小机器人插件，当它运行中服务中时，这个插件允许开发者通过Slack消息来操作平台。MicroBot插件提供聊天配置选项，这样就可以让团队通过向小机器人发送聊天消息来做一些我们希望它做的事，这里面当然也包含像动态发现服务一样创建slack命令。</p></li><li><p>管理控制台（Web Dashboard）： 通过Web管理控制台，可以直接在Web页面上查看服务的运行情况，展示端点信息，请求与响应状态，甚至直接向服务进行查询。管理控制台也有CLI交互页面提供给开发者在线上处理，就像直接操作终端一样。</p></li><li><p>Go-micro框架（Go Framework）： Go Micro框架是Micro的底层、核心。GO-Micro把分布式服务抽象，并提供简便的方式让大家构建具有高弹性的微服务。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> go-micro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go-micro </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 安装和配置</title>
      <link href="/2019/07/10/golang-golang-2/"/>
      <url>/2019/07/10/golang-golang-2/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>Mac 安装<br>brew install go</p></blockquote><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Volumes/Data/gopath</span><br><span class="line">export GOROOT=/usr/local/opt/go/libexec</span><br><span class="line"># 开启go mod 模式 下一章节会说到</span><br><span class="line">export GO111MODULE=on</span><br><span class="line">export PATH=&quot;$PATH:$GOPATH/bin:$GOROOT/bin&quot;</span><br><span class="line">#此处为go get 代理，但是并没有什么卵用</span><br><span class="line">#export GOPROXY=https://goproxy.io</span><br><span class="line">export GOPROXY=</span><br></pre></td></tr></table></figure><h1 id="代理问题"><a href="#代理问题" class="headerlink" title="代理问题"></a>代理问题</h1><p>上面说到<code>GOPROXY</code>没有什么卵用，还是经常网络掉包什么的<br>这里推荐几个方式<br><code>proxifer</code> 强制全局走代理</p><p>or </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 go get -u github.com/swaggo/swag</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xofred.github.io/ss-in-mac-terminal/" target="_blank" rel="noopener">Mac OSX 终端走 shadowsocks 代理</a></p><p><a href="http://blackwolfsec.cc/2016/09/19/Proxifier_Shadowshocks/" target="_blank" rel="noopener">Proxifier+Shadowshocks系统全局代理的正确姿势</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言汇编解释-1</title>
      <link href="/2019/03/31/clang-cinasm-1/"/>
      <url>/2019/03/31/clang-cinasm-1/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code><br>本文转载自 github<br><a href="https://github.com/frozendeath/cinasm" title="知兵" target="_blank" rel="noopener">冻死胖子-github</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所用示例均为翻新，有 参考《Linux C编程一站式学习》以及冻死胖子的Github，如有版权问题，请联系站长删除</span><br></pre></td></tr></table></figure></p><p>本教程使用的编译器为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ clang -v</span><br><span class="line">Apple LLVM version 10.0.1 (clang-1001.0.46.3)</span><br><span class="line">Target: x86_64-apple-darwin18.5.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</span><br></pre></td></tr></table></figure></p><h1 id="Show-Me-The-Code"><a href="#Show-Me-The-Code" class="headerlink" title="Show Me The Code"></a>Show Me The Code</h1><p>老规矩，万物之本 打印 <code>HelloWorld</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hello, World!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码写好了，如何运行呢， 命令如下，生成.out可执行文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜ CinASM clang Hello.c      </span><br><span class="line">➜ CinASM ls -la                    </span><br><span class="line">total 40</span><br><span class="line">drwxr-xr-x   7 lookwi  staff   238 Mar 31 18:40 .</span><br><span class="line">drwxr-xr-x@ 14 lookwi  staff   476 Mar 31 18:32 ..</span><br><span class="line">drwxr-xr-x   7 lookwi  staff   238 Mar 31 18:39 .idea</span><br><span class="line">-rw-r--r--   1 lookwi  staff   109 Mar 31 18:33 CMakeLists.txt</span><br><span class="line">-rwxr-xr-x   1 lookwi  staff  8432 Mar 31 18:40 a.out</span><br><span class="line">drwxr-xr-x   7 lookwi  staff   238 Mar 31 18:33 cmake-build-debug</span><br><span class="line">-rw-r--r--   1 lookwi  staff    79 Mar 31 18:33 main.c</span><br><span class="line">➜ CinASM ./a.out  </span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure></p><h1 id="说好的ASM"><a href="#说好的ASM" class="headerlink" title="说好的ASM"></a>说好的ASM</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">➜  CinASM clang -S main.c</span><br><span class="line">➜  CinASM cat main.s     </span><br><span class="line">        .section        __TEXT,__text,regular,pure_instructions</span><br><span class="line">        .build_version macos, 10, 14    sdk_version 10, 14</span><br><span class="line">        .globl  _main                   ## -- Begin function main</span><br><span class="line">        .p2align        4, 0x90</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">        .cfi_startproc # 指定入口函数</span><br><span class="line">## %bb.0:</span><br><span class="line">        pushq   %rbp </span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset %rbp, -16</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        .cfi_def_cfa_register %rbp</span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        movl    $0, -4(%rbp) </span><br><span class="line">        leaq    L_.str(%rip), %rdi</span><br><span class="line">        movb    $0, %al</span><br><span class="line">        callq   _printf</span><br><span class="line">        xorl    %ecx, %ecx</span><br><span class="line">        movl    %eax, -8(%rbp)          ## 4-byte Spill</span><br><span class="line">        movl    %ecx, %eax</span><br><span class="line">        addq    $16, %rsp</span><br><span class="line">        popq    %rbp</span><br><span class="line">        retq</span><br><span class="line">        .cfi_endproc</span><br><span class="line">                                        ## -- End function</span><br><span class="line">        .section        __TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">        .asciz  &quot;Hello, World!\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.subsections_via_symbols</span><br></pre></td></tr></table></figure><h1 id="解释之前还是说一下汇编基础表"><a href="#解释之前还是说一下汇编基础表" class="headerlink" title="解释之前还是说一下汇编基础表"></a>解释之前还是说一下汇编基础表</h1><h2 id="关于寄存器"><a href="#关于寄存器" class="headerlink" title="关于寄存器"></a>关于寄存器</h2><p>CS（Code Segment）：代码段寄存器<br>DS（Data Segment）：数据段寄存器<br>SS（Stack Segment）：堆栈段寄存器<br>ES（Extra Segment）：附加段寄存器<br>当一个程序要执行时，就要决定程序代码、数据和堆栈各要用到内存的哪些位置，通过设定段寄存器 CS，DS，SS, ES</p><p>esi，edi，分别是16位寄存器DI和SI的32位扩展。它们是源变址寄存器，和目的变址寄存器，用于串操作指令中。同时，它们也可以作为通用寄存器使用。</p><p>EAX 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。<br>EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址。<br>ECX 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。<br>EDX 则总是被用来放整数除法产生的余数。</p><ol><li>常用寄存器有16个，分为x86通用寄存器以及r8-r15寄存器。</li><li>通用寄存器中，函数执行前后必须保持原始的寄存器有3个：是rbx、rbp、rsp。rx寄存器中，最后4个必须保持原值：r12、r13、r14、r15。<br>保持原值的意义是为了让当前函数有可信任的寄存器，减小在函数调用过程中的保存&amp;恢复操作。除了rbp、rsp用于特定用途外，其余5个寄存器可随意使用。</li><li>通用寄存器中，不必假设保存值可随意使用的寄存器有5个：是rax、rcx、rdx、rdi、rsi。其中rax用于第一个返回寄存器（当 然也可以用于其它用途），rdx用于第二个返回寄存器（在调用函数时也用于第三个参数寄存器）。rcx用于第四个参数。rdi用于第一个参数。rsi用于 第二个函数参数。</li><li>r8、r9分配用于第5、第6个参数。</li></ol><p>这里需要说明的是因为实验环境为<code>Darwin</code>内核，因此许多汇编代码是不同的<br>大致可分为两种不同的类型</p><ol><li>DOS/Windows (Intel 风格)</li><li>Unix 和 Linux 系统 ( AT&amp;T 风格)</li></ol><style>table th:nth-of-type(1){width: 20%;}table th:nth-of-type(2){width: 20%;}table th:nth-of-type(3){width: 20%;}table th:nth-of-type(4){width: 40%;}</style><table><thead><tr><th style="text-align:left">AT&amp;T 格式</th><th style="text-align:right">Intel 格式</th><th style="text-align:center">解释</th><th>区别</th></tr></thead><tbody><tr><td style="text-align:left">pushl %eax</td><td style="text-align:right">push eax</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，寄存器名要加上 ‘%’  作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀</td></tr><tr><td style="text-align:left">pushl $1</td><td style="text-align:right">push 1</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，用 ‘$’ 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。</td></tr><tr><td style="text-align:left">addl $1, %eax</td><td style="text-align:right">add eax, 1</td><td style="text-align:center"></td><td>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边</td></tr><tr><td style="text-align:left">movb val, %al</td><td style="text-align:right">mov al, byte ptr val</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀’b’、’w’、’l’分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 “byte ptr” 和 “word ptr” 等前缀来表示的</td></tr><tr><td style="text-align:left">ljump $section, $offset</td><td style="text-align:right">jmp far section:offset</td><td style="text-align:center"></td><td>在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要</td></tr><tr><td style="text-align:left">lcall $section, $offset</td><td style="text-align:right">call far section:offset</td><td style="text-align:center"></td><td>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 “ljump” 和 “lcall”，而在 Intel 汇编格式中则为 “jmp far” 和 “call far”</td></tr><tr><td style="text-align:left">lret $stack_adjust</td><td style="text-align:right">ret far stack_adjust</td><td style="text-align:center"></td><td>与（jump/call）相应的远程返回指令</td></tr></tbody></table><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">➜  CinASM clang -S main.c</span><br><span class="line">➜  CinASM cat main.s     </span><br><span class="line">        .section        __TEXT,__text,regular,pure_instructions </span><br><span class="line">        ## 编译器指令 告知编译器相关的信息或者进行特定操作</span><br><span class="line">        ## __TEXT,__text用来存放代码指令, 代码一般都放在这一节</span><br><span class="line">        ## regular：regular类型的节区可以包含任意代码或数据，并且链接器不会对它们进行任何特殊处理。</span><br><span class="line">        .build_version macos, 10, 14    sdk_version 10, 14 </span><br><span class="line">        ## 编译信息</span><br><span class="line">        .globl  _main                   ## -- Begin function main </span><br><span class="line">        ## .global关键字用来让一个符号对链接器可见，可以供其他链接对象模块使用。 </span><br><span class="line">        ## .global _main 让 _main 符号成为可见的标示符，这样链接器就知道跳转到程序中的什么地方并开始执行。</span><br><span class="line">        .p2align        4, 0x90</span><br><span class="line">        ## 将位置计数器（在当前子部分中）填充到特定存储边界</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">        .cfi_startproc </span><br><span class="line">        # Main 函数开始</span><br><span class="line">        # 用在每个函数的开始，用于初始化一些内部数据结构</span><br><span class="line">## %bb.0:</span><br><span class="line">        pushq   %rbp </span><br><span class="line">        # 保存旧的帧指针，相当于创建新的栈帧</span><br><span class="line"></span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset %rbp, -16</span><br><span class="line">        ## CFI 指令</span><br><span class="line"></span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        ## 指令则将rsp寄存器的值赋值给rbp寄存器．这样一来，属于main函数的栈区域便构建好了．</span><br><span class="line">        </span><br><span class="line">        .cfi_def_cfa_register %rbp</span><br><span class="line">        # CFI 指令 修改计算CFA的规则。从现在开始，将使用寄存器而不是旧寄存器。 偏移量保持不变</span><br><span class="line"></span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        # 也就是rsp = rsp - 16 将栈地址减去16, 用于存放局部变量</span><br><span class="line">        movl    $0, -4(%rbp) </span><br><span class="line">        # 将0存放于rbp - 4的值作为指针指向的内存地址, 也就是栈顶下方4 byte位置, </span><br><span class="line">        从后面的代码中推测出这里存放的是main方法的默认返回值0</span><br><span class="line">        leaq    L_.str(%rip), %rdi</span><br><span class="line">        # 指令引用了L_.str这个标签, 在经过汇编器汇编后会将标汇编为字符串所存放的地址, 让程序可以定位到字符串.</span><br><span class="line">        首先lea指令是mov指令的变种，据说，lea指令是x86体系结构中，是一条最古老但是从某个方面来讲又是最神奇的指令。</span><br><span class="line">        表面上看，它做的事情非常简单，根据括号里的源操作数来计算地址，然后把地址加载到目标寄存器中。</span><br><span class="line">        上面的操作就是 先计算地址 L_.str(%rip) 然后把最终地址载到寄存器 rdi 中</span><br><span class="line">        movb    $0, %al</span><br><span class="line">        # 把 0 值传送给32为的EAX寄存器值</span><br><span class="line"></span><br><span class="line">        callq   _printf</span><br><span class="line">        # 调用 printf 函数</span><br><span class="line">        将下一条指令的地址入栈，然后跳转到目标地址处执行</span><br><span class="line">        指令callq_printf将%rdi作为第一个参数(里面存放的是&quot;hello, world\n&quot;字符串的地址)调用_printf方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ### 方法尾(epilogue), 用于取出方法头中栈帧信息及方法的返回地址, 并将栈恢复到方法调用前的位置</span><br><span class="line">        xorl    %ecx, %ecx</span><br><span class="line">        # 将ecx 计数器 置零咯</span><br><span class="line">        movl    %eax, -8(%rbp)          ## 4-byte Spill</span><br><span class="line">        # movl是以寄存器运算结果为游标，访问内存获得该地址的值，然后给目标寄存器赋值</span><br><span class="line">        movl    %ecx, %eax</span><br><span class="line">    </span><br><span class="line">        addq    $16, %rsp</span><br><span class="line"></span><br><span class="line">        popq    %rbp </span><br><span class="line">        # 从 RBP 寄存器栈中取出数据</span><br><span class="line">        retq </span><br><span class="line">        ### 方法尾(epilogue), 用于取出方法头中栈帧信息及方法的返回地址, 并将栈恢复到方法调用前的位置</span><br><span class="line">        .cfi_endproc </span><br><span class="line">        # Main 函数结束</span><br><span class="line">        #.cfi_startproc 和 .cfi_endproc 分别是 dwarf2 CFI 的初始过程和结束过程指</span><br><span class="line">                                        ## -- End function</span><br><span class="line">        .section        __TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">        .asciz  &quot;Hello, World!\n&quot;</span><br><span class="line">        # 分配一段字符串内存单元，并用expr初始化字符串内存单元</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.subsections_via_symbols</span><br></pre></td></tr></table></figure><p>解释完了，有什么不对的地方，欢迎留言给我，请多多指教</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> clang </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Part.1 包管理器</title>
      <link href="/2019/03/31/golang-golang-1/"/>
      <url>/2019/03/31/golang-golang-1/</url>
      
        <content type="html"><![CDATA[<p><code>TL;DR</code></p><h1 id="Part-1-Golang-Modules"><a href="#Part-1-Golang-Modules" class="headerlink" title="Part.1, Golang Modules"></a>Part.1, Golang Modules</h1><h2 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h2><p>go building package manager.</p><p>go mod是go语言内置的包管理工具，集成在go tool中，安装好go就可以使用。</p><p>要求: go version &gt;= 1.11</p><p>官方文档： <a href="https://tip.golang.org/cmd/go/#hdr-Download_modules_to_local_cache" target="_blank" rel="noopener">https://tip.golang.org/cmd/go…</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 通过环境变量GOPROXY设置代理</span><br><span class="line">export GOPROXY=https://goproxy.io</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">proxychains4 go get github.com/shirou/gopsutil/disk</span><br><span class="line"></span><br><span class="line"># go mod功能开关，默认是auto，在gopath中不启用</span><br><span class="line"># 可设置为on强制启用</span><br><span class="line">export GO111MODULE=on</span><br></pre></td></tr></table></figure><h3 id="初始化-go-mod-init"><a href="#初始化-go-mod-init" class="headerlink" title="初始化 go mod init"></a>初始化 go mod init</h3><p>init报错outside gopath no import comments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 方法一 手动创建go.mod文件， 写入module xxx</span><br><span class="line">echo &apos;module xxx&apos; &gt; go.mod</span><br><span class="line"></span><br><span class="line"># 方法二 main包加入import声明</span><br><span class="line">package main // import &quot;xxx&quot;</span><br></pre></td></tr></table></figure><h3 id="go-mod-download"><a href="#go-mod-download" class="headerlink" title="go mod download"></a>go mod download</h3><p>下载依赖</p><h3 id="go-mod-tidy"><a href="#go-mod-tidy" class="headerlink" title="go mod tidy"></a>go mod tidy</h3><p>同步依赖包，添加需要的，移除多余的</p><h3 id="go-mod-vendor"><a href="#go-mod-vendor" class="headerlink" title="go mod vendor"></a>go mod vendor</h3><p>将依赖包放入vendor</p><h3 id="go-get-下载-升级依赖"><a href="#go-get-下载-升级依赖" class="headerlink" title="go get 下载/升级依赖"></a>go get 下载/升级依赖</h3><p>go mod不再下载源码进$GOPATH/src</p><p>go mod的下载目录在$GOPATH/pkg/mod，并且是文件权限是只读的<br><code>-r--r--r--</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tag必须以v开头 v1.2.3格式</span><br><span class="line">go get -u xxx.com/pkg@2.1.0</span><br></pre></td></tr></table></figure><h3 id="vendor-模式"><a href="#vendor-模式" class="headerlink" title="vendor 模式"></a>vendor 模式</h3><p>go mod是不推荐使用vendor目录的，而是直接使用source或cache中的包。</p><p>在根目录有vendor文件夹时默认使用vendor模式。此模式下依赖只从vendor中找。</p><p><a href="https://github.com/golang/go/wiki/Modules#how-do-i-use-vendoring-with-modules-is-vendoring-going-away" target="_blank" rel="noopener">https://github.com/golang/go/…</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vendor模式下get报错：go get: disabled by -mod=vendor</span><br><span class="line"></span><br><span class="line"># mod有三个取值</span><br><span class="line"># mod can be &apos;&apos;, &apos;readonly&apos;, or &apos;vendor&apos;</span><br><span class="line"># 两种赋值方式都可以</span><br><span class="line">-mod=&apos;&apos;</span><br><span class="line">-mod &apos;&apos;</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>让原本依赖的 github.com/repo/pkg 包，实际使用 github.com/your-fork/pkg@version。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod edit -replace github.com/repo/pkg=github.com/your-fork/pkg@version</span><br></pre></td></tr></table></figure><h3 id="清缓存"><a href="#清缓存" class="headerlink" title="清缓存"></a>清缓存</h3><p>go clean -modcache</p><h3 id="go-mod-amp-go-sum"><a href="#go-mod-amp-go-sum" class="headerlink" title="go.mod &amp; go.sum"></a>go.mod &amp; go.sum</h3><p>go.mod：依赖列表和版本约束。</p><p>go.sum：记录module文件hash值，用于安全校验。</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>go mod不推荐使用vendor，不要将vendor提交到版本控制。</p><p>提交go.mod，可以忽略go.sum，因为会根据校验sum跨平台可能报错。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Go入门系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造高效的PHP工作环境</title>
      <link href="/2016/01/01/PHP-%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E7%9A%84PHP%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/"/>
      <url>/2016/01/01/PHP-%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E7%9A%84PHP%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>用了一段时间的Mac系统， 记录一下使用心得<br>在使用大多数环境时，为了偷懒更加偏向于Homebrew的依赖安装，省去了自己编译的方法，所以<br>在开始的时候呢，首先说一下翻墙环境<br>我使用的是SS + kcptun 的模式，由于大部分操作都是在终端环境，所以这里先来一个Proxy代理的方案</p><h1 id="利器代理篇"><a href="#利器代理篇" class="headerlink" title="利器代理篇"></a>利器代理篇</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 在终端中输入如下命令行</span><br><span class="line">export all_proxy=socks5://127.0.0.1:1080</span><br><span class="line">// 也可以分开TLS 和 HTTP访问</span><br><span class="line">export http_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class="line">export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</span><br><span class="line"></span><br><span class="line">// git 操作 一般情况下访问国外才需要这么做，访问国内时可以切换回来，</span><br><span class="line">// 我也懒得改，反正是kcptun加速，也没有感觉</span><br><span class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line"></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>如果你不想这么麻烦，可以选择 <strong>Proxifier</strong> 全局代理，当然在大多数情况下，有些软件不支持代理的话，可以选择  <strong>Proxifier</strong> 进行强制代理</p><p><a href="https://www.proxifier.com/" title="Proxifier" target="_blank" rel="noopener">Proxifier 下载地址</a></p><p>当然你还可能会遇到，只支持HTTP代理的，那么可以选择 <strong>privoxy</strong> 将 socks5转换成HTTP 但我个人很少使用这种方式</p><h1 id="利器浏览器篇"><a href="#利器浏览器篇" class="headerlink" title="利器浏览器篇"></a>利器浏览器篇</h1><p>当有了代理之后，SS如果选择全局代理的话感觉也不是很好可以走PAC，但我个人选择<strong>SwitchyOmega</strong><br>这里就不啰嗦了，推荐几个我觉得好用的</p><ol><li>FeHelper 百度开发的Web前端助手</li><li>Adblock Plus 广告屏蔽，虽然没以前好用了，但是也还不错用习惯了</li><li>Octotree Github 浏览目录结构利器</li><li>Sourcegraph 比上面的强大的代码阅读理解工具</li></ol><h1 id="利器安装包篇"><a href="#利器安装包篇" class="headerlink" title="利器安装包篇"></a>利器安装包篇</h1><p>有了代理之后，可以愉快的下载到各种你下载慢的东西了，比如说<strong>composer</strong>, <strong>npm i</strong>, <strong>git</strong>, <strong>docker</strong>等等一系列的 飞机一般的感受<br>那么编译就成为了另一件大事了，NMP的环境编译一套下来整个人都懵了，那些乱七八糟的参数，我只想要一个开发环境，咋就那么难呢？<br>为了偷懒，特地 google 了一下，原来Darwin系统还是有包管理的，类似linux 的yum or apt</p><p><code>题外话，如果你是windows的开发者，那么你有choco</code><br><a href="https://chocolatey.org/" title="Choco" target="_blank" rel="noopener">Windows包管理 下载地址</a><br><code>Win10的话也同样可以使用上面的办法安装一整套环境，或者你也可以使用WSL，毕竟Linux才是王道</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 在开始之前挂上代理</span><br><span class="line">export all_proxy=socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">// 使用Ruby获取Homebrew</span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"></span><br><span class="line">// Homebrew 更新</span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line">// 安装nginx </span><br><span class="line">brew install nginx</span><br><span class="line"></span><br><span class="line">// 安装PHP </span><br><span class="line">brew search php </span><br><span class="line">因为homebrew core 迁移问题 php 5.6 低版本迁移问题，</span><br><span class="line">包括php5.6即将要终止维护的问题，将PHP迁移至其他子项目中所以先搜索一下</span><br><span class="line">或者你强制想要安装某个版本，那怎么办访问</span><br></pre></td></tr></table></figure><p><a href="https://php-osx.liip.ch/" title="Choco" target="_blank" rel="noopener">PHP各个版本安装</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">就可以找到各个版本的安装方式执行一下</span><br><span class="line">// 我这里安装PHP5.6 是因为有老版本项目还得继续维护，非常讨厌5.6了</span><br><span class="line">brew install php@5.6</span><br><span class="line">// 中意的7.2安装</span><br><span class="line">brew install php@7.2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装mysql</span><br><span class="line">brew install mysql</span><br><span class="line">// 安装nodejs</span><br><span class="line">brew install node</span><br><span class="line">// 安装yarn composer 等等，只要你想的到的...</span><br></pre></td></tr></table></figure><h1 id="利器命令行篇"><a href="#利器命令行篇" class="headerlink" title="利器命令行篇"></a>利器命令行篇</h1><p>在经历过 代理， 安装包 的痛苦之后，那么命令行又称为了懒人无法面对的事情，等等，我上一行命令是什么来着忘记了我好想记得是 git log xxxxx什么来着<br>算了history看看吧，要不就一直up键找，直到找到为止，这样实在是太痛苦了<br>后来又在网上逛了一圈，终于找到一个神器</p><h3 id="ZSH-安装"><a href="#ZSH-安装" class="headerlink" title="ZSH 安装"></a>ZSH 安装</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh" title="命令行利器" target="_blank" rel="noopener">Oh-my-Zsh</a> </p><h4 id="使用CURL方式安装"><a href="#使用CURL方式安装" class="headerlink" title="使用CURL方式安装"></a>使用CURL方式安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><h4 id="使用Wget方式安装"><a href="#使用Wget方式安装" class="headerlink" title="使用Wget方式安装"></a>使用Wget方式安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><p>安装后你会发现就只是变了个箭头而已，但是环境已经切到了ZSH上</p><h3 id="ZSH自动提示插件"><a href="#ZSH自动提示插件" class="headerlink" title="ZSH自动提示插件"></a>ZSH自动提示插件</h3><ol><li><p>克隆仓库到当前用户的 <code>~/.zsh/zsh-autosuggestions</code>.</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>.zshrc</code> 并向其中添加下面这行:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure></li><li><p>打开一个新的终端</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> PHP </tag>
            
            <tag> Homebrew </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
